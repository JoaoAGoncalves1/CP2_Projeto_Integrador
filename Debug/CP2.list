
CP2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007024  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08007224  08007224  00017224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074f0  080074f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080074f0  080074f0  000174f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074f8  080074f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074f8  080074f8  000174f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074fc  080074fc  000174fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  20000074  08007574  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000064c  08007574  0002064c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131d9  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000284c  00000000  00000000  0003327b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00035ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  000369d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000362b  00000000  00000000  000377d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134a4  00000000  00000000  0003adfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd4da  00000000  00000000  0004e29f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b779  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000486c  00000000  00000000  0014b7cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	0800720c 	.word	0x0800720c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	0800720c 	.word	0x0800720c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_GPIO_Init+0x2c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <MX_GPIO_Init+0x2c>)
 8000620:	f043 0308 	orr.w	r3, r3, #8
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_GPIO_Init+0x2c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0308 	and.w	r3, r3, #8
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800

08000644 <__io_putchar>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch){
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800064c:	1d39      	adds	r1, r7, #4
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	2201      	movs	r2, #1
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <__io_putchar+0x20>)
 8000656:	f003 ff5f 	bl	8004518 <HAL_UART_Transmit>
	return ch;
 800065a:	687b      	ldr	r3, [r7, #4]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200005b0 	.word	0x200005b0

08000668 <__io_getchar>:
int __io_getchar(void){
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	71fb      	strb	r3, [r7, #7]
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <__io_getchar+0x38>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2208      	movs	r2, #8
 8000678:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800067a:	1df9      	adds	r1, r7, #7
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
 8000680:	2201      	movs	r2, #1
 8000682:	4807      	ldr	r0, [pc, #28]	; (80006a0 <__io_getchar+0x38>)
 8000684:	f003 ffcb 	bl	800461e <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3,(uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000688:	1df9      	adds	r1, r7, #7
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2201      	movs	r2, #1
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <__io_getchar+0x38>)
 8000692:	f003 ff41 	bl	8004518 <HAL_UART_Transmit>
	return ch;
 8000696:	79fb      	ldrb	r3, [r7, #7]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200005b0 	.word	0x200005b0

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006aa:	f001 f822 	bl	80016f2 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ae:	f000 f83f 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b2:	f7ff ffaf 	bl	8000614 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006b6:	f000 feef 	bl	8001498 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80006ba:	f000 fda3 	bl	8001204 <MX_TIM2_Init>
  MX_TIM4_Init();
 80006be:	f000 fdef 	bl	80012a0 <MX_TIM4_Init>
  MX_TIM1_Init();
 80006c2:	f000 fd4b 	bl	800115c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  setvbuf(stdin, NULL, _IONBF, 0);
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <main+0x78>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	6858      	ldr	r0, [r3, #4]
 80006cc:	2300      	movs	r3, #0
 80006ce:	2202      	movs	r2, #2
 80006d0:	2100      	movs	r1, #0
 80006d2:	f005 fce3 	bl	800609c <setvbuf>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
 80006d6:	2201      	movs	r2, #1
 80006d8:	4911      	ldr	r1, [pc, #68]	; (8000720 <main+0x7c>)
 80006da:	4812      	ldr	r0, [pc, #72]	; (8000724 <main+0x80>)
 80006dc:	f004 f8c2 	bl	8004864 <HAL_UART_Receive_IT>
  append_char('>');
 80006e0:	203e      	movs	r0, #62	; 0x3e
 80006e2:	f000 fadb 	bl	8000c9c <append_char>
  HAL_UART_Transmit_IT(&huart3, (uint8_t *)&tx_buffer[r_tx_bindex&(FIFO_LEN-1)],1);
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <main+0x84>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006f0:	4a0e      	ldr	r2, [pc, #56]	; (800072c <main+0x88>)
 80006f2:	4413      	add	r3, r2
 80006f4:	2201      	movs	r2, #1
 80006f6:	4619      	mov	r1, r3
 80006f8:	480a      	ldr	r0, [pc, #40]	; (8000724 <main+0x80>)
 80006fa:	f004 f855 	bl	80047a8 <HAL_UART_Transmit_IT>
  r_tx_bindex++;
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <main+0x84>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	b29b      	uxth	r3, r3
 8000704:	3301      	adds	r3, #1
 8000706:	b29a      	uxth	r2, r3
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <main+0x84>)
 800070a:	801a      	strh	r2, [r3, #0]
  uint8_t flag_enable = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int_command(flag_enable);
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f880 	bl	8000818 <int_command>
 8000718:	e7fa      	b.n	8000710 <main+0x6c>
 800071a:	bf00      	nop
 800071c:	20000010 	.word	0x20000010
 8000720:	20000091 	.word	0x20000091
 8000724:	200005b0 	.word	0x200005b0
 8000728:	20000498 	.word	0x20000498
 800072c:	20000294 	.word	0x20000294

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2234      	movs	r2, #52	; 0x34
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f005 fbb4 	bl	8005eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <SystemClock_Config+0xd4>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	4a2a      	ldr	r2, [pc, #168]	; (8000804 <SystemClock_Config+0xd4>)
 800075a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075e:	6413      	str	r3, [r2, #64]	; 0x40
 8000760:	4b28      	ldr	r3, [pc, #160]	; (8000804 <SystemClock_Config+0xd4>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800076c:	4b26      	ldr	r3, [pc, #152]	; (8000808 <SystemClock_Config+0xd8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a25      	ldr	r2, [pc, #148]	; (8000808 <SystemClock_Config+0xd8>)
 8000772:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b23      	ldr	r3, [pc, #140]	; (8000808 <SystemClock_Config+0xd8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078c:	2310      	movs	r3, #16
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000790:	2302      	movs	r3, #2
 8000792:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000794:	2300      	movs	r3, #0
 8000796:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000798:	2308      	movs	r3, #8
 800079a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800079c:	23d8      	movs	r3, #216	; 0xd8
 800079e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fb9b 	bl	8001eec <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007bc:	f000 f826 	bl	800080c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007c0:	f001 fb44 	bl	8001e4c <HAL_PWREx_EnableOverDrive>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ca:	f000 f81f 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	230f      	movs	r3, #15
 80007d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2302      	movs	r3, #2
 80007d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	2107      	movs	r1, #7
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fe2b 	bl	8002448 <HAL_RCC_ClockConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007f8:	f000 f808 	bl	800080c <Error_Handler>
  }
}
 80007fc:	bf00      	nop
 80007fe:	3750      	adds	r7, #80	; 0x50
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	e7fe      	b.n	8000814 <Error_Handler+0x8>
	...

08000818 <int_command>:
uint8_t delim_1[1], delim_2[] = " ", rx_data = 0, tx_data = 0, new_com = 0, rx_buffer[FIFO_LEN], tx_buffer[FIFO_LEN], val_com_flag = FALSE, desc_sampl_flag = FALSE;
uint8_t samp_start_flag = FALSE ,samp_end_flag = FALSE, samp_num, tx_flag = FALSE;
volatile uint16_t w_rx_bindex = 0, r_tx_bindex = 0,  r_rx_bindex = 0, w_tx_bindex = 0;
char *comando, *token, *aux_token, *memo_comando, *memo_valid_comando, *message, temp_arr[20], *memory_ptr; State_Machine this_state = 0;

void int_command(uint8_t flag_enable){
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]

	char *com_arr[] = {"CS", "EN", "HW"};
 8000822:	4a63      	ldr	r2, [pc, #396]	; (80009b0 <int_command+0x198>)
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	ca07      	ldmia	r2, {r0, r1, r2}
 800082a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 	if(((w_rx_bindex-r_rx_bindex) != 0) && (new_com >0) ){
 800082e:	4b61      	ldr	r3, [pc, #388]	; (80009b4 <int_command+0x19c>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	b29a      	uxth	r2, r3
 8000834:	4b60      	ldr	r3, [pc, #384]	; (80009b8 <int_command+0x1a0>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	b29b      	uxth	r3, r3
 800083a:	429a      	cmp	r2, r3
 800083c:	f000 80ab 	beq.w	8000996 <int_command+0x17e>
 8000840:	4b5e      	ldr	r3, [pc, #376]	; (80009bc <int_command+0x1a4>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	f000 80a6 	beq.w	8000996 <int_command+0x17e>

 		if((*memo_comando != '$')&& (val_com_flag)){
 800084a:	4b5d      	ldr	r3, [pc, #372]	; (80009c0 <int_command+0x1a8>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b24      	cmp	r3, #36	; 0x24
 8000852:	d019      	beq.n	8000888 <int_command+0x70>
 8000854:	4b5b      	ldr	r3, [pc, #364]	; (80009c4 <int_command+0x1ac>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d015      	beq.n	8000888 <int_command+0x70>
			memo_valid_comando = (char*)malloc(strlen(memo_comando)+1);
 800085c:	4b58      	ldr	r3, [pc, #352]	; (80009c0 <int_command+0x1a8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fcf7 	bl	8000254 <strlen>
 8000866:	4603      	mov	r3, r0
 8000868:	3301      	adds	r3, #1
 800086a:	4618      	mov	r0, r3
 800086c:	f005 fb16 	bl	8005e9c <malloc>
 8000870:	4603      	mov	r3, r0
 8000872:	461a      	mov	r2, r3
 8000874:	4b54      	ldr	r3, [pc, #336]	; (80009c8 <int_command+0x1b0>)
 8000876:	601a      	str	r2, [r3, #0]
			strcpy (memo_valid_comando,memo_comando);
 8000878:	4b53      	ldr	r3, [pc, #332]	; (80009c8 <int_command+0x1b0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a50      	ldr	r2, [pc, #320]	; (80009c0 <int_command+0x1a8>)
 800087e:	6812      	ldr	r2, [r2, #0]
 8000880:	4611      	mov	r1, r2
 8000882:	4618      	mov	r0, r3
 8000884:	f005 fcd0 	bl	8006228 <strcpy>
		}

	comando = _my_strtok(&rx_buffer[r_rx_bindex&(FIFO_LEN-1)], delim_1[0]);
 8000888:	4b4b      	ldr	r3, [pc, #300]	; (80009b8 <int_command+0x1a0>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	b29b      	uxth	r3, r3
 800088e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000892:	4a4e      	ldr	r2, [pc, #312]	; (80009cc <int_command+0x1b4>)
 8000894:	4413      	add	r3, r2
 8000896:	4a4e      	ldr	r2, [pc, #312]	; (80009d0 <int_command+0x1b8>)
 8000898:	7812      	ldrb	r2, [r2, #0]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f000 fa41 	bl	8000d24 <_my_strtok>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4a4b      	ldr	r2, [pc, #300]	; (80009d4 <int_command+0x1bc>)
 80008a6:	6013      	str	r3, [r2, #0]
	memo_comando = (char*)malloc(strlen(comando)+1);//+1 para o caractere '\0'
 80008a8:	4b4a      	ldr	r3, [pc, #296]	; (80009d4 <int_command+0x1bc>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fcd1 	bl	8000254 <strlen>
 80008b2:	4603      	mov	r3, r0
 80008b4:	3301      	adds	r3, #1
 80008b6:	4618      	mov	r0, r3
 80008b8:	f005 faf0 	bl	8005e9c <malloc>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	4b3f      	ldr	r3, [pc, #252]	; (80009c0 <int_command+0x1a8>)
 80008c2:	601a      	str	r2, [r3, #0]
	strcpy (memo_comando,comando);
 80008c4:	4b3e      	ldr	r3, [pc, #248]	; (80009c0 <int_command+0x1a8>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a42      	ldr	r2, [pc, #264]	; (80009d4 <int_command+0x1bc>)
 80008ca:	6812      	ldr	r2, [r2, #0]
 80008cc:	4611      	mov	r1, r2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f005 fcaa 	bl	8006228 <strcpy>
	r_rx_bindex += (strlen(comando)+1);
 80008d4:	4b3f      	ldr	r3, [pc, #252]	; (80009d4 <int_command+0x1bc>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fcbb 	bl	8000254 <strlen>
 80008de:	4603      	mov	r3, r0
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	4b35      	ldr	r3, [pc, #212]	; (80009b8 <int_command+0x1a0>)
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	4413      	add	r3, r2
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	3301      	adds	r3, #1
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <int_command+0x1a0>)
 80008f2:	801a      	strh	r2, [r3, #0]
	token = strtok(comando, delim_2);
 80008f4:	4b37      	ldr	r3, [pc, #220]	; (80009d4 <int_command+0x1bc>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4937      	ldr	r1, [pc, #220]	; (80009d8 <int_command+0x1c0>)
 80008fa:	4618      	mov	r0, r3
 80008fc:	f005 fc9c 	bl	8006238 <strtok>
 8000900:	4603      	mov	r3, r0
 8000902:	4a36      	ldr	r2, [pc, #216]	; (80009dc <int_command+0x1c4>)
 8000904:	6013      	str	r3, [r2, #0]
	_push_message(memo_comando);
 8000906:	4b2e      	ldr	r3, [pc, #184]	; (80009c0 <int_command+0x1a8>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f994 	bl	8000c38 <_push_message>
	append_char(delim_1[0]);
 8000910:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <int_command+0x1b8>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f9c1 	bl	8000c9c <append_char>

	switch(my_command(com_arr, token, 15)){
 800091a:	4b30      	ldr	r3, [pc, #192]	; (80009dc <int_command+0x1c4>)
 800091c:	6819      	ldr	r1, [r3, #0]
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	220f      	movs	r2, #15
 8000924:	4618      	mov	r0, r3
 8000926:	f000 f961 	bl	8000bec <my_command>
 800092a:	4603      	mov	r3, r0
 800092c:	2b03      	cmp	r3, #3
 800092e:	d815      	bhi.n	800095c <int_command+0x144>
 8000930:	a201      	add	r2, pc, #4	; (adr r2, 8000938 <int_command+0x120>)
 8000932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000936:	bf00      	nop
 8000938:	08000949 	.word	0x08000949
 800093c:	0800094f 	.word	0x0800094f
 8000940:	0800096b 	.word	0x0800096b
 8000944:	0800096b 	.word	0x0800096b
		case 0:
			Control_System();
 8000948:	f000 f84e 	bl	80009e8 <Control_System>
			break;
 800094c:	e00e      	b.n	800096c <int_command+0x154>
		case 1:
			flag_enable = Enable_Pin_CMD(flag_enable);
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 f8af 	bl	8000ab4 <Enable_Pin_CMD>
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
			break;
 800095a:	e007      	b.n	800096c <int_command+0x154>
			break;
		case 3:

			break;
		default:
			_push_message("Comando invalido!");
 800095c:	4820      	ldr	r0, [pc, #128]	; (80009e0 <int_command+0x1c8>)
 800095e:	f000 f96b 	bl	8000c38 <_push_message>
			val_com_flag = FALSE;
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <int_command+0x1ac>)
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
			break;
 8000968:	e000      	b.n	800096c <int_command+0x154>
			break;
 800096a:	bf00      	nop
		}
		new_com--; //Limpa a flag de novo comando
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <int_command+0x1a4>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	3b01      	subs	r3, #1
 8000972:	b2da      	uxtb	r2, r3
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <int_command+0x1a4>)
 8000976:	701a      	strb	r2, [r3, #0]
		append_char(delim_1[0]);
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <int_command+0x1b8>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4618      	mov	r0, r3
 800097e:	f000 f98d 	bl	8000c9c <append_char>
		append_char(delim_1[0]);
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <int_command+0x1b8>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f988 	bl	8000c9c <append_char>
		append_char('>');
 800098c:	203e      	movs	r0, #62	; 0x3e
 800098e:	f000 f985 	bl	8000c9c <append_char>
		start_tx();
 8000992:	f000 f9a1 	bl	8000cd8 <start_tx>
	}
 	if(tx_flag){
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <int_command+0x1cc>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d004      	beq.n	80009a8 <int_command+0x190>
 		start_tx();
 800099e:	f000 f99b 	bl	8000cd8 <start_tx>
 		tx_flag = FALSE;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <int_command+0x1cc>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]

 	}
}
 80009a8:	bf00      	nop
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	08007244 	.word	0x08007244
 80009b4:	20000496 	.word	0x20000496
 80009b8:	2000049a 	.word	0x2000049a
 80009bc:	20000093 	.word	0x20000093
 80009c0:	200004a8 	.word	0x200004a8
 80009c4:	20000494 	.word	0x20000494
 80009c8:	200004ac 	.word	0x200004ac
 80009cc:	20000094 	.word	0x20000094
 80009d0:	20000090 	.word	0x20000090
 80009d4:	200004a0 	.word	0x200004a0
 80009d8:	20000000 	.word	0x20000000
 80009dc:	200004a4 	.word	0x200004a4
 80009e0:	08007230 	.word	0x08007230
 80009e4:	20000495 	.word	0x20000495

080009e8 <Control_System>:
void Control_System(){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	//modo reset, manual, ensaio experimental, automático//
	strcpy (token, memo_comando);
 80009ec:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <Control_System+0xb4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a2b      	ldr	r2, [pc, #172]	; (8000aa0 <Control_System+0xb8>)
 80009f2:	6812      	ldr	r2, [r2, #0]
 80009f4:	4611      	mov	r1, r2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f005 fc16 	bl	8006228 <strcpy>
	token = strtok(token, " ");
 80009fc:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <Control_System+0xb4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4928      	ldr	r1, [pc, #160]	; (8000aa4 <Control_System+0xbc>)
 8000a02:	4618      	mov	r0, r3
 8000a04:	f005 fc18 	bl	8006238 <strtok>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4a24      	ldr	r2, [pc, #144]	; (8000a9c <Control_System+0xb4>)
 8000a0c:	6013      	str	r3, [r2, #0]
	if (token != NULL)
 8000a0e:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <Control_System+0xb4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d006      	beq.n	8000a24 <Control_System+0x3c>
	token = strtok(NULL, " ");
 8000a16:	4923      	ldr	r1, [pc, #140]	; (8000aa4 <Control_System+0xbc>)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f005 fc0d 	bl	8006238 <strtok>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	4a1e      	ldr	r2, [pc, #120]	; (8000a9c <Control_System+0xb4>)
 8000a22:	6013      	str	r3, [r2, #0]

	this_state = strtol(token, NULL, 16);
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <Control_System+0xb4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2210      	movs	r2, #16
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f005 fce1 	bl	80063f4 <strtol>
 8000a32:	4603      	mov	r3, r0
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <Control_System+0xc0>)
 8000a38:	701a      	strb	r2, [r3, #0]
	_push_message("CS ");
 8000a3a:	481c      	ldr	r0, [pc, #112]	; (8000aac <Control_System+0xc4>)
 8000a3c:	f000 f8fc 	bl	8000c38 <_push_message>

	switch (this_state){
 8000a40:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <Control_System+0xc0>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	d823      	bhi.n	8000a90 <Control_System+0xa8>
 8000a48:	a201      	add	r2, pc, #4	; (adr r2, 8000a50 <Control_System+0x68>)
 8000a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4e:	bf00      	nop
 8000a50:	08000a61 	.word	0x08000a61
 8000a54:	08000a6d 	.word	0x08000a6d
 8000a58:	08000a79 	.word	0x08000a79
 8000a5c:	08000a85 	.word	0x08000a85
		case 0:	//RESET						//Neste estado as variaveis de controlo devemm ser resetadas e os pinos de enable desabilitados
			this_state = STATE_RESET;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <Control_System+0xc0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
			Reset_State();
 8000a66:	f000 f875 	bl	8000b54 <Reset_State>
			break;
 8000a6a:	e015      	b.n	8000a98 <Control_System+0xb0>
		case 1: //MANUAL					//Neste estado os parâmetros devem ser inicializaddos em malha aberta
			this_state = STATE_MANUAL;
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <Control_System+0xc0>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	701a      	strb	r2, [r3, #0]
			Manual_State();					//inicializar perfifericos
 8000a72:	f000 f88b 	bl	8000b8c <Manual_State>
			break;							//posição e velocidade	//acionar PWM
 8000a76:	e00f      	b.n	8000a98 <Control_System+0xb0>
		case 2:
			this_state = STATE_EN_EXPERIM;
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <Control_System+0xc0>)
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	701a      	strb	r2, [r3, #0]
			Experimental_Mode();
 8000a7e:	f000 f88f 	bl	8000ba0 <Experimental_Mode>
			break;
 8000a82:	e009      	b.n	8000a98 <Control_System+0xb0>
		case 3:
			this_state = STATE_AUTOMATIC;
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <Control_System+0xc0>)
 8000a86:	2203      	movs	r2, #3
 8000a88:	701a      	strb	r2, [r3, #0]
			Automatic_Mode();
 8000a8a:	f000 f890 	bl	8000bae <Automatic_Mode>
			break;
 8000a8e:	e003      	b.n	8000a98 <Control_System+0xb0>
		default:
			_push_message("Estado invalido");
 8000a90:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <Control_System+0xc8>)
 8000a92:	f000 f8d1 	bl	8000c38 <_push_message>
		break;
 8000a96:	bf00      	nop
	}
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200004a4 	.word	0x200004a4
 8000aa0:	200004a8 	.word	0x200004a8
 8000aa4:	08007250 	.word	0x08007250
 8000aa8:	200004c4 	.word	0x200004c4
 8000aac:	08007254 	.word	0x08007254
 8000ab0:	08007258 	.word	0x08007258

08000ab4 <Enable_Pin_CMD>:
uint8_t Enable_Pin_CMD(uint8_t flag_enable){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]

	strcpy (token, memo_comando);
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <Enable_Pin_CMD+0x8c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a20      	ldr	r2, [pc, #128]	; (8000b44 <Enable_Pin_CMD+0x90>)
 8000ac4:	6812      	ldr	r2, [r2, #0]
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f005 fbad 	bl	8006228 <strcpy>
	token = strtok(token, " ");
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <Enable_Pin_CMD+0x8c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	491d      	ldr	r1, [pc, #116]	; (8000b48 <Enable_Pin_CMD+0x94>)
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f005 fbaf 	bl	8006238 <strtok>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4a18      	ldr	r2, [pc, #96]	; (8000b40 <Enable_Pin_CMD+0x8c>)
 8000ade:	6013      	str	r3, [r2, #0]
	if (token != NULL)
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <Enable_Pin_CMD+0x8c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d006      	beq.n	8000af6 <Enable_Pin_CMD+0x42>
	token = strtok(NULL, " ");
 8000ae8:	4917      	ldr	r1, [pc, #92]	; (8000b48 <Enable_Pin_CMD+0x94>)
 8000aea:	2000      	movs	r0, #0
 8000aec:	f005 fba4 	bl	8006238 <strtok>
 8000af0:	4603      	mov	r3, r0
 8000af2:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <Enable_Pin_CMD+0x8c>)
 8000af4:	6013      	str	r3, [r2, #0]

	this_state = strtol(token, NULL, 16);
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <Enable_Pin_CMD+0x8c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2210      	movs	r2, #16
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f005 fc78 	bl	80063f4 <strtol>
 8000b04:	4603      	mov	r3, r0
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <Enable_Pin_CMD+0x98>)
 8000b0a:	701a      	strb	r2, [r3, #0]

	if (this_state == STATE_RESET){		//Disable
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <Enable_Pin_CMD+0x98>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d104      	bne.n	8000b1e <Enable_Pin_CMD+0x6a>
		flag_enable = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	71fb      	strb	r3, [r7, #7]
		Disable_Pin();
 8000b18:	f000 f850 	bl	8000bbc <Disable_Pin>
 8000b1c:	e00b      	b.n	8000b36 <Enable_Pin_CMD+0x82>
	}
	else if (this_state == 1){	//Enable
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <Enable_Pin_CMD+0x98>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d104      	bne.n	8000b30 <Enable_Pin_CMD+0x7c>
		flag_enable = 1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	71fb      	strb	r3, [r7, #7]
		Enable_Pin();
 8000b2a:	f000 f853 	bl	8000bd4 <Enable_Pin>
 8000b2e:	e002      	b.n	8000b36 <Enable_Pin_CMD+0x82>
	}
	else
		_push_message("Estado invalido");
 8000b30:	4807      	ldr	r0, [pc, #28]	; (8000b50 <Enable_Pin_CMD+0x9c>)
 8000b32:	f000 f881 	bl	8000c38 <_push_message>
	return flag_enable;
 8000b36:	79fb      	ldrb	r3, [r7, #7]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200004a4 	.word	0x200004a4
 8000b44:	200004a8 	.word	0x200004a8
 8000b48:	08007250 	.word	0x08007250
 8000b4c:	200004c4 	.word	0x200004c4
 8000b50:	08007258 	.word	0x08007258

08000b54 <Reset_State>:
void Reset_State(){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	if (this_state == STATE_RESET){
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <Reset_State+0x28>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d107      	bne.n	8000b70 <Reset_State+0x1c>
		_push_message("Reset_State\r");
 8000b60:	4807      	ldr	r0, [pc, #28]	; (8000b80 <Reset_State+0x2c>)
 8000b62:	f000 f869 	bl	8000c38 <_push_message>
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8000b66:	2104      	movs	r1, #4
 8000b68:	4806      	ldr	r0, [pc, #24]	; (8000b84 <Reset_State+0x30>)
 8000b6a:	f002 fc6d 	bl	8003448 <HAL_TIM_PWM_Stop>

	}
	else
		_push_message("Estado invalido");
}
 8000b6e:	e002      	b.n	8000b76 <Reset_State+0x22>
		_push_message("Estado invalido");
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <Reset_State+0x34>)
 8000b72:	f000 f861 	bl	8000c38 <_push_message>
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200004c4 	.word	0x200004c4
 8000b80:	08007268 	.word	0x08007268
 8000b84:	20000564 	.word	0x20000564
 8000b88:	08007258 	.word	0x08007258

08000b8c <Manual_State>:
void Manual_State(){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);		//inicializa o timer 4 em PWM
 8000b90:	2104      	movs	r1, #4
 8000b92:	4802      	ldr	r0, [pc, #8]	; (8000b9c <Manual_State+0x10>)
 8000b94:	f002 fb5e 	bl	8003254 <HAL_TIM_PWM_Start>

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000564 	.word	0x20000564

08000ba0 <Experimental_Mode>:
void Experimental_Mode(){
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <Automatic_Mode>:
void Automatic_Mode(){
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <Disable_Pin>:
void Disable_Pin(){
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
	this_state = STATE_RESET;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <Disable_Pin+0x14>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	200004c4 	.word	0x200004c4

08000bd4 <Enable_Pin>:
void Enable_Pin(){
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
	this_state = STATE_ENABLE;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <Enable_Pin+0x14>)
 8000bda:	2204      	movs	r2, #4
 8000bdc:	701a      	strb	r2, [r3, #0]
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	200004c4 	.word	0x200004c4

08000bec <my_command>:
	}
	else
		_push_message("Valor de Duty Cycle inválido");
}
*/
uint8_t my_command(char *com_array[], char*token, uint8_t arr_len){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	75fb      	strb	r3, [r7, #23]
	while((strcmp(com_array[i], token))){
 8000bfe:	e00a      	b.n	8000c16 <my_command+0x2a>
		if(i == (arr_len-1)){
 8000c00:	7dfa      	ldrb	r2, [r7, #23]
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d102      	bne.n	8000c10 <my_command+0x24>
			i = -1;
 8000c0a:	23ff      	movs	r3, #255	; 0xff
 8000c0c:	75fb      	strb	r3, [r7, #23]
			break;
 8000c0e:	e00e      	b.n	8000c2e <my_command+0x42>
		}
		i++;
 8000c10:	7dfb      	ldrb	r3, [r7, #23]
 8000c12:	3301      	adds	r3, #1
 8000c14:	75fb      	strb	r3, [r7, #23]
	while((strcmp(com_array[i], token))){
 8000c16:	7dfb      	ldrb	r3, [r7, #23]
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fb0c 	bl	8000240 <strcmp>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1e8      	bne.n	8000c00 <my_command+0x14>
	}
	return i;
 8000c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <_push_message>:
void _push_message(char *message){
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

	char *aux_ptr;
	uint8_t i = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	72fb      	strb	r3, [r7, #11]
	aux_ptr = message;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	60fb      	str	r3, [r7, #12]
	for (i=0; i<strlen(message); i++){
 8000c48:	2300      	movs	r3, #0
 8000c4a:	72fb      	strb	r3, [r7, #11]
 8000c4c:	e015      	b.n	8000c7a <_push_message+0x42>
		 tx_buffer[w_tx_bindex&(FIFO_LEN-1)] = *aux_ptr;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <_push_message+0x5c>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	7811      	ldrb	r1, [r2, #0]
 8000c5c:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <_push_message+0x60>)
 8000c5e:	54d1      	strb	r1, [r2, r3]
		  aux_ptr++;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	3301      	adds	r3, #1
 8000c64:	60fb      	str	r3, [r7, #12]
		  w_tx_bindex++;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <_push_message+0x5c>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <_push_message+0x5c>)
 8000c72:	801a      	strh	r2, [r3, #0]
	for (i=0; i<strlen(message); i++){
 8000c74:	7afb      	ldrb	r3, [r7, #11]
 8000c76:	3301      	adds	r3, #1
 8000c78:	72fb      	strb	r3, [r7, #11]
 8000c7a:	7afc      	ldrb	r4, [r7, #11]
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff fae9 	bl	8000254 <strlen>
 8000c82:	4603      	mov	r3, r0
 8000c84:	429c      	cmp	r4, r3
 8000c86:	d3e2      	bcc.n	8000c4e <_push_message+0x16>
	}

}
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd90      	pop	{r4, r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2000049c 	.word	0x2000049c
 8000c98:	20000294 	.word	0x20000294

08000c9c <append_char>:
void append_char(char caract){
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
	tx_buffer[w_tx_bindex&(FIFO_LEN-1)] = caract;
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <append_char+0x34>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000cb0:	4908      	ldr	r1, [pc, #32]	; (8000cd4 <append_char+0x38>)
 8000cb2:	79fa      	ldrb	r2, [r7, #7]
 8000cb4:	54ca      	strb	r2, [r1, r3]
	w_tx_bindex++;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <append_char+0x34>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <append_char+0x34>)
 8000cc2:	801a      	strh	r2, [r3, #0]

}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	2000049c 	.word	0x2000049c
 8000cd4:	20000294 	.word	0x20000294

08000cd8 <start_tx>:
void start_tx(){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0

	if (USART3->ISR & USART_ISR_TC)	{ // Transmission Complete (TC) É ATIVADA QUANDO A TRANSMISSÃO É CONCLUIDA - CASO NAO ESTEJA CONCLUIDA NAO SE DEVE INVOCAR NOVAMENTE HAL_UART_Transmit_IT()
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <start_tx+0x3c>)
 8000cde:	69db      	ldr	r3, [r3, #28]
 8000ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d012      	beq.n	8000d0e <start_tx+0x36>
		HAL_UART_Transmit_IT(&huart3, (uint8_t *)&tx_buffer[r_tx_bindex&(FIFO_LEN-1)],1);
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <start_tx+0x40>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <start_tx+0x44>)
 8000cf4:	4413      	add	r3, r2
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4809      	ldr	r0, [pc, #36]	; (8000d20 <start_tx+0x48>)
 8000cfc:	f003 fd54 	bl	80047a8 <HAL_UART_Transmit_IT>
		r_tx_bindex++;
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <start_tx+0x40>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	3301      	adds	r3, #1
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <start_tx+0x40>)
 8000d0c:	801a      	strh	r2, [r3, #0]
	}

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40004800 	.word	0x40004800
 8000d18:	20000498 	.word	0x20000498
 8000d1c:	20000294 	.word	0x20000294
 8000d20:	200005b0 	.word	0x200005b0

08000d24 <_my_strtok>:
char* _my_strtok(char* str, char delimiter){
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]
	for(i=0; str[i] != delimiter; i++){
 8000d34:	2300      	movs	r3, #0
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	e009      	b.n	8000d4e <_my_strtok+0x2a>
		i&= (FIFO_LEN-1);
		temp_arr[i] = str[i];
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	441a      	add	r2, r3
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	7811      	ldrb	r1, [r2, #0]
 8000d44:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <_my_strtok+0x50>)
 8000d46:	54d1      	strb	r1, [r2, r3]
	for(i=0; str[i] != delimiter; i++){
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	73fb      	strb	r3, [r7, #15]
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	4413      	add	r3, r2
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	78fa      	ldrb	r2, [r7, #3]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d1ee      	bne.n	8000d3a <_my_strtok+0x16>
	}
	temp_arr[i] = '\0';
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <_my_strtok+0x50>)
 8000d60:	2100      	movs	r1, #0
 8000d62:	54d1      	strb	r1, [r2, r3]
	return temp_arr;
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <_my_strtok+0x50>)
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	200004b0 	.word	0x200004b0

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <HAL_MspInit+0x44>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <HAL_MspInit+0x44>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <HAL_MspInit+0x44>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <HAL_MspInit+0x44>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <HAL_MspInit+0x44>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_MspInit+0x44>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <UsageFault_Handler+0x4>

08000dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0c:	f000 fcae 	bl	800176c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <TIM2_IRQHandler+0x10>)
 8000e1a:	f002 fb95 	bl	8003548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000518 	.word	0x20000518

08000e28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <USART3_IRQHandler+0x10>)
 8000e2e:	f003 fd5d 	bl	80048ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200005b0 	.word	0x200005b0

08000e3c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]

	uint32_t i = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]

	if(huart == &huart3){
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a35      	ldr	r2, [pc, #212]	; (8000f20 <HAL_UART_RxCpltCallback+0xe4>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d163      	bne.n	8000f18 <HAL_UART_RxCpltCallback+0xdc>

		HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
 8000e50:	2201      	movs	r2, #1
 8000e52:	4934      	ldr	r1, [pc, #208]	; (8000f24 <HAL_UART_RxCpltCallback+0xe8>)
 8000e54:	4832      	ldr	r0, [pc, #200]	; (8000f20 <HAL_UART_RxCpltCallback+0xe4>)
 8000e56:	f003 fd05 	bl	8004864 <HAL_UART_Receive_IT>
		rx_buffer[w_rx_bindex&(FIFO_LEN-1)] = rx_data;
 8000e5a:	4b33      	ldr	r3, [pc, #204]	; (8000f28 <HAL_UART_RxCpltCallback+0xec>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e64:	4a2f      	ldr	r2, [pc, #188]	; (8000f24 <HAL_UART_RxCpltCallback+0xe8>)
 8000e66:	7811      	ldrb	r1, [r2, #0]
 8000e68:	4a30      	ldr	r2, [pc, #192]	; (8000f2c <HAL_UART_RxCpltCallback+0xf0>)
 8000e6a:	54d1      	strb	r1, [r2, r3]
		w_rx_bindex++;
 8000e6c:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <HAL_UART_RxCpltCallback+0xec>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	3301      	adds	r3, #1
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	4b2c      	ldr	r3, [pc, #176]	; (8000f28 <HAL_UART_RxCpltCallback+0xec>)
 8000e78:	801a      	strh	r2, [r3, #0]

		if((rx_data == '\n') || (rx_data == '\r')){
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <HAL_UART_RxCpltCallback+0xe8>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b0a      	cmp	r3, #10
 8000e80:	d003      	beq.n	8000e8a <HAL_UART_RxCpltCallback+0x4e>
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <HAL_UART_RxCpltCallback+0xe8>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b0d      	cmp	r3, #13
 8000e88:	d10a      	bne.n	8000ea0 <HAL_UART_RxCpltCallback+0x64>
			new_com++;
 8000e8a:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <HAL_UART_RxCpltCallback+0xf4>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <HAL_UART_RxCpltCallback+0xf4>)
 8000e94:	701a      	strb	r2, [r3, #0]
			delim_1[0] = rx_data;// dependendo de terminal pode estar configurado para carriage return ou new line
 8000e96:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <HAL_UART_RxCpltCallback+0xe8>)
 8000e98:	781a      	ldrb	r2, [r3, #0]
 8000e9a:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <HAL_UART_RxCpltCallback+0xf8>)
 8000e9c:	701a      	strb	r2, [r3, #0]
			w_rx_bindex-=2;
			rx_buffer[w_rx_bindex&(FIFO_LEN-1)] = 0;
			rx_buffer[(w_rx_bindex+1)&(FIFO_LEN-1)] = 0;
		}
	}
}
 8000e9e:	e03b      	b.n	8000f18 <HAL_UART_RxCpltCallback+0xdc>
		else if(rx_data == '\e'){
 8000ea0:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <HAL_UART_RxCpltCallback+0xe8>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b1b      	cmp	r3, #27
 8000ea6:	d11b      	bne.n	8000ee0 <HAL_UART_RxCpltCallback+0xa4>
		 for(i = 0; i< FIFO_LEN; i++) {// Limpa o array
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	e007      	b.n	8000ebe <HAL_UART_RxCpltCallback+0x82>
			  rx_buffer[i] = 0;
 8000eae:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <HAL_UART_RxCpltCallback+0xf0>)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
		 for(i = 0; i< FIFO_LEN; i++) {// Limpa o array
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ec4:	d3f3      	bcc.n	8000eae <HAL_UART_RxCpltCallback+0x72>
		  w_rx_bindex = 0;
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <HAL_UART_RxCpltCallback+0xec>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	801a      	strh	r2, [r3, #0]
		  r_rx_bindex = 0;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <HAL_UART_RxCpltCallback+0xfc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	801a      	strh	r2, [r3, #0]
		  _push_message("ESC\rALL CLEAR\r\r>");
 8000ed2:	481a      	ldr	r0, [pc, #104]	; (8000f3c <HAL_UART_RxCpltCallback+0x100>)
 8000ed4:	f7ff feb0 	bl	8000c38 <_push_message>
		  tx_flag = TRUE; // EXSTE ALGO PARA TRANSMITIR
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_UART_RxCpltCallback+0x104>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
}
 8000ede:	e01b      	b.n	8000f18 <HAL_UART_RxCpltCallback+0xdc>
		else if(rx_data == '\b'){
 8000ee0:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <HAL_UART_RxCpltCallback+0xe8>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b08      	cmp	r3, #8
 8000ee6:	d117      	bne.n	8000f18 <HAL_UART_RxCpltCallback+0xdc>
			w_rx_bindex-=2;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <HAL_UART_RxCpltCallback+0xec>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <HAL_UART_RxCpltCallback+0xec>)
 8000ef4:	801a      	strh	r2, [r3, #0]
			rx_buffer[w_rx_bindex&(FIFO_LEN-1)] = 0;
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <HAL_UART_RxCpltCallback+0xec>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f00:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_UART_RxCpltCallback+0xf0>)
 8000f02:	2100      	movs	r1, #0
 8000f04:	54d1      	strb	r1, [r2, r3]
			rx_buffer[(w_rx_bindex+1)&(FIFO_LEN-1)] = 0;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_UART_RxCpltCallback+0xec>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f12:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <HAL_UART_RxCpltCallback+0xf0>)
 8000f14:	2100      	movs	r1, #0
 8000f16:	54d1      	strb	r1, [r2, r3]
}
 8000f18:	bf00      	nop
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200005b0 	.word	0x200005b0
 8000f24:	20000091 	.word	0x20000091
 8000f28:	20000496 	.word	0x20000496
 8000f2c:	20000094 	.word	0x20000094
 8000f30:	20000093 	.word	0x20000093
 8000f34:	20000090 	.word	0x20000090
 8000f38:	2000049a 	.word	0x2000049a
 8000f3c:	08007278 	.word	0x08007278
 8000f40:	20000495 	.word	0x20000495

08000f44 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

	if(huart == &huart3){
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <HAL_UART_TxCpltCallback+0x54>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d11c      	bne.n	8000f8e <HAL_UART_TxCpltCallback+0x4a>

		if((w_tx_bindex-r_tx_bindex) != 0)
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_UART_TxCpltCallback+0x58>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <HAL_UART_TxCpltCallback+0x5c>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d014      	beq.n	8000f8e <HAL_UART_TxCpltCallback+0x4a>
		{
			tx_data = tx_buffer[r_tx_bindex&(FIFO_LEN-1)];
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_UART_TxCpltCallback+0x5c>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f6e:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <HAL_UART_TxCpltCallback+0x60>)
 8000f70:	5cd2      	ldrb	r2, [r2, r3]
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <HAL_UART_TxCpltCallback+0x64>)
 8000f74:	701a      	strb	r2, [r3, #0]
			r_tx_bindex++;
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_UART_TxCpltCallback+0x5c>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <HAL_UART_TxCpltCallback+0x5c>)
 8000f82:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart3, (uint8_t *)&tx_data,1);
 8000f84:	2201      	movs	r2, #1
 8000f86:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <HAL_UART_TxCpltCallback+0x64>)
 8000f88:	4803      	ldr	r0, [pc, #12]	; (8000f98 <HAL_UART_TxCpltCallback+0x54>)
 8000f8a:	f003 fc0d 	bl	80047a8 <HAL_UART_Transmit_IT>

		}
	}
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200005b0 	.word	0x200005b0
 8000f9c:	2000049c 	.word	0x2000049c
 8000fa0:	20000498 	.word	0x20000498
 8000fa4:	20000294 	.word	0x20000294
 8000fa8:	20000092 	.word	0x20000092

08000fac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return 1;
 8000fb0:	2301      	movs	r3, #1
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <_kill>:

int _kill(int pid, int sig)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fc6:	f004 ff3f 	bl	8005e48 <__errno>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2216      	movs	r2, #22
 8000fce:	601a      	str	r2, [r3, #0]
  return -1;
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <_exit>:

void _exit (int status)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ffe7 	bl	8000fbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fee:	e7fe      	b.n	8000fee <_exit+0x12>

08000ff0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	e00a      	b.n	8001018 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001002:	f7ff fb31 	bl	8000668 <__io_getchar>
 8001006:	4601      	mov	r1, r0
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60ba      	str	r2, [r7, #8]
 800100e:	b2ca      	uxtb	r2, r1
 8001010:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbf0      	blt.n	8001002 <_read+0x12>
  }

  return len;
 8001020:	687b      	ldr	r3, [r7, #4]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	e009      	b.n	8001050 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	60ba      	str	r2, [r7, #8]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fafd 	bl	8000644 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3301      	adds	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	dbf1      	blt.n	800103c <_write+0x12>
  }
  return len;
 8001058:	687b      	ldr	r3, [r7, #4]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <_close>:

int _close(int file)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800108a:	605a      	str	r2, [r3, #4]
  return 0;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <_isatty>:

int _isatty(int file)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d4:	4a14      	ldr	r2, [pc, #80]	; (8001128 <_sbrk+0x5c>)
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <_sbrk+0x60>)
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <_sbrk+0x64>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <_sbrk+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d207      	bcs.n	800110c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010fc:	f004 fea4 	bl	8005e48 <__errno>
 8001100:	4603      	mov	r3, r0
 8001102:	220c      	movs	r2, #12
 8001104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e009      	b.n	8001120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	4a05      	ldr	r2, [pc, #20]	; (8001130 <_sbrk+0x64>)
 800111c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20080000 	.word	0x20080000
 800112c:	00000400 	.word	0x00000400
 8001130:	200004c8 	.word	0x200004c8
 8001134:	20000650 	.word	0x20000650

08001138 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <SystemInit+0x20>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <SystemInit+0x20>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <MX_TIM1_Init+0xa0>)
 800117c:	4a20      	ldr	r2, [pc, #128]	; (8001200 <MX_TIM1_Init+0xa4>)
 800117e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20000;
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <MX_TIM1_Init+0xa0>)
 8001182:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001186:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <MX_TIM1_Init+0xa0>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_TIM1_Init+0xa0>)
 8001190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001194:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_TIM1_Init+0xa0>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <MX_TIM1_Init+0xa0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_TIM1_Init+0xa0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011a8:	4814      	ldr	r0, [pc, #80]	; (80011fc <MX_TIM1_Init+0xa0>)
 80011aa:	f001 ff9b 	bl	80030e4 <HAL_TIM_Base_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80011b4:	f7ff fb2a 	bl	800080c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	4619      	mov	r1, r3
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <MX_TIM1_Init+0xa0>)
 80011c6:	f002 fbf3 	bl	80039b0 <HAL_TIM_ConfigClockSource>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80011d0:	f7ff fb1c 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011d4:	2320      	movs	r3, #32
 80011d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_TIM1_Init+0xa0>)
 80011e6:	f003 f89d 	bl	8004324 <HAL_TIMEx_MasterConfigSynchronization>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80011f0:	f7ff fb0c 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200004cc 	.word	0x200004cc
 8001200:	40010000 	.word	0x40010000

08001204 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001222:	4b1e      	ldr	r3, [pc, #120]	; (800129c <MX_TIM2_Init+0x98>)
 8001224:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001228:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3374;
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <MX_TIM2_Init+0x98>)
 800122c:	f640 522e 	movw	r2, #3374	; 0xd2e
 8001230:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_TIM2_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8001238:	4b18      	ldr	r3, [pc, #96]	; (800129c <MX_TIM2_Init+0x98>)
 800123a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800123e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_TIM2_Init+0x98>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <MX_TIM2_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800124c:	4813      	ldr	r0, [pc, #76]	; (800129c <MX_TIM2_Init+0x98>)
 800124e:	f001 ff49 	bl	80030e4 <HAL_TIM_Base_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001258:	f7ff fad8 	bl	800080c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001260:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	4619      	mov	r1, r3
 8001268:	480c      	ldr	r0, [pc, #48]	; (800129c <MX_TIM2_Init+0x98>)
 800126a:	f002 fba1 	bl	80039b0 <HAL_TIM_ConfigClockSource>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001274:	f7ff faca 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_TIM2_Init+0x98>)
 8001286:	f003 f84d 	bl	8004324 <HAL_TIMEx_MasterConfigSynchronization>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001290:	f7ff fabc 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	3720      	adds	r7, #32
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000518 	.word	0x20000518

080012a0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08e      	sub	sp, #56	; 0x38
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c0:	463b      	mov	r3, r7
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]
 80012ce:	615a      	str	r2, [r3, #20]
 80012d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012d2:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <MX_TIM4_Init+0xe8>)
 80012d4:	4a2d      	ldr	r2, [pc, #180]	; (800138c <MX_TIM4_Init+0xec>)
 80012d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012d8:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <MX_TIM4_Init+0xe8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012de:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <MX_TIM4_Init+0xe8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 80012e4:	4b28      	ldr	r3, [pc, #160]	; (8001388 <MX_TIM4_Init+0xe8>)
 80012e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80012ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b26      	ldr	r3, [pc, #152]	; (8001388 <MX_TIM4_Init+0xe8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f2:	4b25      	ldr	r3, [pc, #148]	; (8001388 <MX_TIM4_Init+0xe8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012f8:	4823      	ldr	r0, [pc, #140]	; (8001388 <MX_TIM4_Init+0xe8>)
 80012fa:	f001 fef3 	bl	80030e4 <HAL_TIM_Base_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001304:	f7ff fa82 	bl	800080c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800130e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001312:	4619      	mov	r1, r3
 8001314:	481c      	ldr	r0, [pc, #112]	; (8001388 <MX_TIM4_Init+0xe8>)
 8001316:	f002 fb4b 	bl	80039b0 <HAL_TIM_ConfigClockSource>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001320:	f7ff fa74 	bl	800080c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001324:	4818      	ldr	r0, [pc, #96]	; (8001388 <MX_TIM4_Init+0xe8>)
 8001326:	f001 ff34 	bl	8003192 <HAL_TIM_PWM_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001330:	f7ff fa6c 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	4811      	ldr	r0, [pc, #68]	; (8001388 <MX_TIM4_Init+0xe8>)
 8001344:	f002 ffee 	bl	8004324 <HAL_TIMEx_MasterConfigSynchronization>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800134e:	f7ff fa5d 	bl	800080c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001352:	2360      	movs	r3, #96	; 0x60
 8001354:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2500;
 8001356:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800135a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001364:	463b      	mov	r3, r7
 8001366:	2204      	movs	r2, #4
 8001368:	4619      	mov	r1, r3
 800136a:	4807      	ldr	r0, [pc, #28]	; (8001388 <MX_TIM4_Init+0xe8>)
 800136c:	f002 fa0c 	bl	8003788 <HAL_TIM_PWM_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8001376:	f7ff fa49 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800137a:	4803      	ldr	r0, [pc, #12]	; (8001388 <MX_TIM4_Init+0xe8>)
 800137c:	f000 f854 	bl	8001428 <HAL_TIM_MspPostInit>

}
 8001380:	bf00      	nop
 8001382:	3738      	adds	r7, #56	; 0x38
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000564 	.word	0x20000564
 800138c:	40000800 	.word	0x40000800

08001390 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a1f      	ldr	r2, [pc, #124]	; (800141c <HAL_TIM_Base_MspInit+0x8c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d10c      	bne.n	80013bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <HAL_TIM_Base_MspInit+0x90>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <HAL_TIM_Base_MspInit+0x90>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <HAL_TIM_Base_MspInit+0x90>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80013ba:	e02a      	b.n	8001412 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c4:	d114      	bne.n	80013f0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013c6:	4b16      	ldr	r3, [pc, #88]	; (8001420 <HAL_TIM_Base_MspInit+0x90>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a15      	ldr	r2, [pc, #84]	; (8001420 <HAL_TIM_Base_MspInit+0x90>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <HAL_TIM_Base_MspInit+0x90>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	201c      	movs	r0, #28
 80013e4:	f000 fabd 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013e8:	201c      	movs	r0, #28
 80013ea:	f000 fad6 	bl	800199a <HAL_NVIC_EnableIRQ>
}
 80013ee:	e010      	b.n	8001412 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM4)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <HAL_TIM_Base_MspInit+0x94>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d10b      	bne.n	8001412 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_TIM_Base_MspInit+0x90>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_TIM_Base_MspInit+0x90>)
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_TIM_Base_MspInit+0x90>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40010000 	.word	0x40010000
 8001420:	40023800 	.word	0x40023800
 8001424:	40000800 	.word	0x40000800

08001428 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_TIM_MspPostInit+0x64>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d11c      	bne.n	8001484 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_TIM_MspPostInit+0x68>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a10      	ldr	r2, [pc, #64]	; (8001490 <HAL_TIM_MspPostInit+0x68>)
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_TIM_MspPostInit+0x68>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001462:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001466:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001474:	2302      	movs	r3, #2
 8001476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	4619      	mov	r1, r3
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <HAL_TIM_MspPostInit+0x6c>)
 8001480:	f000 fb38 	bl	8001af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001484:	bf00      	nop
 8001486:	3720      	adds	r7, #32
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40000800 	.word	0x40000800
 8001490:	40023800 	.word	0x40023800
 8001494:	40020c00 	.word	0x40020c00

08001498 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 800149e:	4a15      	ldr	r2, [pc, #84]	; (80014f4 <MX_USART3_UART_Init+0x5c>)
 80014a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 80014a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 80014be:	220c      	movs	r2, #12
 80014c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014da:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_USART3_UART_Init+0x58>)
 80014dc:	f002 ffce 	bl	800447c <HAL_UART_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80014e6:	f7ff f991 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200005b0 	.word	0x200005b0
 80014f4:	40004800 	.word	0x40004800

080014f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b0b4      	sub	sp, #208	; 0xd0
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001510:	f107 0318 	add.w	r3, r7, #24
 8001514:	2290      	movs	r2, #144	; 0x90
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f004 fcc7 	bl	8005eac <memset>
  if(uartHandle->Instance==USART3)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a58      	ldr	r2, [pc, #352]	; (8001684 <HAL_UART_MspInit+0x18c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	f040 80a8 	bne.w	800167a <HAL_UART_MspInit+0x182>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800152a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800152e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001530:	2300      	movs	r3, #0
 8001532:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001534:	f107 0318 	add.w	r3, r7, #24
 8001538:	4618      	mov	r0, r3
 800153a:	f001 f9ab 	bl	8002894 <HAL_RCCEx_PeriphCLKConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001544:	f7ff f962 	bl	800080c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001548:	4b4f      	ldr	r3, [pc, #316]	; (8001688 <HAL_UART_MspInit+0x190>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	4a4e      	ldr	r2, [pc, #312]	; (8001688 <HAL_UART_MspInit+0x190>)
 800154e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001552:	6413      	str	r3, [r2, #64]	; 0x40
 8001554:	4b4c      	ldr	r3, [pc, #304]	; (8001688 <HAL_UART_MspInit+0x190>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001560:	4b49      	ldr	r3, [pc, #292]	; (8001688 <HAL_UART_MspInit+0x190>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001564:	4a48      	ldr	r2, [pc, #288]	; (8001688 <HAL_UART_MspInit+0x190>)
 8001566:	f043 0308 	orr.w	r3, r3, #8
 800156a:	6313      	str	r3, [r2, #48]	; 0x30
 800156c:	4b46      	ldr	r3, [pc, #280]	; (8001688 <HAL_UART_MspInit+0x190>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	693b      	ldr	r3, [r7, #16]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001578:	f44f 7340 	mov.w	r3, #768	; 0x300
 800157c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158c:	2303      	movs	r3, #3
 800158e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001592:	2307      	movs	r3, #7
 8001594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001598:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800159c:	4619      	mov	r1, r3
 800159e:	483b      	ldr	r0, [pc, #236]	; (800168c <HAL_UART_MspInit+0x194>)
 80015a0:	f000 faa8 	bl	8001af4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	2027      	movs	r0, #39	; 0x27
 80015aa:	f000 f9da 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015ae:	2027      	movs	r0, #39	; 0x27
 80015b0:	f000 f9f3 	bl	800199a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

    uint32_t *ptr_RCC_RCC_APB1ENR = RCC_base + 0x40;
 80015b4:	4b36      	ldr	r3, [pc, #216]	; (8001690 <HAL_UART_MspInit+0x198>)
 80015b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    uint32_t *ptr_RCC_RCC_DCKCFGR2 = RCC_base + 0x90;
 80015ba:	4b36      	ldr	r3, [pc, #216]	; (8001694 <HAL_UART_MspInit+0x19c>)
 80015bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    uint32_t *ptr_GPIOD_GPIOx_MODER = GPIOD_base + 0x0;
 80015c0:	4b32      	ldr	r3, [pc, #200]	; (800168c <HAL_UART_MspInit+0x194>)
 80015c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32_t *ptr_GPIOD_GPIOx_OSPEEDR = GPIOD_base + 0x08;
 80015c6:	4b34      	ldr	r3, [pc, #208]	; (8001698 <HAL_UART_MspInit+0x1a0>)
 80015c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    uint32_t *ptr_GPIOD_GPIOx_AFRH = GPIOD_base + 0x24;
 80015cc:	4b33      	ldr	r3, [pc, #204]	; (800169c <HAL_UART_MspInit+0x1a4>)
 80015ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

    *ptr_RCC_RCC_DCKCFGR2 |= (UART3SEL) << UART3SEL_pos;// configurar o clock da USART3
 80015d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f043 0210 	orr.w	r2, r3, #16
 80015dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80015e0:	601a      	str	r2, [r3, #0]

    *ptr_RCC_RCC_APB1ENR |= (RCC_USART3EN) << RCC_USART3EN_pos; //enable ao clock da USART3
 80015e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015f0:	601a      	str	r2, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f2:	4b25      	ldr	r3, [pc, #148]	; (8001688 <HAL_UART_MspInit+0x190>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a24      	ldr	r2, [pc, #144]	; (8001688 <HAL_UART_MspInit+0x190>)
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <HAL_UART_MspInit+0x190>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]

     *ptr_GPIOD_GPIOx_MODER |= (MODER9) << MODER9_pos; // TX & RX
 800160a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001614:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001618:	601a      	str	r2, [r3, #0]
     *ptr_GPIOD_GPIOx_MODER |= (MODER8) << MODER8_pos;
 800161a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001624:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001628:	601a      	str	r2, [r3, #0]

     *ptr_GPIOD_GPIOx_OSPEEDR |= (OSPEEDR9) << OSPEEDR9_pos;// Configurar speed
 800162a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 8001634:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001638:	601a      	str	r2, [r3, #0]
     *ptr_GPIOD_GPIOx_OSPEEDR |= (OSPEEDR8) << OSPEEDR8_pos;
 800163a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f443 3240 	orr.w	r2, r3, #196608	; 0x30000
 8001644:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001648:	601a      	str	r2, [r3, #0]

     *ptr_GPIOD_GPIOx_AFRH |= (AFR9) << AFR9_pos;   // configurar o alternate
 800164a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 8001654:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001658:	601a      	str	r2, [r3, #0]
     *ptr_GPIOD_GPIOx_AFRH |= (AFR8) << AFR8_pos;
 800165a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f043 0207 	orr.w	r2, r3, #7
 8001664:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001668:	601a      	str	r2, [r3, #0]

     HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	2027      	movs	r0, #39	; 0x27
 8001670:	f000 f977 	bl	8001962 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001674:	2027      	movs	r0, #39	; 0x27
 8001676:	f000 f990 	bl	800199a <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART3_MspInit 1 */
  }
}
 800167a:	bf00      	nop
 800167c:	37d0      	adds	r7, #208	; 0xd0
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40004800 	.word	0x40004800
 8001688:	40023800 	.word	0x40023800
 800168c:	40020c00 	.word	0x40020c00
 8001690:	40023840 	.word	0x40023840
 8001694:	40023890 	.word	0x40023890
 8001698:	40020c08 	.word	0x40020c08
 800169c:	40020c24 	.word	0x40020c24

080016a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016a4:	480d      	ldr	r0, [pc, #52]	; (80016dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016a6:	490e      	ldr	r1, [pc, #56]	; (80016e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016a8:	4a0e      	ldr	r2, [pc, #56]	; (80016e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ac:	e002      	b.n	80016b4 <LoopCopyDataInit>

080016ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b2:	3304      	adds	r3, #4

080016b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b8:	d3f9      	bcc.n	80016ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ba:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016bc:	4c0b      	ldr	r4, [pc, #44]	; (80016ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c0:	e001      	b.n	80016c6 <LoopFillZerobss>

080016c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c4:	3204      	adds	r2, #4

080016c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c8:	d3fb      	bcc.n	80016c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ca:	f7ff fd35 	bl	8001138 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ce:	f004 fbc1 	bl	8005e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016d2:	f7fe ffe7 	bl	80006a4 <main>
  bx  lr    
 80016d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016d8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80016dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80016e4:	08007500 	.word	0x08007500
  ldr r2, =_sbss
 80016e8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80016ec:	2000064c 	.word	0x2000064c

080016f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f0:	e7fe      	b.n	80016f0 <ADC_IRQHandler>

080016f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f6:	2003      	movs	r0, #3
 80016f8:	f000 f928 	bl	800194c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016fc:	2000      	movs	r0, #0
 80016fe:	f000 f805 	bl	800170c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001702:	f7ff fb39 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_InitTick+0x54>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_InitTick+0x58>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001722:	fbb3 f3f1 	udiv	r3, r3, r1
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f943 	bl	80019b6 <HAL_SYSTICK_Config>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e00e      	b.n	8001758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b0f      	cmp	r3, #15
 800173e:	d80a      	bhi.n	8001756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001740:	2200      	movs	r2, #0
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f000 f90b 	bl	8001962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800174c:	4a06      	ldr	r2, [pc, #24]	; (8001768 <HAL_InitTick+0x5c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	e000      	b.n	8001758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000004 	.word	0x20000004
 8001764:	2000000c 	.word	0x2000000c
 8001768:	20000008 	.word	0x20000008

0800176c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x20>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_IncTick+0x24>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4413      	add	r3, r2
 800177c:	4a04      	ldr	r2, [pc, #16]	; (8001790 <HAL_IncTick+0x24>)
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	2000000c 	.word	0x2000000c
 8001790:	20000638 	.word	0x20000638

08001794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return uwTick;
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <HAL_GetTick+0x14>)
 800179a:	681b      	ldr	r3, [r3, #0]
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000638 	.word	0x20000638

080017ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <__NVIC_SetPriorityGrouping+0x40>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c8:	4013      	ands	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	; (80017ec <__NVIC_SetPriorityGrouping+0x40>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00
 80017f0:	05fa0000 	.word	0x05fa0000

080017f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <__NVIC_GetPriorityGrouping+0x18>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f003 0307 	and.w	r3, r3, #7
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	2b00      	cmp	r3, #0
 8001820:	db0b      	blt.n	800183a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	4907      	ldr	r1, [pc, #28]	; (8001848 <__NVIC_EnableIRQ+0x38>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	2001      	movs	r0, #1
 8001832:	fa00 f202 	lsl.w	r2, r0, r2
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100

0800184c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0a      	blt.n	8001876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	490c      	ldr	r1, [pc, #48]	; (8001898 <__NVIC_SetPriority+0x4c>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001874:	e00a      	b.n	800188c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4908      	ldr	r1, [pc, #32]	; (800189c <__NVIC_SetPriority+0x50>)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	440b      	add	r3, r1
 800188a:	761a      	strb	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f1c3 0307 	rsb	r3, r3, #7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf28      	it	cs
 80018be:	2304      	movcs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3304      	adds	r3, #4
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d902      	bls.n	80018d0 <NVIC_EncodePriority+0x30>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3b03      	subs	r3, #3
 80018ce:	e000      	b.n	80018d2 <NVIC_EncodePriority+0x32>
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	4313      	orrs	r3, r2
         );
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001918:	d301      	bcc.n	800191e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191a:	2301      	movs	r3, #1
 800191c:	e00f      	b.n	800193e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <SysTick_Config+0x40>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001926:	210f      	movs	r1, #15
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f7ff ff8e 	bl	800184c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <SysTick_Config+0x40>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <SysTick_Config+0x40>)
 8001938:	2207      	movs	r2, #7
 800193a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e000e010 	.word	0xe000e010

0800194c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ff29 	bl	80017ac <__NVIC_SetPriorityGrouping>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001974:	f7ff ff3e 	bl	80017f4 <__NVIC_GetPriorityGrouping>
 8001978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	f7ff ff8e 	bl	80018a0 <NVIC_EncodePriority>
 8001984:	4602      	mov	r2, r0
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff5d 	bl	800184c <__NVIC_SetPriority>
}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff31 	bl	8001810 <__NVIC_EnableIRQ>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ffa2 	bl	8001908 <SysTick_Config>
 80019c4:	4603      	mov	r3, r0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff feda 	bl	8001794 <HAL_GetTick>
 80019e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d008      	beq.n	8001a00 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e052      	b.n	8001aa6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0216 	bic.w	r2, r2, #22
 8001a0e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a1e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d103      	bne.n	8001a30 <HAL_DMA_Abort+0x62>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d007      	beq.n	8001a40 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0208 	bic.w	r2, r2, #8
 8001a3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0201 	bic.w	r2, r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a50:	e013      	b.n	8001a7a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a52:	f7ff fe9f 	bl	8001794 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	d90c      	bls.n	8001a7a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2220      	movs	r2, #32
 8001a64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2203      	movs	r2, #3
 8001a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e015      	b.n	8001aa6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1e4      	bne.n	8001a52 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8c:	223f      	movs	r2, #63	; 0x3f
 8001a8e:	409a      	lsls	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d004      	beq.n	8001acc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2280      	movs	r2, #128	; 0x80
 8001ac6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e00c      	b.n	8001ae6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2205      	movs	r2, #5
 8001ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0201 	bic.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	e175      	b.n	8001e00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b14:	2201      	movs	r2, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	f040 8164 	bne.w	8001dfa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d005      	beq.n	8001b4a <HAL_GPIO_Init+0x56>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d130      	bne.n	8001bac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	2203      	movs	r2, #3
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b80:	2201      	movs	r2, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	f003 0201 	and.w	r2, r3, #1
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d017      	beq.n	8001be8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d123      	bne.n	8001c3c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	08da      	lsrs	r2, r3, #3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3208      	adds	r2, #8
 8001bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	220f      	movs	r2, #15
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	08da      	lsrs	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3208      	adds	r2, #8
 8001c36:	69b9      	ldr	r1, [r7, #24]
 8001c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	2203      	movs	r2, #3
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0203 	and.w	r2, r3, #3
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 80be 	beq.w	8001dfa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	4b66      	ldr	r3, [pc, #408]	; (8001e18 <HAL_GPIO_Init+0x324>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	4a65      	ldr	r2, [pc, #404]	; (8001e18 <HAL_GPIO_Init+0x324>)
 8001c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c88:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8a:	4b63      	ldr	r3, [pc, #396]	; (8001e18 <HAL_GPIO_Init+0x324>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c96:	4a61      	ldr	r2, [pc, #388]	; (8001e1c <HAL_GPIO_Init+0x328>)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	089b      	lsrs	r3, r3, #2
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	220f      	movs	r2, #15
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a58      	ldr	r2, [pc, #352]	; (8001e20 <HAL_GPIO_Init+0x32c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d037      	beq.n	8001d32 <HAL_GPIO_Init+0x23e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a57      	ldr	r2, [pc, #348]	; (8001e24 <HAL_GPIO_Init+0x330>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d031      	beq.n	8001d2e <HAL_GPIO_Init+0x23a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a56      	ldr	r2, [pc, #344]	; (8001e28 <HAL_GPIO_Init+0x334>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d02b      	beq.n	8001d2a <HAL_GPIO_Init+0x236>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a55      	ldr	r2, [pc, #340]	; (8001e2c <HAL_GPIO_Init+0x338>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d025      	beq.n	8001d26 <HAL_GPIO_Init+0x232>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a54      	ldr	r2, [pc, #336]	; (8001e30 <HAL_GPIO_Init+0x33c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d01f      	beq.n	8001d22 <HAL_GPIO_Init+0x22e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a53      	ldr	r2, [pc, #332]	; (8001e34 <HAL_GPIO_Init+0x340>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d019      	beq.n	8001d1e <HAL_GPIO_Init+0x22a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a52      	ldr	r2, [pc, #328]	; (8001e38 <HAL_GPIO_Init+0x344>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d013      	beq.n	8001d1a <HAL_GPIO_Init+0x226>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a51      	ldr	r2, [pc, #324]	; (8001e3c <HAL_GPIO_Init+0x348>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00d      	beq.n	8001d16 <HAL_GPIO_Init+0x222>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a50      	ldr	r2, [pc, #320]	; (8001e40 <HAL_GPIO_Init+0x34c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d007      	beq.n	8001d12 <HAL_GPIO_Init+0x21e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4f      	ldr	r2, [pc, #316]	; (8001e44 <HAL_GPIO_Init+0x350>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d101      	bne.n	8001d0e <HAL_GPIO_Init+0x21a>
 8001d0a:	2309      	movs	r3, #9
 8001d0c:	e012      	b.n	8001d34 <HAL_GPIO_Init+0x240>
 8001d0e:	230a      	movs	r3, #10
 8001d10:	e010      	b.n	8001d34 <HAL_GPIO_Init+0x240>
 8001d12:	2308      	movs	r3, #8
 8001d14:	e00e      	b.n	8001d34 <HAL_GPIO_Init+0x240>
 8001d16:	2307      	movs	r3, #7
 8001d18:	e00c      	b.n	8001d34 <HAL_GPIO_Init+0x240>
 8001d1a:	2306      	movs	r3, #6
 8001d1c:	e00a      	b.n	8001d34 <HAL_GPIO_Init+0x240>
 8001d1e:	2305      	movs	r3, #5
 8001d20:	e008      	b.n	8001d34 <HAL_GPIO_Init+0x240>
 8001d22:	2304      	movs	r3, #4
 8001d24:	e006      	b.n	8001d34 <HAL_GPIO_Init+0x240>
 8001d26:	2303      	movs	r3, #3
 8001d28:	e004      	b.n	8001d34 <HAL_GPIO_Init+0x240>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e002      	b.n	8001d34 <HAL_GPIO_Init+0x240>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_GPIO_Init+0x240>
 8001d32:	2300      	movs	r3, #0
 8001d34:	69fa      	ldr	r2, [r7, #28]
 8001d36:	f002 0203 	and.w	r2, r2, #3
 8001d3a:	0092      	lsls	r2, r2, #2
 8001d3c:	4093      	lsls	r3, r2
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d44:	4935      	ldr	r1, [pc, #212]	; (8001e1c <HAL_GPIO_Init+0x328>)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	089b      	lsrs	r3, r3, #2
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d52:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <HAL_GPIO_Init+0x354>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d76:	4a34      	ldr	r2, [pc, #208]	; (8001e48 <HAL_GPIO_Init+0x354>)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d7c:	4b32      	ldr	r3, [pc, #200]	; (8001e48 <HAL_GPIO_Init+0x354>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001da0:	4a29      	ldr	r2, [pc, #164]	; (8001e48 <HAL_GPIO_Init+0x354>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001da6:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <HAL_GPIO_Init+0x354>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dca:	4a1f      	ldr	r2, [pc, #124]	; (8001e48 <HAL_GPIO_Init+0x354>)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <HAL_GPIO_Init+0x354>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001df4:	4a14      	ldr	r2, [pc, #80]	; (8001e48 <HAL_GPIO_Init+0x354>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	61fb      	str	r3, [r7, #28]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	2b0f      	cmp	r3, #15
 8001e04:	f67f ae86 	bls.w	8001b14 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3724      	adds	r7, #36	; 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40013800 	.word	0x40013800
 8001e20:	40020000 	.word	0x40020000
 8001e24:	40020400 	.word	0x40020400
 8001e28:	40020800 	.word	0x40020800
 8001e2c:	40020c00 	.word	0x40020c00
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40021400 	.word	0x40021400
 8001e38:	40021800 	.word	0x40021800
 8001e3c:	40021c00 	.word	0x40021c00
 8001e40:	40022000 	.word	0x40022000
 8001e44:	40022400 	.word	0x40022400
 8001e48:	40013c00 	.word	0x40013c00

08001e4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a22      	ldr	r2, [pc, #136]	; (8001ee4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1d      	ldr	r2, [pc, #116]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e78:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e7a:	f7ff fc8b 	bl	8001794 <HAL_GetTick>
 8001e7e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e80:	e009      	b.n	8001e96 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e82:	f7ff fc87 	bl	8001794 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e90:	d901      	bls.n	8001e96 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e022      	b.n	8001edc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea2:	d1ee      	bne.n	8001e82 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eb0:	f7ff fc70 	bl	8001794 <HAL_GetTick>
 8001eb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eb6:	e009      	b.n	8001ecc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001eb8:	f7ff fc6c 	bl	8001794 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ec6:	d901      	bls.n	8001ecc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e007      	b.n	8001edc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ed8:	d1ee      	bne.n	8001eb8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40007000 	.word	0x40007000

08001eec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e29b      	b.n	800243a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 8087 	beq.w	800201e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f10:	4b96      	ldr	r3, [pc, #600]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d00c      	beq.n	8001f36 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f1c:	4b93      	ldr	r3, [pc, #588]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d112      	bne.n	8001f4e <HAL_RCC_OscConfig+0x62>
 8001f28:	4b90      	ldr	r3, [pc, #576]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f34:	d10b      	bne.n	8001f4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f36:	4b8d      	ldr	r3, [pc, #564]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d06c      	beq.n	800201c <HAL_RCC_OscConfig+0x130>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d168      	bne.n	800201c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e275      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f56:	d106      	bne.n	8001f66 <HAL_RCC_OscConfig+0x7a>
 8001f58:	4b84      	ldr	r3, [pc, #528]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a83      	ldr	r2, [pc, #524]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	e02e      	b.n	8001fc4 <HAL_RCC_OscConfig+0xd8>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x9c>
 8001f6e:	4b7f      	ldr	r3, [pc, #508]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a7e      	ldr	r2, [pc, #504]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	4b7c      	ldr	r3, [pc, #496]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a7b      	ldr	r2, [pc, #492]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e01d      	b.n	8001fc4 <HAL_RCC_OscConfig+0xd8>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f90:	d10c      	bne.n	8001fac <HAL_RCC_OscConfig+0xc0>
 8001f92:	4b76      	ldr	r3, [pc, #472]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a75      	ldr	r2, [pc, #468]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	4b73      	ldr	r3, [pc, #460]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a72      	ldr	r2, [pc, #456]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e00b      	b.n	8001fc4 <HAL_RCC_OscConfig+0xd8>
 8001fac:	4b6f      	ldr	r3, [pc, #444]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a6e      	ldr	r2, [pc, #440]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b6c      	ldr	r3, [pc, #432]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a6b      	ldr	r2, [pc, #428]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d013      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7ff fbe2 	bl	8001794 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd4:	f7ff fbde 	bl	8001794 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	; 0x64
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e229      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	4b61      	ldr	r3, [pc, #388]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0xe8>
 8001ff2:	e014      	b.n	800201e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7ff fbce 	bl	8001794 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ffc:	f7ff fbca 	bl	8001794 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	; 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e215      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200e:	4b57      	ldr	r3, [pc, #348]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x110>
 800201a:	e000      	b.n	800201e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d069      	beq.n	80020fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800202a:	4b50      	ldr	r3, [pc, #320]	; (800216c <HAL_RCC_OscConfig+0x280>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002036:	4b4d      	ldr	r3, [pc, #308]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b08      	cmp	r3, #8
 8002040:	d11c      	bne.n	800207c <HAL_RCC_OscConfig+0x190>
 8002042:	4b4a      	ldr	r3, [pc, #296]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d116      	bne.n	800207c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204e:	4b47      	ldr	r3, [pc, #284]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <HAL_RCC_OscConfig+0x17a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d001      	beq.n	8002066 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e1e9      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002066:	4b41      	ldr	r3, [pc, #260]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	493d      	ldr	r1, [pc, #244]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207a:	e040      	b.n	80020fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d023      	beq.n	80020cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002084:	4b39      	ldr	r3, [pc, #228]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a38      	ldr	r2, [pc, #224]	; (800216c <HAL_RCC_OscConfig+0x280>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7ff fb80 	bl	8001794 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002098:	f7ff fb7c 	bl	8001794 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e1c7      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b30      	ldr	r3, [pc, #192]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b6:	4b2d      	ldr	r3, [pc, #180]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4929      	ldr	r1, [pc, #164]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
 80020ca:	e018      	b.n	80020fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020cc:	4b27      	ldr	r3, [pc, #156]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a26      	ldr	r2, [pc, #152]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7ff fb5c 	bl	8001794 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e0:	f7ff fb58 	bl	8001794 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e1a3      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f2:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_RCC_OscConfig+0x280>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d038      	beq.n	800217c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d019      	beq.n	8002146 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002112:	4b16      	ldr	r3, [pc, #88]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002116:	4a15      	ldr	r2, [pc, #84]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211e:	f7ff fb39 	bl	8001794 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002126:	f7ff fb35 	bl	8001794 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e180      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <HAL_RCC_OscConfig+0x280>)
 800213a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x23a>
 8002144:	e01a      	b.n	800217c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <HAL_RCC_OscConfig+0x280>)
 8002148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800214a:	4a08      	ldr	r2, [pc, #32]	; (800216c <HAL_RCC_OscConfig+0x280>)
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002152:	f7ff fb1f 	bl	8001794 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215a:	f7ff fb1b 	bl	8001794 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d903      	bls.n	8002170 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e166      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
 800216c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002170:	4b92      	ldr	r3, [pc, #584]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1ee      	bne.n	800215a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80a4 	beq.w	80022d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218a:	4b8c      	ldr	r3, [pc, #560]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10d      	bne.n	80021b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	4b89      	ldr	r3, [pc, #548]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a88      	ldr	r2, [pc, #544]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b86      	ldr	r3, [pc, #536]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ae:	2301      	movs	r3, #1
 80021b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b2:	4b83      	ldr	r3, [pc, #524]	; (80023c0 <HAL_RCC_OscConfig+0x4d4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d118      	bne.n	80021f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021be:	4b80      	ldr	r3, [pc, #512]	; (80023c0 <HAL_RCC_OscConfig+0x4d4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a7f      	ldr	r2, [pc, #508]	; (80023c0 <HAL_RCC_OscConfig+0x4d4>)
 80021c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ca:	f7ff fae3 	bl	8001794 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d2:	f7ff fadf 	bl	8001794 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b64      	cmp	r3, #100	; 0x64
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e12a      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e4:	4b76      	ldr	r3, [pc, #472]	; (80023c0 <HAL_RCC_OscConfig+0x4d4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x31a>
 80021f8:	4b70      	ldr	r3, [pc, #448]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	4a6f      	ldr	r2, [pc, #444]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6713      	str	r3, [r2, #112]	; 0x70
 8002204:	e02d      	b.n	8002262 <HAL_RCC_OscConfig+0x376>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x33c>
 800220e:	4b6b      	ldr	r3, [pc, #428]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	4a6a      	ldr	r2, [pc, #424]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6713      	str	r3, [r2, #112]	; 0x70
 800221a:	4b68      	ldr	r3, [pc, #416]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	4a67      	ldr	r2, [pc, #412]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6713      	str	r3, [r2, #112]	; 0x70
 8002226:	e01c      	b.n	8002262 <HAL_RCC_OscConfig+0x376>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d10c      	bne.n	800224a <HAL_RCC_OscConfig+0x35e>
 8002230:	4b62      	ldr	r3, [pc, #392]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	4a61      	ldr	r2, [pc, #388]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002236:	f043 0304 	orr.w	r3, r3, #4
 800223a:	6713      	str	r3, [r2, #112]	; 0x70
 800223c:	4b5f      	ldr	r3, [pc, #380]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	4a5e      	ldr	r2, [pc, #376]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6713      	str	r3, [r2, #112]	; 0x70
 8002248:	e00b      	b.n	8002262 <HAL_RCC_OscConfig+0x376>
 800224a:	4b5c      	ldr	r3, [pc, #368]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	4a5b      	ldr	r2, [pc, #364]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	6713      	str	r3, [r2, #112]	; 0x70
 8002256:	4b59      	ldr	r3, [pc, #356]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225a:	4a58      	ldr	r2, [pc, #352]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d015      	beq.n	8002296 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226a:	f7ff fa93 	bl	8001794 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7ff fa8f 	bl	8001794 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e0d8      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002288:	4b4c      	ldr	r3, [pc, #304]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ee      	beq.n	8002272 <HAL_RCC_OscConfig+0x386>
 8002294:	e014      	b.n	80022c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002296:	f7ff fa7d 	bl	8001794 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7ff fa79 	bl	8001794 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e0c2      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b4:	4b41      	ldr	r3, [pc, #260]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1ee      	bne.n	800229e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022c0:	7dfb      	ldrb	r3, [r7, #23]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d105      	bne.n	80022d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c6:	4b3d      	ldr	r3, [pc, #244]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	4a3c      	ldr	r2, [pc, #240]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 80ae 	beq.w	8002438 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022dc:	4b37      	ldr	r3, [pc, #220]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d06d      	beq.n	80023c4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d14b      	bne.n	8002388 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f0:	4b32      	ldr	r3, [pc, #200]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a31      	ldr	r2, [pc, #196]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80022f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7ff fa4a 	bl	8001794 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002304:	f7ff fa46 	bl	8001794 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e091      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002316:	4b29      	ldr	r3, [pc, #164]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	019b      	lsls	r3, r3, #6
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	085b      	lsrs	r3, r3, #1
 800233a:	3b01      	subs	r3, #1
 800233c:	041b      	lsls	r3, r3, #16
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	061b      	lsls	r3, r3, #24
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	071b      	lsls	r3, r3, #28
 800234e:	491b      	ldr	r1, [pc, #108]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a18      	ldr	r2, [pc, #96]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800235a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800235e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7ff fa18 	bl	8001794 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7ff fa14 	bl	8001794 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e05f      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x47c>
 8002386:	e057      	b.n	8002438 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 800238e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7ff f9fe 	bl	8001794 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239c:	f7ff f9fa 	bl	8001794 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e045      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ae:	4b03      	ldr	r3, [pc, #12]	; (80023bc <HAL_RCC_OscConfig+0x4d0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x4b0>
 80023ba:	e03d      	b.n	8002438 <HAL_RCC_OscConfig+0x54c>
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023c4:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <HAL_RCC_OscConfig+0x558>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d030      	beq.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023dc:	429a      	cmp	r2, r3
 80023de:	d129      	bne.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d122      	bne.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023f4:	4013      	ands	r3, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d119      	bne.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	085b      	lsrs	r3, r3, #1
 800240c:	3b01      	subs	r3, #1
 800240e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d10f      	bne.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d107      	bne.n	8002434 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800

08002448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0d0      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002460:	4b6a      	ldr	r3, [pc, #424]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d910      	bls.n	8002490 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b67      	ldr	r3, [pc, #412]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 020f 	bic.w	r2, r3, #15
 8002476:	4965      	ldr	r1, [pc, #404]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b63      	ldr	r3, [pc, #396]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0b8      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d020      	beq.n	80024de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a8:	4b59      	ldr	r3, [pc, #356]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a58      	ldr	r2, [pc, #352]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c0:	4b53      	ldr	r3, [pc, #332]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	4a52      	ldr	r2, [pc, #328]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024cc:	4b50      	ldr	r3, [pc, #320]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	494d      	ldr	r1, [pc, #308]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d040      	beq.n	800256c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d115      	bne.n	800252a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e07f      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d107      	bne.n	800251a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250a:	4b41      	ldr	r3, [pc, #260]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e073      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251a:	4b3d      	ldr	r3, [pc, #244]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e06b      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800252a:	4b39      	ldr	r3, [pc, #228]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f023 0203 	bic.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4936      	ldr	r1, [pc, #216]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 8002538:	4313      	orrs	r3, r2
 800253a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800253c:	f7ff f92a 	bl	8001794 <HAL_GetTick>
 8002540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	e00a      	b.n	800255a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002544:	f7ff f926 	bl	8001794 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e053      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255a:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 020c 	and.w	r2, r3, #12
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	429a      	cmp	r2, r3
 800256a:	d1eb      	bne.n	8002544 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d210      	bcs.n	800259c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b24      	ldr	r3, [pc, #144]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 020f 	bic.w	r2, r3, #15
 8002582:	4922      	ldr	r1, [pc, #136]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b20      	ldr	r3, [pc, #128]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e032      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4916      	ldr	r1, [pc, #88]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d009      	beq.n	80025da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	490e      	ldr	r1, [pc, #56]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025da:	f000 f821 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 80025de:	4602      	mov	r2, r0
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	490a      	ldr	r1, [pc, #40]	; (8002614 <HAL_RCC_ClockConfig+0x1cc>)
 80025ec:	5ccb      	ldrb	r3, [r1, r3]
 80025ee:	fa22 f303 	lsr.w	r3, r2, r3
 80025f2:	4a09      	ldr	r2, [pc, #36]	; (8002618 <HAL_RCC_ClockConfig+0x1d0>)
 80025f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <HAL_RCC_ClockConfig+0x1d4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f886 	bl	800170c <HAL_InitTick>

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023c00 	.word	0x40023c00
 8002610:	40023800 	.word	0x40023800
 8002614:	0800728c 	.word	0x0800728c
 8002618:	20000004 	.word	0x20000004
 800261c:	20000008 	.word	0x20000008

08002620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002624:	b094      	sub	sp, #80	; 0x50
 8002626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	647b      	str	r3, [r7, #68]	; 0x44
 800262c:	2300      	movs	r3, #0
 800262e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002630:	2300      	movs	r3, #0
 8002632:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002638:	4b79      	ldr	r3, [pc, #484]	; (8002820 <HAL_RCC_GetSysClockFreq+0x200>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b08      	cmp	r3, #8
 8002642:	d00d      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x40>
 8002644:	2b08      	cmp	r3, #8
 8002646:	f200 80e1 	bhi.w	800280c <HAL_RCC_GetSysClockFreq+0x1ec>
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x34>
 800264e:	2b04      	cmp	r3, #4
 8002650:	d003      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x3a>
 8002652:	e0db      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002654:	4b73      	ldr	r3, [pc, #460]	; (8002824 <HAL_RCC_GetSysClockFreq+0x204>)
 8002656:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002658:	e0db      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800265a:	4b73      	ldr	r3, [pc, #460]	; (8002828 <HAL_RCC_GetSysClockFreq+0x208>)
 800265c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800265e:	e0d8      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002660:	4b6f      	ldr	r3, [pc, #444]	; (8002820 <HAL_RCC_GetSysClockFreq+0x200>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002668:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800266a:	4b6d      	ldr	r3, [pc, #436]	; (8002820 <HAL_RCC_GetSysClockFreq+0x200>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d063      	beq.n	800273e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002676:	4b6a      	ldr	r3, [pc, #424]	; (8002820 <HAL_RCC_GetSysClockFreq+0x200>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	099b      	lsrs	r3, r3, #6
 800267c:	2200      	movs	r2, #0
 800267e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002680:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002688:	633b      	str	r3, [r7, #48]	; 0x30
 800268a:	2300      	movs	r3, #0
 800268c:	637b      	str	r3, [r7, #52]	; 0x34
 800268e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002692:	4622      	mov	r2, r4
 8002694:	462b      	mov	r3, r5
 8002696:	f04f 0000 	mov.w	r0, #0
 800269a:	f04f 0100 	mov.w	r1, #0
 800269e:	0159      	lsls	r1, r3, #5
 80026a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a4:	0150      	lsls	r0, r2, #5
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4621      	mov	r1, r4
 80026ac:	1a51      	subs	r1, r2, r1
 80026ae:	6139      	str	r1, [r7, #16]
 80026b0:	4629      	mov	r1, r5
 80026b2:	eb63 0301 	sbc.w	r3, r3, r1
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026c4:	4659      	mov	r1, fp
 80026c6:	018b      	lsls	r3, r1, #6
 80026c8:	4651      	mov	r1, sl
 80026ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ce:	4651      	mov	r1, sl
 80026d0:	018a      	lsls	r2, r1, #6
 80026d2:	4651      	mov	r1, sl
 80026d4:	ebb2 0801 	subs.w	r8, r2, r1
 80026d8:	4659      	mov	r1, fp
 80026da:	eb63 0901 	sbc.w	r9, r3, r1
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026f2:	4690      	mov	r8, r2
 80026f4:	4699      	mov	r9, r3
 80026f6:	4623      	mov	r3, r4
 80026f8:	eb18 0303 	adds.w	r3, r8, r3
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	462b      	mov	r3, r5
 8002700:	eb49 0303 	adc.w	r3, r9, r3
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002712:	4629      	mov	r1, r5
 8002714:	024b      	lsls	r3, r1, #9
 8002716:	4621      	mov	r1, r4
 8002718:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800271c:	4621      	mov	r1, r4
 800271e:	024a      	lsls	r2, r1, #9
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002726:	2200      	movs	r2, #0
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
 800272a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800272c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002730:	f7fd fdee 	bl	8000310 <__aeabi_uldivmod>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4613      	mov	r3, r2
 800273a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800273c:	e058      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273e:	4b38      	ldr	r3, [pc, #224]	; (8002820 <HAL_RCC_GetSysClockFreq+0x200>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	099b      	lsrs	r3, r3, #6
 8002744:	2200      	movs	r2, #0
 8002746:	4618      	mov	r0, r3
 8002748:	4611      	mov	r1, r2
 800274a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800274e:	623b      	str	r3, [r7, #32]
 8002750:	2300      	movs	r3, #0
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
 8002754:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002758:	4642      	mov	r2, r8
 800275a:	464b      	mov	r3, r9
 800275c:	f04f 0000 	mov.w	r0, #0
 8002760:	f04f 0100 	mov.w	r1, #0
 8002764:	0159      	lsls	r1, r3, #5
 8002766:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800276a:	0150      	lsls	r0, r2, #5
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4641      	mov	r1, r8
 8002772:	ebb2 0a01 	subs.w	sl, r2, r1
 8002776:	4649      	mov	r1, r9
 8002778:	eb63 0b01 	sbc.w	fp, r3, r1
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002788:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800278c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002790:	ebb2 040a 	subs.w	r4, r2, sl
 8002794:	eb63 050b 	sbc.w	r5, r3, fp
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	00eb      	lsls	r3, r5, #3
 80027a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027a6:	00e2      	lsls	r2, r4, #3
 80027a8:	4614      	mov	r4, r2
 80027aa:	461d      	mov	r5, r3
 80027ac:	4643      	mov	r3, r8
 80027ae:	18e3      	adds	r3, r4, r3
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	464b      	mov	r3, r9
 80027b4:	eb45 0303 	adc.w	r3, r5, r3
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027c6:	4629      	mov	r1, r5
 80027c8:	028b      	lsls	r3, r1, #10
 80027ca:	4621      	mov	r1, r4
 80027cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027d0:	4621      	mov	r1, r4
 80027d2:	028a      	lsls	r2, r1, #10
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027da:	2200      	movs	r2, #0
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	61fa      	str	r2, [r7, #28]
 80027e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027e4:	f7fd fd94 	bl	8000310 <__aeabi_uldivmod>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4613      	mov	r3, r2
 80027ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	0c1b      	lsrs	r3, r3, #16
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	3301      	adds	r3, #1
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002800:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800280a:	e002      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <HAL_RCC_GetSysClockFreq+0x204>)
 800280e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002814:	4618      	mov	r0, r3
 8002816:	3750      	adds	r7, #80	; 0x50
 8002818:	46bd      	mov	sp, r7
 800281a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	00f42400 	.word	0x00f42400
 8002828:	007a1200 	.word	0x007a1200

0800282c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <HAL_RCC_GetHCLKFreq+0x14>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000004 	.word	0x20000004

08002844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002848:	f7ff fff0 	bl	800282c <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	0a9b      	lsrs	r3, r3, #10
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	4903      	ldr	r1, [pc, #12]	; (8002868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	0800729c 	.word	0x0800729c

0800286c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002870:	f7ff ffdc 	bl	800282c <HAL_RCC_GetHCLKFreq>
 8002874:	4602      	mov	r2, r0
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	0b5b      	lsrs	r3, r3, #13
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	4903      	ldr	r1, [pc, #12]	; (8002890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002882:	5ccb      	ldrb	r3, [r1, r3]
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40023800 	.word	0x40023800
 8002890:	0800729c 	.word	0x0800729c

08002894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d012      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028bc:	4b69      	ldr	r3, [pc, #420]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	4a68      	ldr	r2, [pc, #416]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028c6:	6093      	str	r3, [r2, #8]
 80028c8:	4b66      	ldr	r3, [pc, #408]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d0:	4964      	ldr	r1, [pc, #400]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028de:	2301      	movs	r3, #1
 80028e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d017      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028ee:	4b5d      	ldr	r3, [pc, #372]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fc:	4959      	ldr	r1, [pc, #356]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800290c:	d101      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800290e:	2301      	movs	r3, #1
 8002910:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800291a:	2301      	movs	r3, #1
 800291c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d017      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800292a:	4b4e      	ldr	r3, [pc, #312]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002930:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	494a      	ldr	r1, [pc, #296]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002948:	d101      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800294a:	2301      	movs	r3, #1
 800294c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002956:	2301      	movs	r3, #1
 8002958:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002966:	2301      	movs	r3, #1
 8002968:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0320 	and.w	r3, r3, #32
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 808b 	beq.w	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002978:	4b3a      	ldr	r3, [pc, #232]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	4a39      	ldr	r2, [pc, #228]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002982:	6413      	str	r3, [r2, #64]	; 0x40
 8002984:	4b37      	ldr	r3, [pc, #220]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002990:	4b35      	ldr	r3, [pc, #212]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a34      	ldr	r2, [pc, #208]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800299c:	f7fe fefa 	bl	8001794 <HAL_GetTick>
 80029a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a4:	f7fe fef6 	bl	8001794 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e38f      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029b6:	4b2c      	ldr	r3, [pc, #176]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029c2:	4b28      	ldr	r3, [pc, #160]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d035      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d02e      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029e0:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029ea:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ee:	4a1d      	ldr	r2, [pc, #116]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029f6:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	4a1a      	ldr	r2, [pc, #104]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a02:	4a18      	ldr	r2, [pc, #96]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a08:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d114      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe febe 	bl	8001794 <HAL_GetTick>
 8002a18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a1c:	f7fe feba 	bl	8001794 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e351      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0ee      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a4a:	d111      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a58:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a5a:	400b      	ands	r3, r1
 8002a5c:	4901      	ldr	r1, [pc, #4]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]
 8002a62:	e00b      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40007000 	.word	0x40007000
 8002a6c:	0ffffcff 	.word	0x0ffffcff
 8002a70:	4bac      	ldr	r3, [pc, #688]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4aab      	ldr	r2, [pc, #684]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a7a:	6093      	str	r3, [r2, #8]
 8002a7c:	4ba9      	ldr	r3, [pc, #676]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a88:	49a6      	ldr	r1, [pc, #664]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d010      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a9a:	4ba2      	ldr	r3, [pc, #648]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aa0:	4aa0      	ldr	r2, [pc, #640]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aa6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002aaa:	4b9e      	ldr	r3, [pc, #632]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab4:	499b      	ldr	r1, [pc, #620]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ac8:	4b96      	ldr	r3, [pc, #600]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ace:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad6:	4993      	ldr	r1, [pc, #588]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aea:	4b8e      	ldr	r3, [pc, #568]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002af8:	498a      	ldr	r1, [pc, #552]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b0c:	4b85      	ldr	r3, [pc, #532]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b1a:	4982      	ldr	r1, [pc, #520]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b2e:	4b7d      	ldr	r3, [pc, #500]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	4979      	ldr	r1, [pc, #484]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b50:	4b74      	ldr	r3, [pc, #464]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b56:	f023 0203 	bic.w	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	4971      	ldr	r1, [pc, #452]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b72:	4b6c      	ldr	r3, [pc, #432]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b78:	f023 020c 	bic.w	r2, r3, #12
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b80:	4968      	ldr	r1, [pc, #416]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b94:	4b63      	ldr	r3, [pc, #396]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba2:	4960      	ldr	r1, [pc, #384]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bb6:	4b5b      	ldr	r3, [pc, #364]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc4:	4957      	ldr	r1, [pc, #348]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bd8:	4b52      	ldr	r3, [pc, #328]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	494f      	ldr	r1, [pc, #316]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002bfa:	4b4a      	ldr	r3, [pc, #296]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	4946      	ldr	r1, [pc, #280]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c1c:	4b41      	ldr	r3, [pc, #260]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2a:	493e      	ldr	r1, [pc, #248]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c3e:	4b39      	ldr	r3, [pc, #228]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4c:	4935      	ldr	r1, [pc, #212]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c60:	4b30      	ldr	r3, [pc, #192]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c6e:	492d      	ldr	r1, [pc, #180]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d011      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c82:	4b28      	ldr	r3, [pc, #160]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c90:	4924      	ldr	r1, [pc, #144]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cc2:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd0:	4914      	ldr	r1, [pc, #80]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00b      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cf4:	490b      	ldr	r1, [pc, #44]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00f      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d18:	4902      	ldr	r1, [pc, #8]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d20:	e002      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00b      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d34:	4b8a      	ldr	r3, [pc, #552]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d3a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d44:	4986      	ldr	r1, [pc, #536]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00b      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d58:	4b81      	ldr	r3, [pc, #516]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d68:	497d      	ldr	r1, [pc, #500]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d006      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80d6 	beq.w	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d84:	4b76      	ldr	r3, [pc, #472]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a75      	ldr	r2, [pc, #468]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d90:	f7fe fd00 	bl	8001794 <HAL_GetTick>
 8002d94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d98:	f7fe fcfc 	bl	8001794 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	; 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e195      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002daa:	4b6d      	ldr	r3, [pc, #436]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d021      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d11d      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002dca:	4b65      	ldr	r3, [pc, #404]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dd0:	0c1b      	lsrs	r3, r3, #16
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dd8:	4b61      	ldr	r3, [pc, #388]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dde:	0e1b      	lsrs	r3, r3, #24
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	019a      	lsls	r2, r3, #6
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	041b      	lsls	r3, r3, #16
 8002df0:	431a      	orrs	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	071b      	lsls	r3, r3, #28
 8002dfe:	4958      	ldr	r1, [pc, #352]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d004      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e1a:	d00a      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d02e      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e30:	d129      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e32:	4b4b      	ldr	r3, [pc, #300]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e40:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e46:	0f1b      	lsrs	r3, r3, #28
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	019a      	lsls	r2, r3, #6
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	041b      	lsls	r3, r3, #16
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	061b      	lsls	r3, r3, #24
 8002e60:	431a      	orrs	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	071b      	lsls	r3, r3, #28
 8002e66:	493e      	ldr	r1, [pc, #248]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e6e:	4b3c      	ldr	r3, [pc, #240]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e74:	f023 021f 	bic.w	r2, r3, #31
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	4938      	ldr	r1, [pc, #224]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d01d      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e92:	4b33      	ldr	r3, [pc, #204]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e98:	0e1b      	lsrs	r3, r3, #24
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ea0:	4b2f      	ldr	r3, [pc, #188]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ea6:	0f1b      	lsrs	r3, r3, #28
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	019a      	lsls	r2, r3, #6
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	041b      	lsls	r3, r3, #16
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	061b      	lsls	r3, r3, #24
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	071b      	lsls	r3, r3, #28
 8002ec6:	4926      	ldr	r1, [pc, #152]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d011      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	019a      	lsls	r2, r3, #6
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	041b      	lsls	r3, r3, #16
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	061b      	lsls	r3, r3, #24
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	071b      	lsls	r3, r3, #28
 8002ef6:	491a      	ldr	r1, [pc, #104]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002efe:	4b18      	ldr	r3, [pc, #96]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a17      	ldr	r2, [pc, #92]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f0a:	f7fe fc43 	bl	8001794 <HAL_GetTick>
 8002f0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f10:	e008      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f12:	f7fe fc3f 	bl	8001794 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b64      	cmp	r3, #100	; 0x64
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e0d8      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f24:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0f0      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	f040 80ce 	bne.w	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f38:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a08      	ldr	r2, [pc, #32]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f44:	f7fe fc26 	bl	8001794 <HAL_GetTick>
 8002f48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f4a:	e00b      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f4c:	f7fe fc22 	bl	8001794 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	; 0x64
 8002f58:	d904      	bls.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e0bb      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f64:	4b5e      	ldr	r3, [pc, #376]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f70:	d0ec      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d02e      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d12a      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f9a:	4b51      	ldr	r3, [pc, #324]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa0:	0c1b      	lsrs	r3, r3, #16
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fa8:	4b4d      	ldr	r3, [pc, #308]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fae:	0f1b      	lsrs	r3, r3, #28
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	019a      	lsls	r2, r3, #6
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	041b      	lsls	r3, r3, #16
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	061b      	lsls	r3, r3, #24
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	071b      	lsls	r3, r3, #28
 8002fce:	4944      	ldr	r1, [pc, #272]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002fd6:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fdc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	493d      	ldr	r1, [pc, #244]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d022      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003000:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003004:	d11d      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003006:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300c:	0e1b      	lsrs	r3, r3, #24
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003014:	4b32      	ldr	r3, [pc, #200]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	0f1b      	lsrs	r3, r3, #28
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	019a      	lsls	r2, r3, #6
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	041b      	lsls	r3, r3, #16
 800302e:	431a      	orrs	r2, r3
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	061b      	lsls	r3, r3, #24
 8003034:	431a      	orrs	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	071b      	lsls	r3, r3, #28
 800303a:	4929      	ldr	r1, [pc, #164]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d028      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800304e:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003054:	0e1b      	lsrs	r3, r3, #24
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800305c:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003062:	0c1b      	lsrs	r3, r3, #16
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	019a      	lsls	r2, r3, #6
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	041b      	lsls	r3, r3, #16
 8003074:	431a      	orrs	r2, r3
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	061b      	lsls	r3, r3, #24
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	071b      	lsls	r3, r3, #28
 8003082:	4917      	ldr	r1, [pc, #92]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800308a:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800308c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003090:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	4911      	ldr	r1, [pc, #68]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a0e      	ldr	r2, [pc, #56]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ac:	f7fe fb72 	bl	8001794 <HAL_GetTick>
 80030b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030b4:	f7fe fb6e 	bl	8001794 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e007      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030c6:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030d2:	d1ef      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800

080030e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e049      	b.n	800318a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fe f940 	bl	8001390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3304      	adds	r3, #4
 8003120:	4619      	mov	r1, r3
 8003122:	4610      	mov	r0, r2
 8003124:	f000 fd40 	bl	8003ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e049      	b.n	8003238 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d106      	bne.n	80031be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f841 	bl	8003240 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2202      	movs	r2, #2
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3304      	adds	r3, #4
 80031ce:	4619      	mov	r1, r3
 80031d0:	4610      	mov	r0, r2
 80031d2:	f000 fce9 	bl	8003ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d109      	bne.n	8003278 <HAL_TIM_PWM_Start+0x24>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	bf14      	ite	ne
 8003270:	2301      	movne	r3, #1
 8003272:	2300      	moveq	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	e03c      	b.n	80032f2 <HAL_TIM_PWM_Start+0x9e>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b04      	cmp	r3, #4
 800327c:	d109      	bne.n	8003292 <HAL_TIM_PWM_Start+0x3e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b01      	cmp	r3, #1
 8003288:	bf14      	ite	ne
 800328a:	2301      	movne	r3, #1
 800328c:	2300      	moveq	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	e02f      	b.n	80032f2 <HAL_TIM_PWM_Start+0x9e>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b08      	cmp	r3, #8
 8003296:	d109      	bne.n	80032ac <HAL_TIM_PWM_Start+0x58>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	bf14      	ite	ne
 80032a4:	2301      	movne	r3, #1
 80032a6:	2300      	moveq	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	e022      	b.n	80032f2 <HAL_TIM_PWM_Start+0x9e>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2b0c      	cmp	r3, #12
 80032b0:	d109      	bne.n	80032c6 <HAL_TIM_PWM_Start+0x72>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	bf14      	ite	ne
 80032be:	2301      	movne	r3, #1
 80032c0:	2300      	moveq	r3, #0
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	e015      	b.n	80032f2 <HAL_TIM_PWM_Start+0x9e>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b10      	cmp	r3, #16
 80032ca:	d109      	bne.n	80032e0 <HAL_TIM_PWM_Start+0x8c>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	bf14      	ite	ne
 80032d8:	2301      	movne	r3, #1
 80032da:	2300      	moveq	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	e008      	b.n	80032f2 <HAL_TIM_PWM_Start+0x9e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	bf14      	ite	ne
 80032ec:	2301      	movne	r3, #1
 80032ee:	2300      	moveq	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e092      	b.n	8003420 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d104      	bne.n	800330a <HAL_TIM_PWM_Start+0xb6>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003308:	e023      	b.n	8003352 <HAL_TIM_PWM_Start+0xfe>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d104      	bne.n	800331a <HAL_TIM_PWM_Start+0xc6>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003318:	e01b      	b.n	8003352 <HAL_TIM_PWM_Start+0xfe>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b08      	cmp	r3, #8
 800331e:	d104      	bne.n	800332a <HAL_TIM_PWM_Start+0xd6>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003328:	e013      	b.n	8003352 <HAL_TIM_PWM_Start+0xfe>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b0c      	cmp	r3, #12
 800332e:	d104      	bne.n	800333a <HAL_TIM_PWM_Start+0xe6>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003338:	e00b      	b.n	8003352 <HAL_TIM_PWM_Start+0xfe>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b10      	cmp	r3, #16
 800333e:	d104      	bne.n	800334a <HAL_TIM_PWM_Start+0xf6>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003348:	e003      	b.n	8003352 <HAL_TIM_PWM_Start+0xfe>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2201      	movs	r2, #1
 8003358:	6839      	ldr	r1, [r7, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f000 ffbc 	bl	80042d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a30      	ldr	r2, [pc, #192]	; (8003428 <HAL_TIM_PWM_Start+0x1d4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_TIM_PWM_Start+0x120>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a2f      	ldr	r2, [pc, #188]	; (800342c <HAL_TIM_PWM_Start+0x1d8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d101      	bne.n	8003378 <HAL_TIM_PWM_Start+0x124>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <HAL_TIM_PWM_Start+0x126>
 8003378:	2300      	movs	r3, #0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d007      	beq.n	800338e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a25      	ldr	r2, [pc, #148]	; (8003428 <HAL_TIM_PWM_Start+0x1d4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d022      	beq.n	80033de <HAL_TIM_PWM_Start+0x18a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a0:	d01d      	beq.n	80033de <HAL_TIM_PWM_Start+0x18a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a22      	ldr	r2, [pc, #136]	; (8003430 <HAL_TIM_PWM_Start+0x1dc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d018      	beq.n	80033de <HAL_TIM_PWM_Start+0x18a>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a20      	ldr	r2, [pc, #128]	; (8003434 <HAL_TIM_PWM_Start+0x1e0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d013      	beq.n	80033de <HAL_TIM_PWM_Start+0x18a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <HAL_TIM_PWM_Start+0x1e4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00e      	beq.n	80033de <HAL_TIM_PWM_Start+0x18a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a19      	ldr	r2, [pc, #100]	; (800342c <HAL_TIM_PWM_Start+0x1d8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d009      	beq.n	80033de <HAL_TIM_PWM_Start+0x18a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a1b      	ldr	r2, [pc, #108]	; (800343c <HAL_TIM_PWM_Start+0x1e8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d004      	beq.n	80033de <HAL_TIM_PWM_Start+0x18a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a19      	ldr	r2, [pc, #100]	; (8003440 <HAL_TIM_PWM_Start+0x1ec>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d115      	bne.n	800340a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	4b17      	ldr	r3, [pc, #92]	; (8003444 <HAL_TIM_PWM_Start+0x1f0>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2b06      	cmp	r3, #6
 80033ee:	d015      	beq.n	800341c <HAL_TIM_PWM_Start+0x1c8>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f6:	d011      	beq.n	800341c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003408:	e008      	b.n	800341c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0201 	orr.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	e000      	b.n	800341e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40010000 	.word	0x40010000
 800342c:	40010400 	.word	0x40010400
 8003430:	40000400 	.word	0x40000400
 8003434:	40000800 	.word	0x40000800
 8003438:	40000c00 	.word	0x40000c00
 800343c:	40014000 	.word	0x40014000
 8003440:	40001800 	.word	0x40001800
 8003444:	00010007 	.word	0x00010007

08003448 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2200      	movs	r2, #0
 8003458:	6839      	ldr	r1, [r7, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 ff3c 	bl	80042d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a36      	ldr	r2, [pc, #216]	; (8003540 <HAL_TIM_PWM_Stop+0xf8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d004      	beq.n	8003474 <HAL_TIM_PWM_Stop+0x2c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a35      	ldr	r2, [pc, #212]	; (8003544 <HAL_TIM_PWM_Stop+0xfc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d101      	bne.n	8003478 <HAL_TIM_PWM_Stop+0x30>
 8003474:	2301      	movs	r3, #1
 8003476:	e000      	b.n	800347a <HAL_TIM_PWM_Stop+0x32>
 8003478:	2300      	movs	r3, #0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d017      	beq.n	80034ae <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6a1a      	ldr	r2, [r3, #32]
 8003484:	f241 1311 	movw	r3, #4369	; 0x1111
 8003488:	4013      	ands	r3, r2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10f      	bne.n	80034ae <HAL_TIM_PWM_Stop+0x66>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6a1a      	ldr	r2, [r3, #32]
 8003494:	f240 4344 	movw	r3, #1092	; 0x444
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d107      	bne.n	80034ae <HAL_TIM_PWM_Stop+0x66>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6a1a      	ldr	r2, [r3, #32]
 80034b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10f      	bne.n	80034de <HAL_TIM_PWM_Stop+0x96>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6a1a      	ldr	r2, [r3, #32]
 80034c4:	f240 4344 	movw	r3, #1092	; 0x444
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d107      	bne.n	80034de <HAL_TIM_PWM_Stop+0x96>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0201 	bic.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d104      	bne.n	80034ee <HAL_TIM_PWM_Stop+0xa6>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034ec:	e023      	b.n	8003536 <HAL_TIM_PWM_Stop+0xee>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d104      	bne.n	80034fe <HAL_TIM_PWM_Stop+0xb6>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034fc:	e01b      	b.n	8003536 <HAL_TIM_PWM_Stop+0xee>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d104      	bne.n	800350e <HAL_TIM_PWM_Stop+0xc6>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800350c:	e013      	b.n	8003536 <HAL_TIM_PWM_Stop+0xee>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b0c      	cmp	r3, #12
 8003512:	d104      	bne.n	800351e <HAL_TIM_PWM_Stop+0xd6>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800351c:	e00b      	b.n	8003536 <HAL_TIM_PWM_Stop+0xee>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b10      	cmp	r3, #16
 8003522:	d104      	bne.n	800352e <HAL_TIM_PWM_Stop+0xe6>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800352c:	e003      	b.n	8003536 <HAL_TIM_PWM_Stop+0xee>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40010000 	.word	0x40010000
 8003544:	40010400 	.word	0x40010400

08003548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b02      	cmp	r3, #2
 800355c:	d122      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b02      	cmp	r3, #2
 800356a:	d11b      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 0202 	mvn.w	r2, #2
 8003574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 faee 	bl	8003b6c <HAL_TIM_IC_CaptureCallback>
 8003590:	e005      	b.n	800359e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fae0 	bl	8003b58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 faf1 	bl	8003b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d122      	bne.n	80035f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d11b      	bne.n	80035f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0204 	mvn.w	r2, #4
 80035c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2202      	movs	r2, #2
 80035ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fac4 	bl	8003b6c <HAL_TIM_IC_CaptureCallback>
 80035e4:	e005      	b.n	80035f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fab6 	bl	8003b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fac7 	bl	8003b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b08      	cmp	r3, #8
 8003604:	d122      	bne.n	800364c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b08      	cmp	r3, #8
 8003612:	d11b      	bne.n	800364c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0208 	mvn.w	r2, #8
 800361c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2204      	movs	r2, #4
 8003622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fa9a 	bl	8003b6c <HAL_TIM_IC_CaptureCallback>
 8003638:	e005      	b.n	8003646 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fa8c 	bl	8003b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fa9d 	bl	8003b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2b10      	cmp	r3, #16
 8003658:	d122      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b10      	cmp	r3, #16
 8003666:	d11b      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0210 	mvn.w	r2, #16
 8003670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2208      	movs	r2, #8
 8003676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fa70 	bl	8003b6c <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fa62 	bl	8003b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fa73 	bl	8003b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d10e      	bne.n	80036cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d107      	bne.n	80036cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0201 	mvn.w	r2, #1
 80036c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fa3c 	bl	8003b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d6:	2b80      	cmp	r3, #128	; 0x80
 80036d8:	d10e      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e4:	2b80      	cmp	r3, #128	; 0x80
 80036e6:	d107      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 feae 	bl	8004454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003706:	d10e      	bne.n	8003726 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	2b80      	cmp	r3, #128	; 0x80
 8003714:	d107      	bne.n	8003726 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800371e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fea1 	bl	8004468 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003730:	2b40      	cmp	r3, #64	; 0x40
 8003732:	d10e      	bne.n	8003752 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d107      	bne.n	8003752 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800374a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fa21 	bl	8003b94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b20      	cmp	r3, #32
 800375e:	d10e      	bne.n	800377e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b20      	cmp	r3, #32
 800376c:	d107      	bne.n	800377e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f06f 0220 	mvn.w	r2, #32
 8003776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fe61 	bl	8004440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e0ff      	b.n	80039a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b14      	cmp	r3, #20
 80037b2:	f200 80f0 	bhi.w	8003996 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80037b6:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	08003811 	.word	0x08003811
 80037c0:	08003997 	.word	0x08003997
 80037c4:	08003997 	.word	0x08003997
 80037c8:	08003997 	.word	0x08003997
 80037cc:	08003851 	.word	0x08003851
 80037d0:	08003997 	.word	0x08003997
 80037d4:	08003997 	.word	0x08003997
 80037d8:	08003997 	.word	0x08003997
 80037dc:	08003893 	.word	0x08003893
 80037e0:	08003997 	.word	0x08003997
 80037e4:	08003997 	.word	0x08003997
 80037e8:	08003997 	.word	0x08003997
 80037ec:	080038d3 	.word	0x080038d3
 80037f0:	08003997 	.word	0x08003997
 80037f4:	08003997 	.word	0x08003997
 80037f8:	08003997 	.word	0x08003997
 80037fc:	08003915 	.word	0x08003915
 8003800:	08003997 	.word	0x08003997
 8003804:	08003997 	.word	0x08003997
 8003808:	08003997 	.word	0x08003997
 800380c:	08003955 	.word	0x08003955
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fa66 	bl	8003ce8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699a      	ldr	r2, [r3, #24]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0208 	orr.w	r2, r2, #8
 800382a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0204 	bic.w	r2, r2, #4
 800383a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6999      	ldr	r1, [r3, #24]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	619a      	str	r2, [r3, #24]
      break;
 800384e:	e0a5      	b.n	800399c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	4618      	mov	r0, r3
 8003858:	f000 fab8 	bl	8003dcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800386a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699a      	ldr	r2, [r3, #24]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6999      	ldr	r1, [r3, #24]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	021a      	lsls	r2, r3, #8
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	619a      	str	r2, [r3, #24]
      break;
 8003890:	e084      	b.n	800399c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fb0f 	bl	8003ebc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69da      	ldr	r2, [r3, #28]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0208 	orr.w	r2, r2, #8
 80038ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69da      	ldr	r2, [r3, #28]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0204 	bic.w	r2, r2, #4
 80038bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69d9      	ldr	r1, [r3, #28]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	61da      	str	r2, [r3, #28]
      break;
 80038d0:	e064      	b.n	800399c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68b9      	ldr	r1, [r7, #8]
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fb65 	bl	8003fa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69da      	ldr	r2, [r3, #28]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69d9      	ldr	r1, [r3, #28]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	021a      	lsls	r2, r3, #8
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	61da      	str	r2, [r3, #28]
      break;
 8003912:	e043      	b.n	800399c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fb9c 	bl	8004058 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0208 	orr.w	r2, r2, #8
 800392e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0204 	bic.w	r2, r2, #4
 800393e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003952:	e023      	b.n	800399c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fbce 	bl	80040fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800396e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	021a      	lsls	r2, r3, #8
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003994:	e002      	b.n	800399c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
      break;
 800399a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop

080039b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_TIM_ConfigClockSource+0x1c>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e0b4      	b.n	8003b36 <HAL_TIM_ConfigClockSource+0x186>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	4b56      	ldr	r3, [pc, #344]	; (8003b40 <HAL_TIM_ConfigClockSource+0x190>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a04:	d03e      	beq.n	8003a84 <HAL_TIM_ConfigClockSource+0xd4>
 8003a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a0a:	f200 8087 	bhi.w	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a12:	f000 8086 	beq.w	8003b22 <HAL_TIM_ConfigClockSource+0x172>
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1a:	d87f      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a1c:	2b70      	cmp	r3, #112	; 0x70
 8003a1e:	d01a      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0xa6>
 8003a20:	2b70      	cmp	r3, #112	; 0x70
 8003a22:	d87b      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a24:	2b60      	cmp	r3, #96	; 0x60
 8003a26:	d050      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0x11a>
 8003a28:	2b60      	cmp	r3, #96	; 0x60
 8003a2a:	d877      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a2c:	2b50      	cmp	r3, #80	; 0x50
 8003a2e:	d03c      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0xfa>
 8003a30:	2b50      	cmp	r3, #80	; 0x50
 8003a32:	d873      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a34:	2b40      	cmp	r3, #64	; 0x40
 8003a36:	d058      	beq.n	8003aea <HAL_TIM_ConfigClockSource+0x13a>
 8003a38:	2b40      	cmp	r3, #64	; 0x40
 8003a3a:	d86f      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a3c:	2b30      	cmp	r3, #48	; 0x30
 8003a3e:	d064      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x15a>
 8003a40:	2b30      	cmp	r3, #48	; 0x30
 8003a42:	d86b      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d060      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x15a>
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d867      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d05c      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x15a>
 8003a50:	2b10      	cmp	r3, #16
 8003a52:	d05a      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x15a>
 8003a54:	e062      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6899      	ldr	r1, [r3, #8]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f000 fc17 	bl	8004298 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	609a      	str	r2, [r3, #8]
      break;
 8003a82:	e04f      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6899      	ldr	r1, [r3, #8]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f000 fc00 	bl	8004298 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aa6:	609a      	str	r2, [r3, #8]
      break;
 8003aa8:	e03c      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	6859      	ldr	r1, [r3, #4]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f000 fb74 	bl	80041a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2150      	movs	r1, #80	; 0x50
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fbcd 	bl	8004262 <TIM_ITRx_SetConfig>
      break;
 8003ac8:	e02c      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	6859      	ldr	r1, [r3, #4]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f000 fb93 	bl	8004202 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2160      	movs	r1, #96	; 0x60
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fbbd 	bl	8004262 <TIM_ITRx_SetConfig>
      break;
 8003ae8:	e01c      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	6859      	ldr	r1, [r3, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	461a      	mov	r2, r3
 8003af8:	f000 fb54 	bl	80041a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2140      	movs	r1, #64	; 0x40
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fbad 	bl	8004262 <TIM_ITRx_SetConfig>
      break;
 8003b08:	e00c      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4619      	mov	r1, r3
 8003b14:	4610      	mov	r0, r2
 8003b16:	f000 fba4 	bl	8004262 <TIM_ITRx_SetConfig>
      break;
 8003b1a:	e003      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b20:	e000      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	fffeff88 	.word	0xfffeff88

08003b44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a40      	ldr	r2, [pc, #256]	; (8003cbc <TIM_Base_SetConfig+0x114>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d013      	beq.n	8003be8 <TIM_Base_SetConfig+0x40>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc6:	d00f      	beq.n	8003be8 <TIM_Base_SetConfig+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a3d      	ldr	r2, [pc, #244]	; (8003cc0 <TIM_Base_SetConfig+0x118>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00b      	beq.n	8003be8 <TIM_Base_SetConfig+0x40>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a3c      	ldr	r2, [pc, #240]	; (8003cc4 <TIM_Base_SetConfig+0x11c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d007      	beq.n	8003be8 <TIM_Base_SetConfig+0x40>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a3b      	ldr	r2, [pc, #236]	; (8003cc8 <TIM_Base_SetConfig+0x120>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d003      	beq.n	8003be8 <TIM_Base_SetConfig+0x40>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a3a      	ldr	r2, [pc, #232]	; (8003ccc <TIM_Base_SetConfig+0x124>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d108      	bne.n	8003bfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a2f      	ldr	r2, [pc, #188]	; (8003cbc <TIM_Base_SetConfig+0x114>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d02b      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c08:	d027      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a2c      	ldr	r2, [pc, #176]	; (8003cc0 <TIM_Base_SetConfig+0x118>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d023      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a2b      	ldr	r2, [pc, #172]	; (8003cc4 <TIM_Base_SetConfig+0x11c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01f      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a2a      	ldr	r2, [pc, #168]	; (8003cc8 <TIM_Base_SetConfig+0x120>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d01b      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a29      	ldr	r2, [pc, #164]	; (8003ccc <TIM_Base_SetConfig+0x124>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d017      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a28      	ldr	r2, [pc, #160]	; (8003cd0 <TIM_Base_SetConfig+0x128>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d013      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a27      	ldr	r2, [pc, #156]	; (8003cd4 <TIM_Base_SetConfig+0x12c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00f      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <TIM_Base_SetConfig+0x130>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00b      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a25      	ldr	r2, [pc, #148]	; (8003cdc <TIM_Base_SetConfig+0x134>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d007      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a24      	ldr	r2, [pc, #144]	; (8003ce0 <TIM_Base_SetConfig+0x138>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d003      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a23      	ldr	r2, [pc, #140]	; (8003ce4 <TIM_Base_SetConfig+0x13c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d108      	bne.n	8003c6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a0a      	ldr	r2, [pc, #40]	; (8003cbc <TIM_Base_SetConfig+0x114>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d003      	beq.n	8003ca0 <TIM_Base_SetConfig+0xf8>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a0c      	ldr	r2, [pc, #48]	; (8003ccc <TIM_Base_SetConfig+0x124>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d103      	bne.n	8003ca8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	615a      	str	r2, [r3, #20]
}
 8003cae:	bf00      	nop
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	40000400 	.word	0x40000400
 8003cc4:	40000800 	.word	0x40000800
 8003cc8:	40000c00 	.word	0x40000c00
 8003ccc:	40010400 	.word	0x40010400
 8003cd0:	40014000 	.word	0x40014000
 8003cd4:	40014400 	.word	0x40014400
 8003cd8:	40014800 	.word	0x40014800
 8003cdc:	40001800 	.word	0x40001800
 8003ce0:	40001c00 	.word	0x40001c00
 8003ce4:	40002000 	.word	0x40002000

08003ce8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f023 0201 	bic.w	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4b2b      	ldr	r3, [pc, #172]	; (8003dc0 <TIM_OC1_SetConfig+0xd8>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0303 	bic.w	r3, r3, #3
 8003d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f023 0302 	bic.w	r3, r3, #2
 8003d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a21      	ldr	r2, [pc, #132]	; (8003dc4 <TIM_OC1_SetConfig+0xdc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d003      	beq.n	8003d4c <TIM_OC1_SetConfig+0x64>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a20      	ldr	r2, [pc, #128]	; (8003dc8 <TIM_OC1_SetConfig+0xe0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d10c      	bne.n	8003d66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f023 0308 	bic.w	r3, r3, #8
 8003d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f023 0304 	bic.w	r3, r3, #4
 8003d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a16      	ldr	r2, [pc, #88]	; (8003dc4 <TIM_OC1_SetConfig+0xdc>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d003      	beq.n	8003d76 <TIM_OC1_SetConfig+0x8e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a15      	ldr	r2, [pc, #84]	; (8003dc8 <TIM_OC1_SetConfig+0xe0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d111      	bne.n	8003d9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	621a      	str	r2, [r3, #32]
}
 8003db4:	bf00      	nop
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	fffeff8f 	.word	0xfffeff8f
 8003dc4:	40010000 	.word	0x40010000
 8003dc8:	40010400 	.word	0x40010400

08003dcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	f023 0210 	bic.w	r2, r3, #16
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4b2e      	ldr	r3, [pc, #184]	; (8003eb0 <TIM_OC2_SetConfig+0xe4>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f023 0320 	bic.w	r3, r3, #32
 8003e16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a23      	ldr	r2, [pc, #140]	; (8003eb4 <TIM_OC2_SetConfig+0xe8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d003      	beq.n	8003e34 <TIM_OC2_SetConfig+0x68>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a22      	ldr	r2, [pc, #136]	; (8003eb8 <TIM_OC2_SetConfig+0xec>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d10d      	bne.n	8003e50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a18      	ldr	r2, [pc, #96]	; (8003eb4 <TIM_OC2_SetConfig+0xe8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d003      	beq.n	8003e60 <TIM_OC2_SetConfig+0x94>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a17      	ldr	r2, [pc, #92]	; (8003eb8 <TIM_OC2_SetConfig+0xec>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d113      	bne.n	8003e88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	feff8fff 	.word	0xfeff8fff
 8003eb4:	40010000 	.word	0x40010000
 8003eb8:	40010400 	.word	0x40010400

08003ebc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4b2d      	ldr	r3, [pc, #180]	; (8003f9c <TIM_OC3_SetConfig+0xe0>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0303 	bic.w	r3, r3, #3
 8003ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a22      	ldr	r2, [pc, #136]	; (8003fa0 <TIM_OC3_SetConfig+0xe4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d003      	beq.n	8003f22 <TIM_OC3_SetConfig+0x66>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a21      	ldr	r2, [pc, #132]	; (8003fa4 <TIM_OC3_SetConfig+0xe8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d10d      	bne.n	8003f3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a17      	ldr	r2, [pc, #92]	; (8003fa0 <TIM_OC3_SetConfig+0xe4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d003      	beq.n	8003f4e <TIM_OC3_SetConfig+0x92>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a16      	ldr	r2, [pc, #88]	; (8003fa4 <TIM_OC3_SetConfig+0xe8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d113      	bne.n	8003f76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	621a      	str	r2, [r3, #32]
}
 8003f90:	bf00      	nop
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	fffeff8f 	.word	0xfffeff8f
 8003fa0:	40010000 	.word	0x40010000
 8003fa4:	40010400 	.word	0x40010400

08003fa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4b1e      	ldr	r3, [pc, #120]	; (800404c <TIM_OC4_SetConfig+0xa4>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	021b      	lsls	r3, r3, #8
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	031b      	lsls	r3, r3, #12
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a13      	ldr	r2, [pc, #76]	; (8004050 <TIM_OC4_SetConfig+0xa8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_OC4_SetConfig+0x68>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a12      	ldr	r2, [pc, #72]	; (8004054 <TIM_OC4_SetConfig+0xac>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d109      	bne.n	8004024 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004016:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	019b      	lsls	r3, r3, #6
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	621a      	str	r2, [r3, #32]
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	feff8fff 	.word	0xfeff8fff
 8004050:	40010000 	.word	0x40010000
 8004054:	40010400 	.word	0x40010400

08004058 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4b1b      	ldr	r3, [pc, #108]	; (80040f0 <TIM_OC5_SetConfig+0x98>)
 8004084:	4013      	ands	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004098:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	041b      	lsls	r3, r3, #16
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a12      	ldr	r2, [pc, #72]	; (80040f4 <TIM_OC5_SetConfig+0x9c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d003      	beq.n	80040b6 <TIM_OC5_SetConfig+0x5e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a11      	ldr	r2, [pc, #68]	; (80040f8 <TIM_OC5_SetConfig+0xa0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d109      	bne.n	80040ca <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	021b      	lsls	r3, r3, #8
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	621a      	str	r2, [r3, #32]
}
 80040e4:	bf00      	nop
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	fffeff8f 	.word	0xfffeff8f
 80040f4:	40010000 	.word	0x40010000
 80040f8:	40010400 	.word	0x40010400

080040fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <TIM_OC6_SetConfig+0x9c>)
 8004128:	4013      	ands	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	021b      	lsls	r3, r3, #8
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800413e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	051b      	lsls	r3, r3, #20
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a13      	ldr	r2, [pc, #76]	; (800419c <TIM_OC6_SetConfig+0xa0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_OC6_SetConfig+0x60>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a12      	ldr	r2, [pc, #72]	; (80041a0 <TIM_OC6_SetConfig+0xa4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d109      	bne.n	8004170 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004162:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	029b      	lsls	r3, r3, #10
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	621a      	str	r2, [r3, #32]
}
 800418a:	bf00      	nop
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	feff8fff 	.word	0xfeff8fff
 800419c:	40010000 	.word	0x40010000
 80041a0:	40010400 	.word	0x40010400

080041a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	f023 0201 	bic.w	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f023 030a 	bic.w	r3, r3, #10
 80041e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	621a      	str	r2, [r3, #32]
}
 80041f6:	bf00      	nop
 80041f8:	371c      	adds	r7, #28
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004202:	b480      	push	{r7}
 8004204:	b087      	sub	sp, #28
 8004206:	af00      	add	r7, sp, #0
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	f023 0210 	bic.w	r2, r3, #16
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800422c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	031b      	lsls	r3, r3, #12
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800423e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	621a      	str	r2, [r3, #32]
}
 8004256:	bf00      	nop
 8004258:	371c      	adds	r7, #28
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004262:	b480      	push	{r7}
 8004264:	b085      	sub	sp, #20
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004278:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	f043 0307 	orr.w	r3, r3, #7
 8004284:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	609a      	str	r2, [r3, #8]
}
 800428c:	bf00      	nop
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	021a      	lsls	r2, r3, #8
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4313      	orrs	r3, r2
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	609a      	str	r2, [r3, #8]
}
 80042cc:	bf00      	nop
 80042ce:	371c      	adds	r7, #28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f003 031f 	and.w	r3, r3, #31
 80042ea:	2201      	movs	r2, #1
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a1a      	ldr	r2, [r3, #32]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	43db      	mvns	r3, r3
 80042fa:	401a      	ands	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a1a      	ldr	r2, [r3, #32]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	fa01 f303 	lsl.w	r3, r1, r3
 8004310:	431a      	orrs	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
	...

08004324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004338:	2302      	movs	r3, #2
 800433a:	e06d      	b.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a30      	ldr	r2, [pc, #192]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d004      	beq.n	8004370 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a2f      	ldr	r2, [pc, #188]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d108      	bne.n	8004382 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004376:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004388:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4313      	orrs	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a20      	ldr	r2, [pc, #128]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d022      	beq.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ae:	d01d      	beq.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1d      	ldr	r2, [pc, #116]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d018      	beq.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1c      	ldr	r2, [pc, #112]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d013      	beq.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1a      	ldr	r2, [pc, #104]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00e      	beq.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a15      	ldr	r2, [pc, #84]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d009      	beq.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a16      	ldr	r2, [pc, #88]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d004      	beq.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a15      	ldr	r2, [pc, #84]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d10c      	bne.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	40010000 	.word	0x40010000
 8004428:	40010400 	.word	0x40010400
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800
 8004434:	40000c00 	.word	0x40000c00
 8004438:	40014000 	.word	0x40014000
 800443c:	40001800 	.word	0x40001800

08004440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e040      	b.n	8004510 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fd f82a 	bl	80014f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2224      	movs	r2, #36	; 0x24
 80044a8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0201 	bic.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fd1e 	bl	8004efc <UART_SetConfig>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e022      	b.n	8004510 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 ff76 	bl	80053c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fffd 	bl	8005508 <UART_CheckIdleState>
 800450e:	4603      	mov	r3, r0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08a      	sub	sp, #40	; 0x28
 800451c:	af02      	add	r7, sp, #8
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	4613      	mov	r3, r2
 8004526:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800452c:	2b20      	cmp	r3, #32
 800452e:	d171      	bne.n	8004614 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <HAL_UART_Transmit+0x24>
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e06a      	b.n	8004616 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2221      	movs	r2, #33	; 0x21
 800454c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800454e:	f7fd f921 	bl	8001794 <HAL_GetTick>
 8004552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	88fa      	ldrh	r2, [r7, #6]
 8004558:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	88fa      	ldrh	r2, [r7, #6]
 8004560:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456c:	d108      	bne.n	8004580 <HAL_UART_Transmit+0x68>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d104      	bne.n	8004580 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	e003      	b.n	8004588 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004588:	e02c      	b.n	80045e4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2200      	movs	r2, #0
 8004592:	2180      	movs	r1, #128	; 0x80
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f001 f804 	bl	80055a2 <UART_WaitOnFlagUntilTimeout>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e038      	b.n	8004616 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10b      	bne.n	80045c2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	3302      	adds	r3, #2
 80045be:	61bb      	str	r3, [r7, #24]
 80045c0:	e007      	b.n	80045d2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	781a      	ldrb	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	3301      	adds	r3, #1
 80045d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1cc      	bne.n	800458a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2200      	movs	r2, #0
 80045f8:	2140      	movs	r1, #64	; 0x40
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 ffd1 	bl	80055a2 <UART_WaitOnFlagUntilTimeout>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e005      	b.n	8004616 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2220      	movs	r2, #32
 800460e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	e000      	b.n	8004616 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004614:	2302      	movs	r3, #2
  }
}
 8004616:	4618      	mov	r0, r3
 8004618:	3720      	adds	r7, #32
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b08a      	sub	sp, #40	; 0x28
 8004622:	af02      	add	r7, sp, #8
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	603b      	str	r3, [r7, #0]
 800462a:	4613      	mov	r3, r2
 800462c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004634:	2b20      	cmp	r3, #32
 8004636:	f040 80b1 	bne.w	800479c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <HAL_UART_Receive+0x28>
 8004640:	88fb      	ldrh	r3, [r7, #6]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e0a9      	b.n	800479e <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2222      	movs	r2, #34	; 0x22
 8004656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004660:	f7fd f898 	bl	8001794 <HAL_GetTick>
 8004664:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	88fa      	ldrh	r2, [r7, #6]
 800466a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	88fa      	ldrh	r2, [r7, #6]
 8004672:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467e:	d10e      	bne.n	800469e <HAL_UART_Receive+0x80>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d105      	bne.n	8004694 <HAL_UART_Receive+0x76>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800468e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004692:	e02d      	b.n	80046f0 <HAL_UART_Receive+0xd2>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	22ff      	movs	r2, #255	; 0xff
 8004698:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800469c:	e028      	b.n	80046f0 <HAL_UART_Receive+0xd2>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10d      	bne.n	80046c2 <HAL_UART_Receive+0xa4>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d104      	bne.n	80046b8 <HAL_UART_Receive+0x9a>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	22ff      	movs	r2, #255	; 0xff
 80046b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046b6:	e01b      	b.n	80046f0 <HAL_UART_Receive+0xd2>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	227f      	movs	r2, #127	; 0x7f
 80046bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046c0:	e016      	b.n	80046f0 <HAL_UART_Receive+0xd2>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046ca:	d10d      	bne.n	80046e8 <HAL_UART_Receive+0xca>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d104      	bne.n	80046de <HAL_UART_Receive+0xc0>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	227f      	movs	r2, #127	; 0x7f
 80046d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046dc:	e008      	b.n	80046f0 <HAL_UART_Receive+0xd2>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	223f      	movs	r2, #63	; 0x3f
 80046e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046e6:	e003      	b.n	80046f0 <HAL_UART_Receive+0xd2>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046f6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004700:	d108      	bne.n	8004714 <HAL_UART_Receive+0xf6>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d104      	bne.n	8004714 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800470a:	2300      	movs	r3, #0
 800470c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	e003      	b.n	800471c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004718:	2300      	movs	r3, #0
 800471a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800471c:	e032      	b.n	8004784 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2200      	movs	r2, #0
 8004726:	2120      	movs	r1, #32
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 ff3a 	bl	80055a2 <UART_WaitOnFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e032      	b.n	800479e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10c      	bne.n	8004758 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	b29a      	uxth	r2, r3
 8004746:	8a7b      	ldrh	r3, [r7, #18]
 8004748:	4013      	ands	r3, r2
 800474a:	b29a      	uxth	r2, r3
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	3302      	adds	r3, #2
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	e00c      	b.n	8004772 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	b2da      	uxtb	r2, r3
 8004760:	8a7b      	ldrh	r3, [r7, #18]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	4013      	ands	r3, r2
 8004766:	b2da      	uxtb	r2, r3
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	3301      	adds	r3, #1
 8004770:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1c6      	bne.n	800471e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	e000      	b.n	800479e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800479c:	2302      	movs	r3, #2
  }
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3720      	adds	r7, #32
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b08b      	sub	sp, #44	; 0x2c
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	4613      	mov	r3, r2
 80047b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d147      	bne.n	800484e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <HAL_UART_Transmit_IT+0x22>
 80047c4:	88fb      	ldrh	r3, [r7, #6]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e040      	b.n	8004850 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	88fa      	ldrh	r2, [r7, #6]
 80047d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2221      	movs	r2, #33	; 0x21
 80047f6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004800:	d107      	bne.n	8004812 <HAL_UART_Transmit_IT+0x6a>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d103      	bne.n	8004812 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4a13      	ldr	r2, [pc, #76]	; (800485c <HAL_UART_Transmit_IT+0xb4>)
 800480e:	66da      	str	r2, [r3, #108]	; 0x6c
 8004810:	e002      	b.n	8004818 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4a12      	ldr	r2, [pc, #72]	; (8004860 <HAL_UART_Transmit_IT+0xb8>)
 8004816:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	e853 3f00 	ldrex	r3, [r3]
 8004824:	613b      	str	r3, [r7, #16]
   return(result);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	623b      	str	r3, [r7, #32]
 8004838:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	69f9      	ldr	r1, [r7, #28]
 800483c:	6a3a      	ldr	r2, [r7, #32]
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	61bb      	str	r3, [r7, #24]
   return(result);
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e6      	bne.n	8004818 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e000      	b.n	8004850 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800484e:	2302      	movs	r3, #2
  }
}
 8004850:	4618      	mov	r0, r3
 8004852:	372c      	adds	r7, #44	; 0x2c
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	08005a67 	.word	0x08005a67
 8004860:	080059b1 	.word	0x080059b1

08004864 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b08a      	sub	sp, #40	; 0x28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004878:	2b20      	cmp	r3, #32
 800487a:	d132      	bne.n	80048e2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <HAL_UART_Receive_IT+0x24>
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e02b      	b.n	80048e4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d018      	beq.n	80048d2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	613b      	str	r3, [r7, #16]
   return(result);
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	623b      	str	r3, [r7, #32]
 80048c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	69f9      	ldr	r1, [r7, #28]
 80048c4:	6a3a      	ldr	r2, [r7, #32]
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1e6      	bne.n	80048a0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	461a      	mov	r2, r3
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 ff29 	bl	8005730 <UART_Start_Receive_IT>
 80048de:	4603      	mov	r3, r0
 80048e0:	e000      	b.n	80048e4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80048e2:	2302      	movs	r3, #2
  }
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3728      	adds	r7, #40	; 0x28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b0ba      	sub	sp, #232	; 0xe8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004912:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004916:	f640 030f 	movw	r3, #2063	; 0x80f
 800491a:	4013      	ands	r3, r2
 800491c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004920:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d115      	bne.n	8004954 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800492c:	f003 0320 	and.w	r3, r3, #32
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00f      	beq.n	8004954 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b00      	cmp	r3, #0
 800493e:	d009      	beq.n	8004954 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 82ac 	beq.w	8004ea2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	4798      	blx	r3
      }
      return;
 8004952:	e2a6      	b.n	8004ea2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 8117 	beq.w	8004b8c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800495e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800496a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800496e:	4b85      	ldr	r3, [pc, #532]	; (8004b84 <HAL_UART_IRQHandler+0x298>)
 8004970:	4013      	ands	r3, r2
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 810a 	beq.w	8004b8c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d011      	beq.n	80049a8 <HAL_UART_IRQHandler+0xbc>
 8004984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00b      	beq.n	80049a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2201      	movs	r2, #1
 8004996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499e:	f043 0201 	orr.w	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d011      	beq.n	80049d8 <HAL_UART_IRQHandler+0xec>
 80049b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00b      	beq.n	80049d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2202      	movs	r2, #2
 80049c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ce:	f043 0204 	orr.w	r2, r3, #4
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d011      	beq.n	8004a08 <HAL_UART_IRQHandler+0x11c>
 80049e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00b      	beq.n	8004a08 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2204      	movs	r2, #4
 80049f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049fe:	f043 0202 	orr.w	r2, r3, #2
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d017      	beq.n	8004a44 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a18:	f003 0320 	and.w	r3, r3, #32
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d105      	bne.n	8004a2c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a24:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00b      	beq.n	8004a44 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2208      	movs	r2, #8
 8004a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a3a:	f043 0208 	orr.w	r2, r3, #8
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d012      	beq.n	8004a76 <HAL_UART_IRQHandler+0x18a>
 8004a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00c      	beq.n	8004a76 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a6c:	f043 0220 	orr.w	r2, r3, #32
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 8212 	beq.w	8004ea6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00d      	beq.n	8004aaa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abe:	2b40      	cmp	r3, #64	; 0x40
 8004ac0:	d005      	beq.n	8004ace <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ac6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d04f      	beq.n	8004b6e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fef4 	bl	80058bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ade:	2b40      	cmp	r3, #64	; 0x40
 8004ae0:	d141      	bne.n	8004b66 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004af8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b1e:	e841 2300 	strex	r3, r2, [r1]
 8004b22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1d9      	bne.n	8004ae2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d013      	beq.n	8004b5e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b3a:	4a13      	ldr	r2, [pc, #76]	; (8004b88 <HAL_UART_IRQHandler+0x29c>)
 8004b3c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fc ffb3 	bl	8001aae <HAL_DMA_Abort_IT>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d017      	beq.n	8004b7e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b5c:	e00f      	b.n	8004b7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f9ac 	bl	8004ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b64:	e00b      	b.n	8004b7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f9a8 	bl	8004ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b6c:	e007      	b.n	8004b7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f9a4 	bl	8004ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004b7c:	e193      	b.n	8004ea6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b7e:	bf00      	nop
    return;
 8004b80:	e191      	b.n	8004ea6 <HAL_UART_IRQHandler+0x5ba>
 8004b82:	bf00      	nop
 8004b84:	04000120 	.word	0x04000120
 8004b88:	08005985 	.word	0x08005985

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	f040 814c 	bne.w	8004e2e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9a:	f003 0310 	and.w	r3, r3, #16
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 8145 	beq.w	8004e2e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 813e 	beq.w	8004e2e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2210      	movs	r2, #16
 8004bb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc4:	2b40      	cmp	r3, #64	; 0x40
 8004bc6:	f040 80b6 	bne.w	8004d36 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bd6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 8165 	beq.w	8004eaa <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bea:	429a      	cmp	r2, r3
 8004bec:	f080 815d 	bcs.w	8004eaa <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c04:	f000 8086 	beq.w	8004d14 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c14:	e853 3f00 	ldrex	r3, [r3]
 8004c18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c36:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1da      	bne.n	8004c08 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3308      	adds	r3, #8
 8004c58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3308      	adds	r3, #8
 8004c72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c82:	e841 2300 	strex	r3, r2, [r1]
 8004c86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1e1      	bne.n	8004c52 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3308      	adds	r3, #8
 8004c94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c98:	e853 3f00 	ldrex	r3, [r3]
 8004c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3308      	adds	r3, #8
 8004cae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004cc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e3      	bne.n	8004c8e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce4:	f023 0310 	bic.w	r3, r3, #16
 8004ce8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cf6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cf8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e4      	bne.n	8004cd4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fc fe5d 	bl	80019ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f8ce 	bl	8004ed0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d34:	e0b9      	b.n	8004eaa <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 80ab 	beq.w	8004eae <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004d58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 80a6 	beq.w	8004eae <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6a:	e853 3f00 	ldrex	r3, [r3]
 8004d6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d84:	647b      	str	r3, [r7, #68]	; 0x44
 8004d86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e4      	bne.n	8004d62 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3308      	adds	r3, #8
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	e853 3f00 	ldrex	r3, [r3]
 8004da6:	623b      	str	r3, [r7, #32]
   return(result);
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	f023 0301 	bic.w	r3, r3, #1
 8004dae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3308      	adds	r3, #8
 8004db8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dbc:	633a      	str	r2, [r7, #48]	; 0x30
 8004dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dc4:	e841 2300 	strex	r3, r2, [r1]
 8004dc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1e3      	bne.n	8004d98 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f023 0310 	bic.w	r3, r3, #16
 8004df8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	461a      	mov	r2, r3
 8004e02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e06:	61fb      	str	r3, [r7, #28]
 8004e08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	69b9      	ldr	r1, [r7, #24]
 8004e0c:	69fa      	ldr	r2, [r7, #28]
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	617b      	str	r3, [r7, #20]
   return(result);
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e4      	bne.n	8004de4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e24:	4619      	mov	r1, r3
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f852 	bl	8004ed0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e2c:	e03f      	b.n	8004eae <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00e      	beq.n	8004e58 <HAL_UART_IRQHandler+0x56c>
 8004e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d008      	beq.n	8004e58 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f849 	bl	8004ee8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e56:	e02d      	b.n	8004eb4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00e      	beq.n	8004e82 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d008      	beq.n	8004e82 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01c      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	4798      	blx	r3
    }
    return;
 8004e80:	e017      	b.n	8004eb2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d012      	beq.n	8004eb4 <HAL_UART_IRQHandler+0x5c8>
 8004e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00c      	beq.n	8004eb4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fe43 	bl	8005b26 <UART_EndTransmit_IT>
    return;
 8004ea0:	e008      	b.n	8004eb4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004ea2:	bf00      	nop
 8004ea4:	e006      	b.n	8004eb4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004ea6:	bf00      	nop
 8004ea8:	e004      	b.n	8004eb4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004eaa:	bf00      	nop
 8004eac:	e002      	b.n	8004eb4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004eae:	bf00      	nop
 8004eb0:	e000      	b.n	8004eb4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004eb2:	bf00      	nop
  }

}
 8004eb4:	37e8      	adds	r7, #232	; 0xe8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop

08004ebc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	4ba6      	ldr	r3, [pc, #664]	; (80051c0 <UART_SetConfig+0x2c4>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	6979      	ldr	r1, [r7, #20]
 8004f30:	430b      	orrs	r3, r1
 8004f32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a94      	ldr	r2, [pc, #592]	; (80051c4 <UART_SetConfig+0x2c8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d120      	bne.n	8004fba <UART_SetConfig+0xbe>
 8004f78:	4b93      	ldr	r3, [pc, #588]	; (80051c8 <UART_SetConfig+0x2cc>)
 8004f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	d816      	bhi.n	8004fb4 <UART_SetConfig+0xb8>
 8004f86:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <UART_SetConfig+0x90>)
 8004f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8c:	08004f9d 	.word	0x08004f9d
 8004f90:	08004fa9 	.word	0x08004fa9
 8004f94:	08004fa3 	.word	0x08004fa3
 8004f98:	08004faf 	.word	0x08004faf
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	77fb      	strb	r3, [r7, #31]
 8004fa0:	e150      	b.n	8005244 <UART_SetConfig+0x348>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	77fb      	strb	r3, [r7, #31]
 8004fa6:	e14d      	b.n	8005244 <UART_SetConfig+0x348>
 8004fa8:	2304      	movs	r3, #4
 8004faa:	77fb      	strb	r3, [r7, #31]
 8004fac:	e14a      	b.n	8005244 <UART_SetConfig+0x348>
 8004fae:	2308      	movs	r3, #8
 8004fb0:	77fb      	strb	r3, [r7, #31]
 8004fb2:	e147      	b.n	8005244 <UART_SetConfig+0x348>
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	77fb      	strb	r3, [r7, #31]
 8004fb8:	e144      	b.n	8005244 <UART_SetConfig+0x348>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a83      	ldr	r2, [pc, #524]	; (80051cc <UART_SetConfig+0x2d0>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d132      	bne.n	800502a <UART_SetConfig+0x12e>
 8004fc4:	4b80      	ldr	r3, [pc, #512]	; (80051c8 <UART_SetConfig+0x2cc>)
 8004fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fca:	f003 030c 	and.w	r3, r3, #12
 8004fce:	2b0c      	cmp	r3, #12
 8004fd0:	d828      	bhi.n	8005024 <UART_SetConfig+0x128>
 8004fd2:	a201      	add	r2, pc, #4	; (adr r2, 8004fd8 <UART_SetConfig+0xdc>)
 8004fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd8:	0800500d 	.word	0x0800500d
 8004fdc:	08005025 	.word	0x08005025
 8004fe0:	08005025 	.word	0x08005025
 8004fe4:	08005025 	.word	0x08005025
 8004fe8:	08005019 	.word	0x08005019
 8004fec:	08005025 	.word	0x08005025
 8004ff0:	08005025 	.word	0x08005025
 8004ff4:	08005025 	.word	0x08005025
 8004ff8:	08005013 	.word	0x08005013
 8004ffc:	08005025 	.word	0x08005025
 8005000:	08005025 	.word	0x08005025
 8005004:	08005025 	.word	0x08005025
 8005008:	0800501f 	.word	0x0800501f
 800500c:	2300      	movs	r3, #0
 800500e:	77fb      	strb	r3, [r7, #31]
 8005010:	e118      	b.n	8005244 <UART_SetConfig+0x348>
 8005012:	2302      	movs	r3, #2
 8005014:	77fb      	strb	r3, [r7, #31]
 8005016:	e115      	b.n	8005244 <UART_SetConfig+0x348>
 8005018:	2304      	movs	r3, #4
 800501a:	77fb      	strb	r3, [r7, #31]
 800501c:	e112      	b.n	8005244 <UART_SetConfig+0x348>
 800501e:	2308      	movs	r3, #8
 8005020:	77fb      	strb	r3, [r7, #31]
 8005022:	e10f      	b.n	8005244 <UART_SetConfig+0x348>
 8005024:	2310      	movs	r3, #16
 8005026:	77fb      	strb	r3, [r7, #31]
 8005028:	e10c      	b.n	8005244 <UART_SetConfig+0x348>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a68      	ldr	r2, [pc, #416]	; (80051d0 <UART_SetConfig+0x2d4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d120      	bne.n	8005076 <UART_SetConfig+0x17a>
 8005034:	4b64      	ldr	r3, [pc, #400]	; (80051c8 <UART_SetConfig+0x2cc>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800503e:	2b30      	cmp	r3, #48	; 0x30
 8005040:	d013      	beq.n	800506a <UART_SetConfig+0x16e>
 8005042:	2b30      	cmp	r3, #48	; 0x30
 8005044:	d814      	bhi.n	8005070 <UART_SetConfig+0x174>
 8005046:	2b20      	cmp	r3, #32
 8005048:	d009      	beq.n	800505e <UART_SetConfig+0x162>
 800504a:	2b20      	cmp	r3, #32
 800504c:	d810      	bhi.n	8005070 <UART_SetConfig+0x174>
 800504e:	2b00      	cmp	r3, #0
 8005050:	d002      	beq.n	8005058 <UART_SetConfig+0x15c>
 8005052:	2b10      	cmp	r3, #16
 8005054:	d006      	beq.n	8005064 <UART_SetConfig+0x168>
 8005056:	e00b      	b.n	8005070 <UART_SetConfig+0x174>
 8005058:	2300      	movs	r3, #0
 800505a:	77fb      	strb	r3, [r7, #31]
 800505c:	e0f2      	b.n	8005244 <UART_SetConfig+0x348>
 800505e:	2302      	movs	r3, #2
 8005060:	77fb      	strb	r3, [r7, #31]
 8005062:	e0ef      	b.n	8005244 <UART_SetConfig+0x348>
 8005064:	2304      	movs	r3, #4
 8005066:	77fb      	strb	r3, [r7, #31]
 8005068:	e0ec      	b.n	8005244 <UART_SetConfig+0x348>
 800506a:	2308      	movs	r3, #8
 800506c:	77fb      	strb	r3, [r7, #31]
 800506e:	e0e9      	b.n	8005244 <UART_SetConfig+0x348>
 8005070:	2310      	movs	r3, #16
 8005072:	77fb      	strb	r3, [r7, #31]
 8005074:	e0e6      	b.n	8005244 <UART_SetConfig+0x348>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a56      	ldr	r2, [pc, #344]	; (80051d4 <UART_SetConfig+0x2d8>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d120      	bne.n	80050c2 <UART_SetConfig+0x1c6>
 8005080:	4b51      	ldr	r3, [pc, #324]	; (80051c8 <UART_SetConfig+0x2cc>)
 8005082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005086:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800508a:	2bc0      	cmp	r3, #192	; 0xc0
 800508c:	d013      	beq.n	80050b6 <UART_SetConfig+0x1ba>
 800508e:	2bc0      	cmp	r3, #192	; 0xc0
 8005090:	d814      	bhi.n	80050bc <UART_SetConfig+0x1c0>
 8005092:	2b80      	cmp	r3, #128	; 0x80
 8005094:	d009      	beq.n	80050aa <UART_SetConfig+0x1ae>
 8005096:	2b80      	cmp	r3, #128	; 0x80
 8005098:	d810      	bhi.n	80050bc <UART_SetConfig+0x1c0>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <UART_SetConfig+0x1a8>
 800509e:	2b40      	cmp	r3, #64	; 0x40
 80050a0:	d006      	beq.n	80050b0 <UART_SetConfig+0x1b4>
 80050a2:	e00b      	b.n	80050bc <UART_SetConfig+0x1c0>
 80050a4:	2300      	movs	r3, #0
 80050a6:	77fb      	strb	r3, [r7, #31]
 80050a8:	e0cc      	b.n	8005244 <UART_SetConfig+0x348>
 80050aa:	2302      	movs	r3, #2
 80050ac:	77fb      	strb	r3, [r7, #31]
 80050ae:	e0c9      	b.n	8005244 <UART_SetConfig+0x348>
 80050b0:	2304      	movs	r3, #4
 80050b2:	77fb      	strb	r3, [r7, #31]
 80050b4:	e0c6      	b.n	8005244 <UART_SetConfig+0x348>
 80050b6:	2308      	movs	r3, #8
 80050b8:	77fb      	strb	r3, [r7, #31]
 80050ba:	e0c3      	b.n	8005244 <UART_SetConfig+0x348>
 80050bc:	2310      	movs	r3, #16
 80050be:	77fb      	strb	r3, [r7, #31]
 80050c0:	e0c0      	b.n	8005244 <UART_SetConfig+0x348>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a44      	ldr	r2, [pc, #272]	; (80051d8 <UART_SetConfig+0x2dc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d125      	bne.n	8005118 <UART_SetConfig+0x21c>
 80050cc:	4b3e      	ldr	r3, [pc, #248]	; (80051c8 <UART_SetConfig+0x2cc>)
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050da:	d017      	beq.n	800510c <UART_SetConfig+0x210>
 80050dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e0:	d817      	bhi.n	8005112 <UART_SetConfig+0x216>
 80050e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e6:	d00b      	beq.n	8005100 <UART_SetConfig+0x204>
 80050e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ec:	d811      	bhi.n	8005112 <UART_SetConfig+0x216>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <UART_SetConfig+0x1fe>
 80050f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f6:	d006      	beq.n	8005106 <UART_SetConfig+0x20a>
 80050f8:	e00b      	b.n	8005112 <UART_SetConfig+0x216>
 80050fa:	2300      	movs	r3, #0
 80050fc:	77fb      	strb	r3, [r7, #31]
 80050fe:	e0a1      	b.n	8005244 <UART_SetConfig+0x348>
 8005100:	2302      	movs	r3, #2
 8005102:	77fb      	strb	r3, [r7, #31]
 8005104:	e09e      	b.n	8005244 <UART_SetConfig+0x348>
 8005106:	2304      	movs	r3, #4
 8005108:	77fb      	strb	r3, [r7, #31]
 800510a:	e09b      	b.n	8005244 <UART_SetConfig+0x348>
 800510c:	2308      	movs	r3, #8
 800510e:	77fb      	strb	r3, [r7, #31]
 8005110:	e098      	b.n	8005244 <UART_SetConfig+0x348>
 8005112:	2310      	movs	r3, #16
 8005114:	77fb      	strb	r3, [r7, #31]
 8005116:	e095      	b.n	8005244 <UART_SetConfig+0x348>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a2f      	ldr	r2, [pc, #188]	; (80051dc <UART_SetConfig+0x2e0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d125      	bne.n	800516e <UART_SetConfig+0x272>
 8005122:	4b29      	ldr	r3, [pc, #164]	; (80051c8 <UART_SetConfig+0x2cc>)
 8005124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005128:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800512c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005130:	d017      	beq.n	8005162 <UART_SetConfig+0x266>
 8005132:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005136:	d817      	bhi.n	8005168 <UART_SetConfig+0x26c>
 8005138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513c:	d00b      	beq.n	8005156 <UART_SetConfig+0x25a>
 800513e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005142:	d811      	bhi.n	8005168 <UART_SetConfig+0x26c>
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <UART_SetConfig+0x254>
 8005148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800514c:	d006      	beq.n	800515c <UART_SetConfig+0x260>
 800514e:	e00b      	b.n	8005168 <UART_SetConfig+0x26c>
 8005150:	2301      	movs	r3, #1
 8005152:	77fb      	strb	r3, [r7, #31]
 8005154:	e076      	b.n	8005244 <UART_SetConfig+0x348>
 8005156:	2302      	movs	r3, #2
 8005158:	77fb      	strb	r3, [r7, #31]
 800515a:	e073      	b.n	8005244 <UART_SetConfig+0x348>
 800515c:	2304      	movs	r3, #4
 800515e:	77fb      	strb	r3, [r7, #31]
 8005160:	e070      	b.n	8005244 <UART_SetConfig+0x348>
 8005162:	2308      	movs	r3, #8
 8005164:	77fb      	strb	r3, [r7, #31]
 8005166:	e06d      	b.n	8005244 <UART_SetConfig+0x348>
 8005168:	2310      	movs	r3, #16
 800516a:	77fb      	strb	r3, [r7, #31]
 800516c:	e06a      	b.n	8005244 <UART_SetConfig+0x348>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1b      	ldr	r2, [pc, #108]	; (80051e0 <UART_SetConfig+0x2e4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d138      	bne.n	80051ea <UART_SetConfig+0x2ee>
 8005178:	4b13      	ldr	r3, [pc, #76]	; (80051c8 <UART_SetConfig+0x2cc>)
 800517a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005182:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005186:	d017      	beq.n	80051b8 <UART_SetConfig+0x2bc>
 8005188:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800518c:	d82a      	bhi.n	80051e4 <UART_SetConfig+0x2e8>
 800518e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005192:	d00b      	beq.n	80051ac <UART_SetConfig+0x2b0>
 8005194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005198:	d824      	bhi.n	80051e4 <UART_SetConfig+0x2e8>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <UART_SetConfig+0x2aa>
 800519e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a2:	d006      	beq.n	80051b2 <UART_SetConfig+0x2b6>
 80051a4:	e01e      	b.n	80051e4 <UART_SetConfig+0x2e8>
 80051a6:	2300      	movs	r3, #0
 80051a8:	77fb      	strb	r3, [r7, #31]
 80051aa:	e04b      	b.n	8005244 <UART_SetConfig+0x348>
 80051ac:	2302      	movs	r3, #2
 80051ae:	77fb      	strb	r3, [r7, #31]
 80051b0:	e048      	b.n	8005244 <UART_SetConfig+0x348>
 80051b2:	2304      	movs	r3, #4
 80051b4:	77fb      	strb	r3, [r7, #31]
 80051b6:	e045      	b.n	8005244 <UART_SetConfig+0x348>
 80051b8:	2308      	movs	r3, #8
 80051ba:	77fb      	strb	r3, [r7, #31]
 80051bc:	e042      	b.n	8005244 <UART_SetConfig+0x348>
 80051be:	bf00      	nop
 80051c0:	efff69f3 	.word	0xefff69f3
 80051c4:	40011000 	.word	0x40011000
 80051c8:	40023800 	.word	0x40023800
 80051cc:	40004400 	.word	0x40004400
 80051d0:	40004800 	.word	0x40004800
 80051d4:	40004c00 	.word	0x40004c00
 80051d8:	40005000 	.word	0x40005000
 80051dc:	40011400 	.word	0x40011400
 80051e0:	40007800 	.word	0x40007800
 80051e4:	2310      	movs	r3, #16
 80051e6:	77fb      	strb	r3, [r7, #31]
 80051e8:	e02c      	b.n	8005244 <UART_SetConfig+0x348>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a72      	ldr	r2, [pc, #456]	; (80053b8 <UART_SetConfig+0x4bc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d125      	bne.n	8005240 <UART_SetConfig+0x344>
 80051f4:	4b71      	ldr	r3, [pc, #452]	; (80053bc <UART_SetConfig+0x4c0>)
 80051f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80051fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005202:	d017      	beq.n	8005234 <UART_SetConfig+0x338>
 8005204:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005208:	d817      	bhi.n	800523a <UART_SetConfig+0x33e>
 800520a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800520e:	d00b      	beq.n	8005228 <UART_SetConfig+0x32c>
 8005210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005214:	d811      	bhi.n	800523a <UART_SetConfig+0x33e>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <UART_SetConfig+0x326>
 800521a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800521e:	d006      	beq.n	800522e <UART_SetConfig+0x332>
 8005220:	e00b      	b.n	800523a <UART_SetConfig+0x33e>
 8005222:	2300      	movs	r3, #0
 8005224:	77fb      	strb	r3, [r7, #31]
 8005226:	e00d      	b.n	8005244 <UART_SetConfig+0x348>
 8005228:	2302      	movs	r3, #2
 800522a:	77fb      	strb	r3, [r7, #31]
 800522c:	e00a      	b.n	8005244 <UART_SetConfig+0x348>
 800522e:	2304      	movs	r3, #4
 8005230:	77fb      	strb	r3, [r7, #31]
 8005232:	e007      	b.n	8005244 <UART_SetConfig+0x348>
 8005234:	2308      	movs	r3, #8
 8005236:	77fb      	strb	r3, [r7, #31]
 8005238:	e004      	b.n	8005244 <UART_SetConfig+0x348>
 800523a:	2310      	movs	r3, #16
 800523c:	77fb      	strb	r3, [r7, #31]
 800523e:	e001      	b.n	8005244 <UART_SetConfig+0x348>
 8005240:	2310      	movs	r3, #16
 8005242:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800524c:	d15b      	bne.n	8005306 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800524e:	7ffb      	ldrb	r3, [r7, #31]
 8005250:	2b08      	cmp	r3, #8
 8005252:	d828      	bhi.n	80052a6 <UART_SetConfig+0x3aa>
 8005254:	a201      	add	r2, pc, #4	; (adr r2, 800525c <UART_SetConfig+0x360>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	08005281 	.word	0x08005281
 8005260:	08005289 	.word	0x08005289
 8005264:	08005291 	.word	0x08005291
 8005268:	080052a7 	.word	0x080052a7
 800526c:	08005297 	.word	0x08005297
 8005270:	080052a7 	.word	0x080052a7
 8005274:	080052a7 	.word	0x080052a7
 8005278:	080052a7 	.word	0x080052a7
 800527c:	0800529f 	.word	0x0800529f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005280:	f7fd fae0 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 8005284:	61b8      	str	r0, [r7, #24]
        break;
 8005286:	e013      	b.n	80052b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005288:	f7fd faf0 	bl	800286c <HAL_RCC_GetPCLK2Freq>
 800528c:	61b8      	str	r0, [r7, #24]
        break;
 800528e:	e00f      	b.n	80052b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005290:	4b4b      	ldr	r3, [pc, #300]	; (80053c0 <UART_SetConfig+0x4c4>)
 8005292:	61bb      	str	r3, [r7, #24]
        break;
 8005294:	e00c      	b.n	80052b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005296:	f7fd f9c3 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 800529a:	61b8      	str	r0, [r7, #24]
        break;
 800529c:	e008      	b.n	80052b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800529e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052a2:	61bb      	str	r3, [r7, #24]
        break;
 80052a4:	e004      	b.n	80052b0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	77bb      	strb	r3, [r7, #30]
        break;
 80052ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d074      	beq.n	80053a0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	005a      	lsls	r2, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	085b      	lsrs	r3, r3, #1
 80052c0:	441a      	add	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	2b0f      	cmp	r3, #15
 80052d0:	d916      	bls.n	8005300 <UART_SetConfig+0x404>
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d8:	d212      	bcs.n	8005300 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	f023 030f 	bic.w	r3, r3, #15
 80052e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	085b      	lsrs	r3, r3, #1
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	89fb      	ldrh	r3, [r7, #14]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	89fa      	ldrh	r2, [r7, #14]
 80052fc:	60da      	str	r2, [r3, #12]
 80052fe:	e04f      	b.n	80053a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	77bb      	strb	r3, [r7, #30]
 8005304:	e04c      	b.n	80053a0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005306:	7ffb      	ldrb	r3, [r7, #31]
 8005308:	2b08      	cmp	r3, #8
 800530a:	d828      	bhi.n	800535e <UART_SetConfig+0x462>
 800530c:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <UART_SetConfig+0x418>)
 800530e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005312:	bf00      	nop
 8005314:	08005339 	.word	0x08005339
 8005318:	08005341 	.word	0x08005341
 800531c:	08005349 	.word	0x08005349
 8005320:	0800535f 	.word	0x0800535f
 8005324:	0800534f 	.word	0x0800534f
 8005328:	0800535f 	.word	0x0800535f
 800532c:	0800535f 	.word	0x0800535f
 8005330:	0800535f 	.word	0x0800535f
 8005334:	08005357 	.word	0x08005357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005338:	f7fd fa84 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 800533c:	61b8      	str	r0, [r7, #24]
        break;
 800533e:	e013      	b.n	8005368 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005340:	f7fd fa94 	bl	800286c <HAL_RCC_GetPCLK2Freq>
 8005344:	61b8      	str	r0, [r7, #24]
        break;
 8005346:	e00f      	b.n	8005368 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005348:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <UART_SetConfig+0x4c4>)
 800534a:	61bb      	str	r3, [r7, #24]
        break;
 800534c:	e00c      	b.n	8005368 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800534e:	f7fd f967 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 8005352:	61b8      	str	r0, [r7, #24]
        break;
 8005354:	e008      	b.n	8005368 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800535a:	61bb      	str	r3, [r7, #24]
        break;
 800535c:	e004      	b.n	8005368 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	77bb      	strb	r3, [r7, #30]
        break;
 8005366:	bf00      	nop
    }

    if (pclk != 0U)
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d018      	beq.n	80053a0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	085a      	lsrs	r2, r3, #1
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	441a      	add	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005380:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	2b0f      	cmp	r3, #15
 8005386:	d909      	bls.n	800539c <UART_SetConfig+0x4a0>
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800538e:	d205      	bcs.n	800539c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	b29a      	uxth	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	60da      	str	r2, [r3, #12]
 800539a:	e001      	b.n	80053a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80053ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3720      	adds	r7, #32
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	40007c00 	.word	0x40007c00
 80053bc:	40023800 	.word	0x40023800
 80053c0:	00f42400 	.word	0x00f42400

080053c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	f003 0310 	and.w	r3, r3, #16
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	f003 0320 	and.w	r3, r3, #32
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d01a      	beq.n	80054da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054c2:	d10a      	bne.n	80054da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	605a      	str	r2, [r3, #4]
  }
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af02      	add	r7, sp, #8
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005518:	f7fc f93c 	bl	8001794 <HAL_GetTick>
 800551c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b08      	cmp	r3, #8
 800552a:	d10e      	bne.n	800554a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800552c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f831 	bl	80055a2 <UART_WaitOnFlagUntilTimeout>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e027      	b.n	800559a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b04      	cmp	r3, #4
 8005556:	d10e      	bne.n	8005576 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005558:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f81b 	bl	80055a2 <UART_WaitOnFlagUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e011      	b.n	800559a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2220      	movs	r2, #32
 800557a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b09c      	sub	sp, #112	; 0x70
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	603b      	str	r3, [r7, #0]
 80055ae:	4613      	mov	r3, r2
 80055b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b2:	e0a7      	b.n	8005704 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ba:	f000 80a3 	beq.w	8005704 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055be:	f7fc f8e9 	bl	8001794 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d302      	bcc.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80055ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d13f      	bne.n	8005654 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055e8:	667b      	str	r3, [r7, #100]	; 0x64
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055f4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e6      	bne.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3308      	adds	r3, #8
 800560c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	f023 0301 	bic.w	r3, r3, #1
 800561c:	663b      	str	r3, [r7, #96]	; 0x60
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3308      	adds	r3, #8
 8005624:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005626:	64ba      	str	r2, [r7, #72]	; 0x48
 8005628:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800562c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e5      	bne.n	8005606 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2220      	movs	r2, #32
 800563e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e068      	b.n	8005726 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0304 	and.w	r3, r3, #4
 800565e:	2b00      	cmp	r3, #0
 8005660:	d050      	beq.n	8005704 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800566c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005670:	d148      	bne.n	8005704 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800567a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005690:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800569a:	637b      	str	r3, [r7, #52]	; 0x34
 800569c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e6      	bne.n	800567c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3308      	adds	r3, #8
 80056b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	613b      	str	r3, [r7, #16]
   return(result);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3308      	adds	r3, #8
 80056cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056ce:	623a      	str	r2, [r7, #32]
 80056d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	69f9      	ldr	r1, [r7, #28]
 80056d4:	6a3a      	ldr	r2, [r7, #32]
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	61bb      	str	r3, [r7, #24]
   return(result);
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e5      	bne.n	80056ae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2220      	movs	r2, #32
 80056e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e010      	b.n	8005726 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	69da      	ldr	r2, [r3, #28]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	4013      	ands	r3, r2
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	429a      	cmp	r2, r3
 8005712:	bf0c      	ite	eq
 8005714:	2301      	moveq	r3, #1
 8005716:	2300      	movne	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	461a      	mov	r2, r3
 800571c:	79fb      	ldrb	r3, [r7, #7]
 800571e:	429a      	cmp	r2, r3
 8005720:	f43f af48 	beq.w	80055b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3770      	adds	r7, #112	; 0x70
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005730:	b480      	push	{r7}
 8005732:	b097      	sub	sp, #92	; 0x5c
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	4613      	mov	r3, r2
 800573c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	88fa      	ldrh	r2, [r7, #6]
 8005748:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	88fa      	ldrh	r2, [r7, #6]
 8005750:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005762:	d10e      	bne.n	8005782 <UART_Start_Receive_IT+0x52>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d105      	bne.n	8005778 <UART_Start_Receive_IT+0x48>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005772:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005776:	e02d      	b.n	80057d4 <UART_Start_Receive_IT+0xa4>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	22ff      	movs	r2, #255	; 0xff
 800577c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005780:	e028      	b.n	80057d4 <UART_Start_Receive_IT+0xa4>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10d      	bne.n	80057a6 <UART_Start_Receive_IT+0x76>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d104      	bne.n	800579c <UART_Start_Receive_IT+0x6c>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	22ff      	movs	r2, #255	; 0xff
 8005796:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800579a:	e01b      	b.n	80057d4 <UART_Start_Receive_IT+0xa4>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	227f      	movs	r2, #127	; 0x7f
 80057a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057a4:	e016      	b.n	80057d4 <UART_Start_Receive_IT+0xa4>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ae:	d10d      	bne.n	80057cc <UART_Start_Receive_IT+0x9c>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d104      	bne.n	80057c2 <UART_Start_Receive_IT+0x92>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	227f      	movs	r2, #127	; 0x7f
 80057bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057c0:	e008      	b.n	80057d4 <UART_Start_Receive_IT+0xa4>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	223f      	movs	r2, #63	; 0x3f
 80057c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057ca:	e003      	b.n	80057d4 <UART_Start_Receive_IT+0xa4>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2222      	movs	r2, #34	; 0x22
 80057e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3308      	adds	r3, #8
 80057ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f6:	f043 0301 	orr.w	r3, r3, #1
 80057fa:	657b      	str	r3, [r7, #84]	; 0x54
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3308      	adds	r3, #8
 8005802:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005804:	64ba      	str	r2, [r7, #72]	; 0x48
 8005806:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800580a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e5      	bne.n	80057e4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005820:	d107      	bne.n	8005832 <UART_Start_Receive_IT+0x102>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d103      	bne.n	8005832 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4a21      	ldr	r2, [pc, #132]	; (80058b4 <UART_Start_Receive_IT+0x184>)
 800582e:	669a      	str	r2, [r3, #104]	; 0x68
 8005830:	e002      	b.n	8005838 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4a20      	ldr	r2, [pc, #128]	; (80058b8 <UART_Start_Receive_IT+0x188>)
 8005836:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d019      	beq.n	8005874 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005854:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800585e:	637b      	str	r3, [r7, #52]	; 0x34
 8005860:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800586c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e6      	bne.n	8005840 <UART_Start_Receive_IT+0x110>
 8005872:	e018      	b.n	80058a6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	613b      	str	r3, [r7, #16]
   return(result);
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f043 0320 	orr.w	r3, r3, #32
 8005888:	653b      	str	r3, [r7, #80]	; 0x50
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005892:	623b      	str	r3, [r7, #32]
 8005894:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	69f9      	ldr	r1, [r7, #28]
 8005898:	6a3a      	ldr	r2, [r7, #32]
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	61bb      	str	r3, [r7, #24]
   return(result);
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e6      	bne.n	8005874 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	375c      	adds	r7, #92	; 0x5c
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	08005ce1 	.word	0x08005ce1
 80058b8:	08005b7b 	.word	0x08005b7b

080058bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b095      	sub	sp, #84	; 0x54
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058cc:	e853 3f00 	ldrex	r3, [r3]
 80058d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e2:	643b      	str	r3, [r7, #64]	; 0x40
 80058e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1e6      	bne.n	80058c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3308      	adds	r3, #8
 80058fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	e853 3f00 	ldrex	r3, [r3]
 8005904:	61fb      	str	r3, [r7, #28]
   return(result);
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	f023 0301 	bic.w	r3, r3, #1
 800590c:	64bb      	str	r3, [r7, #72]	; 0x48
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3308      	adds	r3, #8
 8005914:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005916:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005918:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800591c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e5      	bne.n	80058f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800592e:	2b01      	cmp	r3, #1
 8005930:	d118      	bne.n	8005964 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f023 0310 	bic.w	r3, r3, #16
 8005946:	647b      	str	r3, [r7, #68]	; 0x44
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	461a      	mov	r2, r3
 800594e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005950:	61bb      	str	r3, [r7, #24]
 8005952:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	6979      	ldr	r1, [r7, #20]
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	613b      	str	r3, [r7, #16]
   return(result);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e6      	bne.n	8005932 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2220      	movs	r2, #32
 8005968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005978:	bf00      	nop
 800597a:	3754      	adds	r7, #84	; 0x54
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005990:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f7ff fa8a 	bl	8004ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059a8:	bf00      	nop
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b08f      	sub	sp, #60	; 0x3c
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059bc:	2b21      	cmp	r3, #33	; 0x21
 80059be:	d14c      	bne.n	8005a5a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d132      	bne.n	8005a32 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059e0:	637b      	str	r3, [r7, #52]	; 0x34
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ec:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e6      	bne.n	80059cc <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a12:	633b      	str	r3, [r7, #48]	; 0x30
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	61bb      	str	r3, [r7, #24]
 8005a1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	6979      	ldr	r1, [r7, #20]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e6      	bne.n	80059fe <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005a30:	e013      	b.n	8005a5a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a36:	781a      	ldrb	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a42:	1c5a      	adds	r2, r3, #1
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	3b01      	subs	r3, #1
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005a5a:	bf00      	nop
 8005a5c:	373c      	adds	r7, #60	; 0x3c
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b091      	sub	sp, #68	; 0x44
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a72:	2b21      	cmp	r3, #33	; 0x21
 8005a74:	d151      	bne.n	8005b1a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d132      	bne.n	8005ae8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	e853 3f00 	ldrex	r3, [r3]
 8005a8e:	623b      	str	r3, [r7, #32]
   return(result);
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a96:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa0:	633b      	str	r3, [r7, #48]	; 0x30
 8005aa2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa8:	e841 2300 	strex	r3, r2, [r1]
 8005aac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e6      	bne.n	8005a82 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad2:	61fb      	str	r3, [r7, #28]
 8005ad4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	69b9      	ldr	r1, [r7, #24]
 8005ad8:	69fa      	ldr	r2, [r7, #28]
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	617b      	str	r3, [r7, #20]
   return(result);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e6      	bne.n	8005ab4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005ae6:	e018      	b.n	8005b1a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aec:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005afc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b02:	1c9a      	adds	r2, r3, #2
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005b1a:	bf00      	nop
 8005b1c:	3744      	adds	r7, #68	; 0x44
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b088      	sub	sp, #32
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	e853 3f00 	ldrex	r3, [r3]
 8005b3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	61bb      	str	r3, [r7, #24]
 8005b4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b50:	6979      	ldr	r1, [r7, #20]
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	e841 2300 	strex	r3, r2, [r1]
 8005b58:	613b      	str	r3, [r7, #16]
   return(result);
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e6      	bne.n	8005b2e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2220      	movs	r2, #32
 8005b64:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7fb f9e9 	bl	8000f44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b72:	bf00      	nop
 8005b74:	3720      	adds	r7, #32
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b096      	sub	sp, #88	; 0x58
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b88:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b92:	2b22      	cmp	r3, #34	; 0x22
 8005b94:	f040 8098 	bne.w	8005cc8 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ba2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005ba6:	b2d9      	uxtb	r1, r3
 8005ba8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb2:	400a      	ands	r2, r1
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d17b      	bne.n	8005cd8 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bf4:	653b      	str	r3, [r7, #80]	; 0x50
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8005c00:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e6      	bne.n	8005be0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3308      	adds	r3, #8
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	623b      	str	r3, [r7, #32]
   return(result);
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	f023 0301 	bic.w	r3, r3, #1
 8005c28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3308      	adds	r3, #8
 8005c30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c32:	633a      	str	r2, [r7, #48]	; 0x30
 8005c34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1e5      	bne.n	8005c12 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d12e      	bne.n	8005cc0 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f023 0310 	bic.w	r3, r3, #16
 8005c7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	461a      	mov	r2, r3
 8005c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c86:	61fb      	str	r3, [r7, #28]
 8005c88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	69b9      	ldr	r1, [r7, #24]
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	617b      	str	r3, [r7, #20]
   return(result);
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e6      	bne.n	8005c68 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	f003 0310 	and.w	r3, r3, #16
 8005ca4:	2b10      	cmp	r3, #16
 8005ca6:	d103      	bne.n	8005cb0 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2210      	movs	r2, #16
 8005cae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff f909 	bl	8004ed0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cbe:	e00b      	b.n	8005cd8 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7fb f8bb 	bl	8000e3c <HAL_UART_RxCpltCallback>
}
 8005cc6:	e007      	b.n	8005cd8 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699a      	ldr	r2, [r3, #24]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f042 0208 	orr.w	r2, r2, #8
 8005cd6:	619a      	str	r2, [r3, #24]
}
 8005cd8:	bf00      	nop
 8005cda:	3758      	adds	r7, #88	; 0x58
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b096      	sub	sp, #88	; 0x58
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cee:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cf8:	2b22      	cmp	r3, #34	; 0x22
 8005cfa:	f040 8098 	bne.w	8005e2e <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005d0e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005d12:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005d16:	4013      	ands	r3, r2
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d1c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d22:	1c9a      	adds	r2, r3, #2
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d17b      	bne.n	8005e3e <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4e:	e853 3f00 	ldrex	r3, [r3]
 8005d52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	461a      	mov	r2, r3
 8005d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d64:	643b      	str	r3, [r7, #64]	; 0x40
 8005d66:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d6c:	e841 2300 	strex	r3, r2, [r1]
 8005d70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e6      	bne.n	8005d46 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3308      	adds	r3, #8
 8005d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	e853 3f00 	ldrex	r3, [r3]
 8005d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	f023 0301 	bic.w	r3, r3, #1
 8005d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3308      	adds	r3, #8
 8005d96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005da0:	e841 2300 	strex	r3, r2, [r1]
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e5      	bne.n	8005d78 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2220      	movs	r2, #32
 8005db0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d12e      	bne.n	8005e26 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f023 0310 	bic.w	r3, r3, #16
 8005de2:	647b      	str	r3, [r7, #68]	; 0x44
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	461a      	mov	r2, r3
 8005dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dec:	61bb      	str	r3, [r7, #24]
 8005dee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	6979      	ldr	r1, [r7, #20]
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	e841 2300 	strex	r3, r2, [r1]
 8005df8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e6      	bne.n	8005dce <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	2b10      	cmp	r3, #16
 8005e0c:	d103      	bne.n	8005e16 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2210      	movs	r2, #16
 8005e14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff f856 	bl	8004ed0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e24:	e00b      	b.n	8005e3e <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fb f808 	bl	8000e3c <HAL_UART_RxCpltCallback>
}
 8005e2c:	e007      	b.n	8005e3e <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	699a      	ldr	r2, [r3, #24]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0208 	orr.w	r2, r2, #8
 8005e3c:	619a      	str	r2, [r3, #24]
}
 8005e3e:	bf00      	nop
 8005e40:	3758      	adds	r7, #88	; 0x58
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <__errno>:
 8005e48:	4b01      	ldr	r3, [pc, #4]	; (8005e50 <__errno+0x8>)
 8005e4a:	6818      	ldr	r0, [r3, #0]
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	20000010 	.word	0x20000010

08005e54 <__libc_init_array>:
 8005e54:	b570      	push	{r4, r5, r6, lr}
 8005e56:	4d0d      	ldr	r5, [pc, #52]	; (8005e8c <__libc_init_array+0x38>)
 8005e58:	4c0d      	ldr	r4, [pc, #52]	; (8005e90 <__libc_init_array+0x3c>)
 8005e5a:	1b64      	subs	r4, r4, r5
 8005e5c:	10a4      	asrs	r4, r4, #2
 8005e5e:	2600      	movs	r6, #0
 8005e60:	42a6      	cmp	r6, r4
 8005e62:	d109      	bne.n	8005e78 <__libc_init_array+0x24>
 8005e64:	4d0b      	ldr	r5, [pc, #44]	; (8005e94 <__libc_init_array+0x40>)
 8005e66:	4c0c      	ldr	r4, [pc, #48]	; (8005e98 <__libc_init_array+0x44>)
 8005e68:	f001 f9d0 	bl	800720c <_init>
 8005e6c:	1b64      	subs	r4, r4, r5
 8005e6e:	10a4      	asrs	r4, r4, #2
 8005e70:	2600      	movs	r6, #0
 8005e72:	42a6      	cmp	r6, r4
 8005e74:	d105      	bne.n	8005e82 <__libc_init_array+0x2e>
 8005e76:	bd70      	pop	{r4, r5, r6, pc}
 8005e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e7c:	4798      	blx	r3
 8005e7e:	3601      	adds	r6, #1
 8005e80:	e7ee      	b.n	8005e60 <__libc_init_array+0xc>
 8005e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e86:	4798      	blx	r3
 8005e88:	3601      	adds	r6, #1
 8005e8a:	e7f2      	b.n	8005e72 <__libc_init_array+0x1e>
 8005e8c:	080074f8 	.word	0x080074f8
 8005e90:	080074f8 	.word	0x080074f8
 8005e94:	080074f8 	.word	0x080074f8
 8005e98:	080074fc 	.word	0x080074fc

08005e9c <malloc>:
 8005e9c:	4b02      	ldr	r3, [pc, #8]	; (8005ea8 <malloc+0xc>)
 8005e9e:	4601      	mov	r1, r0
 8005ea0:	6818      	ldr	r0, [r3, #0]
 8005ea2:	f000 b877 	b.w	8005f94 <_malloc_r>
 8005ea6:	bf00      	nop
 8005ea8:	20000010 	.word	0x20000010

08005eac <memset>:
 8005eac:	4402      	add	r2, r0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d100      	bne.n	8005eb6 <memset+0xa>
 8005eb4:	4770      	bx	lr
 8005eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eba:	e7f9      	b.n	8005eb0 <memset+0x4>

08005ebc <_free_r>:
 8005ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ebe:	2900      	cmp	r1, #0
 8005ec0:	d044      	beq.n	8005f4c <_free_r+0x90>
 8005ec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ec6:	9001      	str	r0, [sp, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f1a1 0404 	sub.w	r4, r1, #4
 8005ece:	bfb8      	it	lt
 8005ed0:	18e4      	addlt	r4, r4, r3
 8005ed2:	f000 fce9 	bl	80068a8 <__malloc_lock>
 8005ed6:	4a1e      	ldr	r2, [pc, #120]	; (8005f50 <_free_r+0x94>)
 8005ed8:	9801      	ldr	r0, [sp, #4]
 8005eda:	6813      	ldr	r3, [r2, #0]
 8005edc:	b933      	cbnz	r3, 8005eec <_free_r+0x30>
 8005ede:	6063      	str	r3, [r4, #4]
 8005ee0:	6014      	str	r4, [r2, #0]
 8005ee2:	b003      	add	sp, #12
 8005ee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ee8:	f000 bce4 	b.w	80068b4 <__malloc_unlock>
 8005eec:	42a3      	cmp	r3, r4
 8005eee:	d908      	bls.n	8005f02 <_free_r+0x46>
 8005ef0:	6825      	ldr	r5, [r4, #0]
 8005ef2:	1961      	adds	r1, r4, r5
 8005ef4:	428b      	cmp	r3, r1
 8005ef6:	bf01      	itttt	eq
 8005ef8:	6819      	ldreq	r1, [r3, #0]
 8005efa:	685b      	ldreq	r3, [r3, #4]
 8005efc:	1949      	addeq	r1, r1, r5
 8005efe:	6021      	streq	r1, [r4, #0]
 8005f00:	e7ed      	b.n	8005ede <_free_r+0x22>
 8005f02:	461a      	mov	r2, r3
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	b10b      	cbz	r3, 8005f0c <_free_r+0x50>
 8005f08:	42a3      	cmp	r3, r4
 8005f0a:	d9fa      	bls.n	8005f02 <_free_r+0x46>
 8005f0c:	6811      	ldr	r1, [r2, #0]
 8005f0e:	1855      	adds	r5, r2, r1
 8005f10:	42a5      	cmp	r5, r4
 8005f12:	d10b      	bne.n	8005f2c <_free_r+0x70>
 8005f14:	6824      	ldr	r4, [r4, #0]
 8005f16:	4421      	add	r1, r4
 8005f18:	1854      	adds	r4, r2, r1
 8005f1a:	42a3      	cmp	r3, r4
 8005f1c:	6011      	str	r1, [r2, #0]
 8005f1e:	d1e0      	bne.n	8005ee2 <_free_r+0x26>
 8005f20:	681c      	ldr	r4, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	6053      	str	r3, [r2, #4]
 8005f26:	4421      	add	r1, r4
 8005f28:	6011      	str	r1, [r2, #0]
 8005f2a:	e7da      	b.n	8005ee2 <_free_r+0x26>
 8005f2c:	d902      	bls.n	8005f34 <_free_r+0x78>
 8005f2e:	230c      	movs	r3, #12
 8005f30:	6003      	str	r3, [r0, #0]
 8005f32:	e7d6      	b.n	8005ee2 <_free_r+0x26>
 8005f34:	6825      	ldr	r5, [r4, #0]
 8005f36:	1961      	adds	r1, r4, r5
 8005f38:	428b      	cmp	r3, r1
 8005f3a:	bf04      	itt	eq
 8005f3c:	6819      	ldreq	r1, [r3, #0]
 8005f3e:	685b      	ldreq	r3, [r3, #4]
 8005f40:	6063      	str	r3, [r4, #4]
 8005f42:	bf04      	itt	eq
 8005f44:	1949      	addeq	r1, r1, r5
 8005f46:	6021      	streq	r1, [r4, #0]
 8005f48:	6054      	str	r4, [r2, #4]
 8005f4a:	e7ca      	b.n	8005ee2 <_free_r+0x26>
 8005f4c:	b003      	add	sp, #12
 8005f4e:	bd30      	pop	{r4, r5, pc}
 8005f50:	2000063c 	.word	0x2000063c

08005f54 <sbrk_aligned>:
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	4e0e      	ldr	r6, [pc, #56]	; (8005f90 <sbrk_aligned+0x3c>)
 8005f58:	460c      	mov	r4, r1
 8005f5a:	6831      	ldr	r1, [r6, #0]
 8005f5c:	4605      	mov	r5, r0
 8005f5e:	b911      	cbnz	r1, 8005f66 <sbrk_aligned+0x12>
 8005f60:	f000 f88c 	bl	800607c <_sbrk_r>
 8005f64:	6030      	str	r0, [r6, #0]
 8005f66:	4621      	mov	r1, r4
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f000 f887 	bl	800607c <_sbrk_r>
 8005f6e:	1c43      	adds	r3, r0, #1
 8005f70:	d00a      	beq.n	8005f88 <sbrk_aligned+0x34>
 8005f72:	1cc4      	adds	r4, r0, #3
 8005f74:	f024 0403 	bic.w	r4, r4, #3
 8005f78:	42a0      	cmp	r0, r4
 8005f7a:	d007      	beq.n	8005f8c <sbrk_aligned+0x38>
 8005f7c:	1a21      	subs	r1, r4, r0
 8005f7e:	4628      	mov	r0, r5
 8005f80:	f000 f87c 	bl	800607c <_sbrk_r>
 8005f84:	3001      	adds	r0, #1
 8005f86:	d101      	bne.n	8005f8c <sbrk_aligned+0x38>
 8005f88:	f04f 34ff 	mov.w	r4, #4294967295
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}
 8005f90:	20000640 	.word	0x20000640

08005f94 <_malloc_r>:
 8005f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f98:	1ccd      	adds	r5, r1, #3
 8005f9a:	f025 0503 	bic.w	r5, r5, #3
 8005f9e:	3508      	adds	r5, #8
 8005fa0:	2d0c      	cmp	r5, #12
 8005fa2:	bf38      	it	cc
 8005fa4:	250c      	movcc	r5, #12
 8005fa6:	2d00      	cmp	r5, #0
 8005fa8:	4607      	mov	r7, r0
 8005faa:	db01      	blt.n	8005fb0 <_malloc_r+0x1c>
 8005fac:	42a9      	cmp	r1, r5
 8005fae:	d905      	bls.n	8005fbc <_malloc_r+0x28>
 8005fb0:	230c      	movs	r3, #12
 8005fb2:	603b      	str	r3, [r7, #0]
 8005fb4:	2600      	movs	r6, #0
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fbc:	4e2e      	ldr	r6, [pc, #184]	; (8006078 <_malloc_r+0xe4>)
 8005fbe:	f000 fc73 	bl	80068a8 <__malloc_lock>
 8005fc2:	6833      	ldr	r3, [r6, #0]
 8005fc4:	461c      	mov	r4, r3
 8005fc6:	bb34      	cbnz	r4, 8006016 <_malloc_r+0x82>
 8005fc8:	4629      	mov	r1, r5
 8005fca:	4638      	mov	r0, r7
 8005fcc:	f7ff ffc2 	bl	8005f54 <sbrk_aligned>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	d14d      	bne.n	8006072 <_malloc_r+0xde>
 8005fd6:	6834      	ldr	r4, [r6, #0]
 8005fd8:	4626      	mov	r6, r4
 8005fda:	2e00      	cmp	r6, #0
 8005fdc:	d140      	bne.n	8006060 <_malloc_r+0xcc>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	eb04 0803 	add.w	r8, r4, r3
 8005fe8:	f000 f848 	bl	800607c <_sbrk_r>
 8005fec:	4580      	cmp	r8, r0
 8005fee:	d13a      	bne.n	8006066 <_malloc_r+0xd2>
 8005ff0:	6821      	ldr	r1, [r4, #0]
 8005ff2:	3503      	adds	r5, #3
 8005ff4:	1a6d      	subs	r5, r5, r1
 8005ff6:	f025 0503 	bic.w	r5, r5, #3
 8005ffa:	3508      	adds	r5, #8
 8005ffc:	2d0c      	cmp	r5, #12
 8005ffe:	bf38      	it	cc
 8006000:	250c      	movcc	r5, #12
 8006002:	4629      	mov	r1, r5
 8006004:	4638      	mov	r0, r7
 8006006:	f7ff ffa5 	bl	8005f54 <sbrk_aligned>
 800600a:	3001      	adds	r0, #1
 800600c:	d02b      	beq.n	8006066 <_malloc_r+0xd2>
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	442b      	add	r3, r5
 8006012:	6023      	str	r3, [r4, #0]
 8006014:	e00e      	b.n	8006034 <_malloc_r+0xa0>
 8006016:	6822      	ldr	r2, [r4, #0]
 8006018:	1b52      	subs	r2, r2, r5
 800601a:	d41e      	bmi.n	800605a <_malloc_r+0xc6>
 800601c:	2a0b      	cmp	r2, #11
 800601e:	d916      	bls.n	800604e <_malloc_r+0xba>
 8006020:	1961      	adds	r1, r4, r5
 8006022:	42a3      	cmp	r3, r4
 8006024:	6025      	str	r5, [r4, #0]
 8006026:	bf18      	it	ne
 8006028:	6059      	strne	r1, [r3, #4]
 800602a:	6863      	ldr	r3, [r4, #4]
 800602c:	bf08      	it	eq
 800602e:	6031      	streq	r1, [r6, #0]
 8006030:	5162      	str	r2, [r4, r5]
 8006032:	604b      	str	r3, [r1, #4]
 8006034:	4638      	mov	r0, r7
 8006036:	f104 060b 	add.w	r6, r4, #11
 800603a:	f000 fc3b 	bl	80068b4 <__malloc_unlock>
 800603e:	f026 0607 	bic.w	r6, r6, #7
 8006042:	1d23      	adds	r3, r4, #4
 8006044:	1af2      	subs	r2, r6, r3
 8006046:	d0b6      	beq.n	8005fb6 <_malloc_r+0x22>
 8006048:	1b9b      	subs	r3, r3, r6
 800604a:	50a3      	str	r3, [r4, r2]
 800604c:	e7b3      	b.n	8005fb6 <_malloc_r+0x22>
 800604e:	6862      	ldr	r2, [r4, #4]
 8006050:	42a3      	cmp	r3, r4
 8006052:	bf0c      	ite	eq
 8006054:	6032      	streq	r2, [r6, #0]
 8006056:	605a      	strne	r2, [r3, #4]
 8006058:	e7ec      	b.n	8006034 <_malloc_r+0xa0>
 800605a:	4623      	mov	r3, r4
 800605c:	6864      	ldr	r4, [r4, #4]
 800605e:	e7b2      	b.n	8005fc6 <_malloc_r+0x32>
 8006060:	4634      	mov	r4, r6
 8006062:	6876      	ldr	r6, [r6, #4]
 8006064:	e7b9      	b.n	8005fda <_malloc_r+0x46>
 8006066:	230c      	movs	r3, #12
 8006068:	603b      	str	r3, [r7, #0]
 800606a:	4638      	mov	r0, r7
 800606c:	f000 fc22 	bl	80068b4 <__malloc_unlock>
 8006070:	e7a1      	b.n	8005fb6 <_malloc_r+0x22>
 8006072:	6025      	str	r5, [r4, #0]
 8006074:	e7de      	b.n	8006034 <_malloc_r+0xa0>
 8006076:	bf00      	nop
 8006078:	2000063c 	.word	0x2000063c

0800607c <_sbrk_r>:
 800607c:	b538      	push	{r3, r4, r5, lr}
 800607e:	4d06      	ldr	r5, [pc, #24]	; (8006098 <_sbrk_r+0x1c>)
 8006080:	2300      	movs	r3, #0
 8006082:	4604      	mov	r4, r0
 8006084:	4608      	mov	r0, r1
 8006086:	602b      	str	r3, [r5, #0]
 8006088:	f7fb f820 	bl	80010cc <_sbrk>
 800608c:	1c43      	adds	r3, r0, #1
 800608e:	d102      	bne.n	8006096 <_sbrk_r+0x1a>
 8006090:	682b      	ldr	r3, [r5, #0]
 8006092:	b103      	cbz	r3, 8006096 <_sbrk_r+0x1a>
 8006094:	6023      	str	r3, [r4, #0]
 8006096:	bd38      	pop	{r3, r4, r5, pc}
 8006098:	20000648 	.word	0x20000648

0800609c <setvbuf>:
 800609c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060a0:	461d      	mov	r5, r3
 80060a2:	4b5d      	ldr	r3, [pc, #372]	; (8006218 <setvbuf+0x17c>)
 80060a4:	681f      	ldr	r7, [r3, #0]
 80060a6:	4604      	mov	r4, r0
 80060a8:	460e      	mov	r6, r1
 80060aa:	4690      	mov	r8, r2
 80060ac:	b127      	cbz	r7, 80060b8 <setvbuf+0x1c>
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	b913      	cbnz	r3, 80060b8 <setvbuf+0x1c>
 80060b2:	4638      	mov	r0, r7
 80060b4:	f000 fae0 	bl	8006678 <__sinit>
 80060b8:	4b58      	ldr	r3, [pc, #352]	; (800621c <setvbuf+0x180>)
 80060ba:	429c      	cmp	r4, r3
 80060bc:	d167      	bne.n	800618e <setvbuf+0xf2>
 80060be:	687c      	ldr	r4, [r7, #4]
 80060c0:	f1b8 0f02 	cmp.w	r8, #2
 80060c4:	d006      	beq.n	80060d4 <setvbuf+0x38>
 80060c6:	f1b8 0f01 	cmp.w	r8, #1
 80060ca:	f200 809f 	bhi.w	800620c <setvbuf+0x170>
 80060ce:	2d00      	cmp	r5, #0
 80060d0:	f2c0 809c 	blt.w	800620c <setvbuf+0x170>
 80060d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060d6:	07db      	lsls	r3, r3, #31
 80060d8:	d405      	bmi.n	80060e6 <setvbuf+0x4a>
 80060da:	89a3      	ldrh	r3, [r4, #12]
 80060dc:	0598      	lsls	r0, r3, #22
 80060de:	d402      	bmi.n	80060e6 <setvbuf+0x4a>
 80060e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060e2:	f000 fb79 	bl	80067d8 <__retarget_lock_acquire_recursive>
 80060e6:	4621      	mov	r1, r4
 80060e8:	4638      	mov	r0, r7
 80060ea:	f000 fa31 	bl	8006550 <_fflush_r>
 80060ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060f0:	b141      	cbz	r1, 8006104 <setvbuf+0x68>
 80060f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060f6:	4299      	cmp	r1, r3
 80060f8:	d002      	beq.n	8006100 <setvbuf+0x64>
 80060fa:	4638      	mov	r0, r7
 80060fc:	f7ff fede 	bl	8005ebc <_free_r>
 8006100:	2300      	movs	r3, #0
 8006102:	6363      	str	r3, [r4, #52]	; 0x34
 8006104:	2300      	movs	r3, #0
 8006106:	61a3      	str	r3, [r4, #24]
 8006108:	6063      	str	r3, [r4, #4]
 800610a:	89a3      	ldrh	r3, [r4, #12]
 800610c:	0619      	lsls	r1, r3, #24
 800610e:	d503      	bpl.n	8006118 <setvbuf+0x7c>
 8006110:	6921      	ldr	r1, [r4, #16]
 8006112:	4638      	mov	r0, r7
 8006114:	f7ff fed2 	bl	8005ebc <_free_r>
 8006118:	89a3      	ldrh	r3, [r4, #12]
 800611a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800611e:	f023 0303 	bic.w	r3, r3, #3
 8006122:	f1b8 0f02 	cmp.w	r8, #2
 8006126:	81a3      	strh	r3, [r4, #12]
 8006128:	d06c      	beq.n	8006204 <setvbuf+0x168>
 800612a:	ab01      	add	r3, sp, #4
 800612c:	466a      	mov	r2, sp
 800612e:	4621      	mov	r1, r4
 8006130:	4638      	mov	r0, r7
 8006132:	f000 fb53 	bl	80067dc <__swhatbuf_r>
 8006136:	89a3      	ldrh	r3, [r4, #12]
 8006138:	4318      	orrs	r0, r3
 800613a:	81a0      	strh	r0, [r4, #12]
 800613c:	2d00      	cmp	r5, #0
 800613e:	d130      	bne.n	80061a2 <setvbuf+0x106>
 8006140:	9d00      	ldr	r5, [sp, #0]
 8006142:	4628      	mov	r0, r5
 8006144:	f7ff feaa 	bl	8005e9c <malloc>
 8006148:	4606      	mov	r6, r0
 800614a:	2800      	cmp	r0, #0
 800614c:	d155      	bne.n	80061fa <setvbuf+0x15e>
 800614e:	f8dd 9000 	ldr.w	r9, [sp]
 8006152:	45a9      	cmp	r9, r5
 8006154:	d14a      	bne.n	80061ec <setvbuf+0x150>
 8006156:	f04f 35ff 	mov.w	r5, #4294967295
 800615a:	2200      	movs	r2, #0
 800615c:	60a2      	str	r2, [r4, #8]
 800615e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006162:	6022      	str	r2, [r4, #0]
 8006164:	6122      	str	r2, [r4, #16]
 8006166:	2201      	movs	r2, #1
 8006168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800616c:	6162      	str	r2, [r4, #20]
 800616e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006170:	f043 0302 	orr.w	r3, r3, #2
 8006174:	07d2      	lsls	r2, r2, #31
 8006176:	81a3      	strh	r3, [r4, #12]
 8006178:	d405      	bmi.n	8006186 <setvbuf+0xea>
 800617a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800617e:	d102      	bne.n	8006186 <setvbuf+0xea>
 8006180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006182:	f000 fb2a 	bl	80067da <__retarget_lock_release_recursive>
 8006186:	4628      	mov	r0, r5
 8006188:	b003      	add	sp, #12
 800618a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800618e:	4b24      	ldr	r3, [pc, #144]	; (8006220 <setvbuf+0x184>)
 8006190:	429c      	cmp	r4, r3
 8006192:	d101      	bne.n	8006198 <setvbuf+0xfc>
 8006194:	68bc      	ldr	r4, [r7, #8]
 8006196:	e793      	b.n	80060c0 <setvbuf+0x24>
 8006198:	4b22      	ldr	r3, [pc, #136]	; (8006224 <setvbuf+0x188>)
 800619a:	429c      	cmp	r4, r3
 800619c:	bf08      	it	eq
 800619e:	68fc      	ldreq	r4, [r7, #12]
 80061a0:	e78e      	b.n	80060c0 <setvbuf+0x24>
 80061a2:	2e00      	cmp	r6, #0
 80061a4:	d0cd      	beq.n	8006142 <setvbuf+0xa6>
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	b913      	cbnz	r3, 80061b0 <setvbuf+0x114>
 80061aa:	4638      	mov	r0, r7
 80061ac:	f000 fa64 	bl	8006678 <__sinit>
 80061b0:	f1b8 0f01 	cmp.w	r8, #1
 80061b4:	bf08      	it	eq
 80061b6:	89a3      	ldrheq	r3, [r4, #12]
 80061b8:	6026      	str	r6, [r4, #0]
 80061ba:	bf04      	itt	eq
 80061bc:	f043 0301 	orreq.w	r3, r3, #1
 80061c0:	81a3      	strheq	r3, [r4, #12]
 80061c2:	89a2      	ldrh	r2, [r4, #12]
 80061c4:	f012 0308 	ands.w	r3, r2, #8
 80061c8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80061cc:	d01c      	beq.n	8006208 <setvbuf+0x16c>
 80061ce:	07d3      	lsls	r3, r2, #31
 80061d0:	bf41      	itttt	mi
 80061d2:	2300      	movmi	r3, #0
 80061d4:	426d      	negmi	r5, r5
 80061d6:	60a3      	strmi	r3, [r4, #8]
 80061d8:	61a5      	strmi	r5, [r4, #24]
 80061da:	bf58      	it	pl
 80061dc:	60a5      	strpl	r5, [r4, #8]
 80061de:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80061e0:	f015 0501 	ands.w	r5, r5, #1
 80061e4:	d115      	bne.n	8006212 <setvbuf+0x176>
 80061e6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80061ea:	e7c8      	b.n	800617e <setvbuf+0xe2>
 80061ec:	4648      	mov	r0, r9
 80061ee:	f7ff fe55 	bl	8005e9c <malloc>
 80061f2:	4606      	mov	r6, r0
 80061f4:	2800      	cmp	r0, #0
 80061f6:	d0ae      	beq.n	8006156 <setvbuf+0xba>
 80061f8:	464d      	mov	r5, r9
 80061fa:	89a3      	ldrh	r3, [r4, #12]
 80061fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006200:	81a3      	strh	r3, [r4, #12]
 8006202:	e7d0      	b.n	80061a6 <setvbuf+0x10a>
 8006204:	2500      	movs	r5, #0
 8006206:	e7a8      	b.n	800615a <setvbuf+0xbe>
 8006208:	60a3      	str	r3, [r4, #8]
 800620a:	e7e8      	b.n	80061de <setvbuf+0x142>
 800620c:	f04f 35ff 	mov.w	r5, #4294967295
 8006210:	e7b9      	b.n	8006186 <setvbuf+0xea>
 8006212:	2500      	movs	r5, #0
 8006214:	e7b7      	b.n	8006186 <setvbuf+0xea>
 8006216:	bf00      	nop
 8006218:	20000010 	.word	0x20000010
 800621c:	0800747c 	.word	0x0800747c
 8006220:	0800749c 	.word	0x0800749c
 8006224:	0800745c 	.word	0x0800745c

08006228 <strcpy>:
 8006228:	4603      	mov	r3, r0
 800622a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800622e:	f803 2b01 	strb.w	r2, [r3], #1
 8006232:	2a00      	cmp	r2, #0
 8006234:	d1f9      	bne.n	800622a <strcpy+0x2>
 8006236:	4770      	bx	lr

08006238 <strtok>:
 8006238:	4b16      	ldr	r3, [pc, #88]	; (8006294 <strtok+0x5c>)
 800623a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800623c:	681e      	ldr	r6, [r3, #0]
 800623e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006240:	4605      	mov	r5, r0
 8006242:	b9fc      	cbnz	r4, 8006284 <strtok+0x4c>
 8006244:	2050      	movs	r0, #80	; 0x50
 8006246:	9101      	str	r1, [sp, #4]
 8006248:	f7ff fe28 	bl	8005e9c <malloc>
 800624c:	9901      	ldr	r1, [sp, #4]
 800624e:	65b0      	str	r0, [r6, #88]	; 0x58
 8006250:	4602      	mov	r2, r0
 8006252:	b920      	cbnz	r0, 800625e <strtok+0x26>
 8006254:	4b10      	ldr	r3, [pc, #64]	; (8006298 <strtok+0x60>)
 8006256:	4811      	ldr	r0, [pc, #68]	; (800629c <strtok+0x64>)
 8006258:	2157      	movs	r1, #87	; 0x57
 800625a:	f000 f8d5 	bl	8006408 <__assert_func>
 800625e:	e9c0 4400 	strd	r4, r4, [r0]
 8006262:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006266:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800626a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800626e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006272:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006276:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800627a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800627e:	6184      	str	r4, [r0, #24]
 8006280:	7704      	strb	r4, [r0, #28]
 8006282:	6244      	str	r4, [r0, #36]	; 0x24
 8006284:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006286:	2301      	movs	r3, #1
 8006288:	4628      	mov	r0, r5
 800628a:	b002      	add	sp, #8
 800628c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006290:	f000 b806 	b.w	80062a0 <__strtok_r>
 8006294:	20000010 	.word	0x20000010
 8006298:	080072a8 	.word	0x080072a8
 800629c:	080072bf 	.word	0x080072bf

080062a0 <__strtok_r>:
 80062a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062a2:	b908      	cbnz	r0, 80062a8 <__strtok_r+0x8>
 80062a4:	6810      	ldr	r0, [r2, #0]
 80062a6:	b188      	cbz	r0, 80062cc <__strtok_r+0x2c>
 80062a8:	4604      	mov	r4, r0
 80062aa:	4620      	mov	r0, r4
 80062ac:	f814 5b01 	ldrb.w	r5, [r4], #1
 80062b0:	460f      	mov	r7, r1
 80062b2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80062b6:	b91e      	cbnz	r6, 80062c0 <__strtok_r+0x20>
 80062b8:	b965      	cbnz	r5, 80062d4 <__strtok_r+0x34>
 80062ba:	6015      	str	r5, [r2, #0]
 80062bc:	4628      	mov	r0, r5
 80062be:	e005      	b.n	80062cc <__strtok_r+0x2c>
 80062c0:	42b5      	cmp	r5, r6
 80062c2:	d1f6      	bne.n	80062b2 <__strtok_r+0x12>
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1f0      	bne.n	80062aa <__strtok_r+0xa>
 80062c8:	6014      	str	r4, [r2, #0]
 80062ca:	7003      	strb	r3, [r0, #0]
 80062cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ce:	461c      	mov	r4, r3
 80062d0:	e00c      	b.n	80062ec <__strtok_r+0x4c>
 80062d2:	b915      	cbnz	r5, 80062da <__strtok_r+0x3a>
 80062d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80062d8:	460e      	mov	r6, r1
 80062da:	f816 5b01 	ldrb.w	r5, [r6], #1
 80062de:	42ab      	cmp	r3, r5
 80062e0:	d1f7      	bne.n	80062d2 <__strtok_r+0x32>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0f3      	beq.n	80062ce <__strtok_r+0x2e>
 80062e6:	2300      	movs	r3, #0
 80062e8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80062ec:	6014      	str	r4, [r2, #0]
 80062ee:	e7ed      	b.n	80062cc <__strtok_r+0x2c>

080062f0 <_strtol_l.constprop.0>:
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062f6:	d001      	beq.n	80062fc <_strtol_l.constprop.0+0xc>
 80062f8:	2b24      	cmp	r3, #36	; 0x24
 80062fa:	d906      	bls.n	800630a <_strtol_l.constprop.0+0x1a>
 80062fc:	f7ff fda4 	bl	8005e48 <__errno>
 8006300:	2316      	movs	r3, #22
 8006302:	6003      	str	r3, [r0, #0]
 8006304:	2000      	movs	r0, #0
 8006306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800630a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80063f0 <_strtol_l.constprop.0+0x100>
 800630e:	460d      	mov	r5, r1
 8006310:	462e      	mov	r6, r5
 8006312:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006316:	f814 700c 	ldrb.w	r7, [r4, ip]
 800631a:	f017 0708 	ands.w	r7, r7, #8
 800631e:	d1f7      	bne.n	8006310 <_strtol_l.constprop.0+0x20>
 8006320:	2c2d      	cmp	r4, #45	; 0x2d
 8006322:	d132      	bne.n	800638a <_strtol_l.constprop.0+0x9a>
 8006324:	782c      	ldrb	r4, [r5, #0]
 8006326:	2701      	movs	r7, #1
 8006328:	1cb5      	adds	r5, r6, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d05b      	beq.n	80063e6 <_strtol_l.constprop.0+0xf6>
 800632e:	2b10      	cmp	r3, #16
 8006330:	d109      	bne.n	8006346 <_strtol_l.constprop.0+0x56>
 8006332:	2c30      	cmp	r4, #48	; 0x30
 8006334:	d107      	bne.n	8006346 <_strtol_l.constprop.0+0x56>
 8006336:	782c      	ldrb	r4, [r5, #0]
 8006338:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800633c:	2c58      	cmp	r4, #88	; 0x58
 800633e:	d14d      	bne.n	80063dc <_strtol_l.constprop.0+0xec>
 8006340:	786c      	ldrb	r4, [r5, #1]
 8006342:	2310      	movs	r3, #16
 8006344:	3502      	adds	r5, #2
 8006346:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800634a:	f108 38ff 	add.w	r8, r8, #4294967295
 800634e:	f04f 0c00 	mov.w	ip, #0
 8006352:	fbb8 f9f3 	udiv	r9, r8, r3
 8006356:	4666      	mov	r6, ip
 8006358:	fb03 8a19 	mls	sl, r3, r9, r8
 800635c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006360:	f1be 0f09 	cmp.w	lr, #9
 8006364:	d816      	bhi.n	8006394 <_strtol_l.constprop.0+0xa4>
 8006366:	4674      	mov	r4, lr
 8006368:	42a3      	cmp	r3, r4
 800636a:	dd24      	ble.n	80063b6 <_strtol_l.constprop.0+0xc6>
 800636c:	f1bc 0f00 	cmp.w	ip, #0
 8006370:	db1e      	blt.n	80063b0 <_strtol_l.constprop.0+0xc0>
 8006372:	45b1      	cmp	r9, r6
 8006374:	d31c      	bcc.n	80063b0 <_strtol_l.constprop.0+0xc0>
 8006376:	d101      	bne.n	800637c <_strtol_l.constprop.0+0x8c>
 8006378:	45a2      	cmp	sl, r4
 800637a:	db19      	blt.n	80063b0 <_strtol_l.constprop.0+0xc0>
 800637c:	fb06 4603 	mla	r6, r6, r3, r4
 8006380:	f04f 0c01 	mov.w	ip, #1
 8006384:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006388:	e7e8      	b.n	800635c <_strtol_l.constprop.0+0x6c>
 800638a:	2c2b      	cmp	r4, #43	; 0x2b
 800638c:	bf04      	itt	eq
 800638e:	782c      	ldrbeq	r4, [r5, #0]
 8006390:	1cb5      	addeq	r5, r6, #2
 8006392:	e7ca      	b.n	800632a <_strtol_l.constprop.0+0x3a>
 8006394:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006398:	f1be 0f19 	cmp.w	lr, #25
 800639c:	d801      	bhi.n	80063a2 <_strtol_l.constprop.0+0xb2>
 800639e:	3c37      	subs	r4, #55	; 0x37
 80063a0:	e7e2      	b.n	8006368 <_strtol_l.constprop.0+0x78>
 80063a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80063a6:	f1be 0f19 	cmp.w	lr, #25
 80063aa:	d804      	bhi.n	80063b6 <_strtol_l.constprop.0+0xc6>
 80063ac:	3c57      	subs	r4, #87	; 0x57
 80063ae:	e7db      	b.n	8006368 <_strtol_l.constprop.0+0x78>
 80063b0:	f04f 3cff 	mov.w	ip, #4294967295
 80063b4:	e7e6      	b.n	8006384 <_strtol_l.constprop.0+0x94>
 80063b6:	f1bc 0f00 	cmp.w	ip, #0
 80063ba:	da05      	bge.n	80063c8 <_strtol_l.constprop.0+0xd8>
 80063bc:	2322      	movs	r3, #34	; 0x22
 80063be:	6003      	str	r3, [r0, #0]
 80063c0:	4646      	mov	r6, r8
 80063c2:	b942      	cbnz	r2, 80063d6 <_strtol_l.constprop.0+0xe6>
 80063c4:	4630      	mov	r0, r6
 80063c6:	e79e      	b.n	8006306 <_strtol_l.constprop.0+0x16>
 80063c8:	b107      	cbz	r7, 80063cc <_strtol_l.constprop.0+0xdc>
 80063ca:	4276      	negs	r6, r6
 80063cc:	2a00      	cmp	r2, #0
 80063ce:	d0f9      	beq.n	80063c4 <_strtol_l.constprop.0+0xd4>
 80063d0:	f1bc 0f00 	cmp.w	ip, #0
 80063d4:	d000      	beq.n	80063d8 <_strtol_l.constprop.0+0xe8>
 80063d6:	1e69      	subs	r1, r5, #1
 80063d8:	6011      	str	r1, [r2, #0]
 80063da:	e7f3      	b.n	80063c4 <_strtol_l.constprop.0+0xd4>
 80063dc:	2430      	movs	r4, #48	; 0x30
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1b1      	bne.n	8006346 <_strtol_l.constprop.0+0x56>
 80063e2:	2308      	movs	r3, #8
 80063e4:	e7af      	b.n	8006346 <_strtol_l.constprop.0+0x56>
 80063e6:	2c30      	cmp	r4, #48	; 0x30
 80063e8:	d0a5      	beq.n	8006336 <_strtol_l.constprop.0+0x46>
 80063ea:	230a      	movs	r3, #10
 80063ec:	e7ab      	b.n	8006346 <_strtol_l.constprop.0+0x56>
 80063ee:	bf00      	nop
 80063f0:	08007359 	.word	0x08007359

080063f4 <strtol>:
 80063f4:	4613      	mov	r3, r2
 80063f6:	460a      	mov	r2, r1
 80063f8:	4601      	mov	r1, r0
 80063fa:	4802      	ldr	r0, [pc, #8]	; (8006404 <strtol+0x10>)
 80063fc:	6800      	ldr	r0, [r0, #0]
 80063fe:	f7ff bf77 	b.w	80062f0 <_strtol_l.constprop.0>
 8006402:	bf00      	nop
 8006404:	20000010 	.word	0x20000010

08006408 <__assert_func>:
 8006408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800640a:	4614      	mov	r4, r2
 800640c:	461a      	mov	r2, r3
 800640e:	4b09      	ldr	r3, [pc, #36]	; (8006434 <__assert_func+0x2c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4605      	mov	r5, r0
 8006414:	68d8      	ldr	r0, [r3, #12]
 8006416:	b14c      	cbz	r4, 800642c <__assert_func+0x24>
 8006418:	4b07      	ldr	r3, [pc, #28]	; (8006438 <__assert_func+0x30>)
 800641a:	9100      	str	r1, [sp, #0]
 800641c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006420:	4906      	ldr	r1, [pc, #24]	; (800643c <__assert_func+0x34>)
 8006422:	462b      	mov	r3, r5
 8006424:	f000 f9a6 	bl	8006774 <fiprintf>
 8006428:	f000 fe4e 	bl	80070c8 <abort>
 800642c:	4b04      	ldr	r3, [pc, #16]	; (8006440 <__assert_func+0x38>)
 800642e:	461c      	mov	r4, r3
 8006430:	e7f3      	b.n	800641a <__assert_func+0x12>
 8006432:	bf00      	nop
 8006434:	20000010 	.word	0x20000010
 8006438:	0800731c 	.word	0x0800731c
 800643c:	08007329 	.word	0x08007329
 8006440:	08007357 	.word	0x08007357

08006444 <__sflush_r>:
 8006444:	898a      	ldrh	r2, [r1, #12]
 8006446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800644a:	4605      	mov	r5, r0
 800644c:	0710      	lsls	r0, r2, #28
 800644e:	460c      	mov	r4, r1
 8006450:	d458      	bmi.n	8006504 <__sflush_r+0xc0>
 8006452:	684b      	ldr	r3, [r1, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	dc05      	bgt.n	8006464 <__sflush_r+0x20>
 8006458:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800645a:	2b00      	cmp	r3, #0
 800645c:	dc02      	bgt.n	8006464 <__sflush_r+0x20>
 800645e:	2000      	movs	r0, #0
 8006460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006464:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006466:	2e00      	cmp	r6, #0
 8006468:	d0f9      	beq.n	800645e <__sflush_r+0x1a>
 800646a:	2300      	movs	r3, #0
 800646c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006470:	682f      	ldr	r7, [r5, #0]
 8006472:	602b      	str	r3, [r5, #0]
 8006474:	d032      	beq.n	80064dc <__sflush_r+0x98>
 8006476:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006478:	89a3      	ldrh	r3, [r4, #12]
 800647a:	075a      	lsls	r2, r3, #29
 800647c:	d505      	bpl.n	800648a <__sflush_r+0x46>
 800647e:	6863      	ldr	r3, [r4, #4]
 8006480:	1ac0      	subs	r0, r0, r3
 8006482:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006484:	b10b      	cbz	r3, 800648a <__sflush_r+0x46>
 8006486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006488:	1ac0      	subs	r0, r0, r3
 800648a:	2300      	movs	r3, #0
 800648c:	4602      	mov	r2, r0
 800648e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006490:	6a21      	ldr	r1, [r4, #32]
 8006492:	4628      	mov	r0, r5
 8006494:	47b0      	blx	r6
 8006496:	1c43      	adds	r3, r0, #1
 8006498:	89a3      	ldrh	r3, [r4, #12]
 800649a:	d106      	bne.n	80064aa <__sflush_r+0x66>
 800649c:	6829      	ldr	r1, [r5, #0]
 800649e:	291d      	cmp	r1, #29
 80064a0:	d82c      	bhi.n	80064fc <__sflush_r+0xb8>
 80064a2:	4a2a      	ldr	r2, [pc, #168]	; (800654c <__sflush_r+0x108>)
 80064a4:	40ca      	lsrs	r2, r1
 80064a6:	07d6      	lsls	r6, r2, #31
 80064a8:	d528      	bpl.n	80064fc <__sflush_r+0xb8>
 80064aa:	2200      	movs	r2, #0
 80064ac:	6062      	str	r2, [r4, #4]
 80064ae:	04d9      	lsls	r1, r3, #19
 80064b0:	6922      	ldr	r2, [r4, #16]
 80064b2:	6022      	str	r2, [r4, #0]
 80064b4:	d504      	bpl.n	80064c0 <__sflush_r+0x7c>
 80064b6:	1c42      	adds	r2, r0, #1
 80064b8:	d101      	bne.n	80064be <__sflush_r+0x7a>
 80064ba:	682b      	ldr	r3, [r5, #0]
 80064bc:	b903      	cbnz	r3, 80064c0 <__sflush_r+0x7c>
 80064be:	6560      	str	r0, [r4, #84]	; 0x54
 80064c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064c2:	602f      	str	r7, [r5, #0]
 80064c4:	2900      	cmp	r1, #0
 80064c6:	d0ca      	beq.n	800645e <__sflush_r+0x1a>
 80064c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064cc:	4299      	cmp	r1, r3
 80064ce:	d002      	beq.n	80064d6 <__sflush_r+0x92>
 80064d0:	4628      	mov	r0, r5
 80064d2:	f7ff fcf3 	bl	8005ebc <_free_r>
 80064d6:	2000      	movs	r0, #0
 80064d8:	6360      	str	r0, [r4, #52]	; 0x34
 80064da:	e7c1      	b.n	8006460 <__sflush_r+0x1c>
 80064dc:	6a21      	ldr	r1, [r4, #32]
 80064de:	2301      	movs	r3, #1
 80064e0:	4628      	mov	r0, r5
 80064e2:	47b0      	blx	r6
 80064e4:	1c41      	adds	r1, r0, #1
 80064e6:	d1c7      	bne.n	8006478 <__sflush_r+0x34>
 80064e8:	682b      	ldr	r3, [r5, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d0c4      	beq.n	8006478 <__sflush_r+0x34>
 80064ee:	2b1d      	cmp	r3, #29
 80064f0:	d001      	beq.n	80064f6 <__sflush_r+0xb2>
 80064f2:	2b16      	cmp	r3, #22
 80064f4:	d101      	bne.n	80064fa <__sflush_r+0xb6>
 80064f6:	602f      	str	r7, [r5, #0]
 80064f8:	e7b1      	b.n	800645e <__sflush_r+0x1a>
 80064fa:	89a3      	ldrh	r3, [r4, #12]
 80064fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006500:	81a3      	strh	r3, [r4, #12]
 8006502:	e7ad      	b.n	8006460 <__sflush_r+0x1c>
 8006504:	690f      	ldr	r7, [r1, #16]
 8006506:	2f00      	cmp	r7, #0
 8006508:	d0a9      	beq.n	800645e <__sflush_r+0x1a>
 800650a:	0793      	lsls	r3, r2, #30
 800650c:	680e      	ldr	r6, [r1, #0]
 800650e:	bf08      	it	eq
 8006510:	694b      	ldreq	r3, [r1, #20]
 8006512:	600f      	str	r7, [r1, #0]
 8006514:	bf18      	it	ne
 8006516:	2300      	movne	r3, #0
 8006518:	eba6 0807 	sub.w	r8, r6, r7
 800651c:	608b      	str	r3, [r1, #8]
 800651e:	f1b8 0f00 	cmp.w	r8, #0
 8006522:	dd9c      	ble.n	800645e <__sflush_r+0x1a>
 8006524:	6a21      	ldr	r1, [r4, #32]
 8006526:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006528:	4643      	mov	r3, r8
 800652a:	463a      	mov	r2, r7
 800652c:	4628      	mov	r0, r5
 800652e:	47b0      	blx	r6
 8006530:	2800      	cmp	r0, #0
 8006532:	dc06      	bgt.n	8006542 <__sflush_r+0xfe>
 8006534:	89a3      	ldrh	r3, [r4, #12]
 8006536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800653a:	81a3      	strh	r3, [r4, #12]
 800653c:	f04f 30ff 	mov.w	r0, #4294967295
 8006540:	e78e      	b.n	8006460 <__sflush_r+0x1c>
 8006542:	4407      	add	r7, r0
 8006544:	eba8 0800 	sub.w	r8, r8, r0
 8006548:	e7e9      	b.n	800651e <__sflush_r+0xda>
 800654a:	bf00      	nop
 800654c:	20400001 	.word	0x20400001

08006550 <_fflush_r>:
 8006550:	b538      	push	{r3, r4, r5, lr}
 8006552:	690b      	ldr	r3, [r1, #16]
 8006554:	4605      	mov	r5, r0
 8006556:	460c      	mov	r4, r1
 8006558:	b913      	cbnz	r3, 8006560 <_fflush_r+0x10>
 800655a:	2500      	movs	r5, #0
 800655c:	4628      	mov	r0, r5
 800655e:	bd38      	pop	{r3, r4, r5, pc}
 8006560:	b118      	cbz	r0, 800656a <_fflush_r+0x1a>
 8006562:	6983      	ldr	r3, [r0, #24]
 8006564:	b90b      	cbnz	r3, 800656a <_fflush_r+0x1a>
 8006566:	f000 f887 	bl	8006678 <__sinit>
 800656a:	4b14      	ldr	r3, [pc, #80]	; (80065bc <_fflush_r+0x6c>)
 800656c:	429c      	cmp	r4, r3
 800656e:	d11b      	bne.n	80065a8 <_fflush_r+0x58>
 8006570:	686c      	ldr	r4, [r5, #4]
 8006572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0ef      	beq.n	800655a <_fflush_r+0xa>
 800657a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800657c:	07d0      	lsls	r0, r2, #31
 800657e:	d404      	bmi.n	800658a <_fflush_r+0x3a>
 8006580:	0599      	lsls	r1, r3, #22
 8006582:	d402      	bmi.n	800658a <_fflush_r+0x3a>
 8006584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006586:	f000 f927 	bl	80067d8 <__retarget_lock_acquire_recursive>
 800658a:	4628      	mov	r0, r5
 800658c:	4621      	mov	r1, r4
 800658e:	f7ff ff59 	bl	8006444 <__sflush_r>
 8006592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006594:	07da      	lsls	r2, r3, #31
 8006596:	4605      	mov	r5, r0
 8006598:	d4e0      	bmi.n	800655c <_fflush_r+0xc>
 800659a:	89a3      	ldrh	r3, [r4, #12]
 800659c:	059b      	lsls	r3, r3, #22
 800659e:	d4dd      	bmi.n	800655c <_fflush_r+0xc>
 80065a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065a2:	f000 f91a 	bl	80067da <__retarget_lock_release_recursive>
 80065a6:	e7d9      	b.n	800655c <_fflush_r+0xc>
 80065a8:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <_fflush_r+0x70>)
 80065aa:	429c      	cmp	r4, r3
 80065ac:	d101      	bne.n	80065b2 <_fflush_r+0x62>
 80065ae:	68ac      	ldr	r4, [r5, #8]
 80065b0:	e7df      	b.n	8006572 <_fflush_r+0x22>
 80065b2:	4b04      	ldr	r3, [pc, #16]	; (80065c4 <_fflush_r+0x74>)
 80065b4:	429c      	cmp	r4, r3
 80065b6:	bf08      	it	eq
 80065b8:	68ec      	ldreq	r4, [r5, #12]
 80065ba:	e7da      	b.n	8006572 <_fflush_r+0x22>
 80065bc:	0800747c 	.word	0x0800747c
 80065c0:	0800749c 	.word	0x0800749c
 80065c4:	0800745c 	.word	0x0800745c

080065c8 <std>:
 80065c8:	2300      	movs	r3, #0
 80065ca:	b510      	push	{r4, lr}
 80065cc:	4604      	mov	r4, r0
 80065ce:	e9c0 3300 	strd	r3, r3, [r0]
 80065d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065d6:	6083      	str	r3, [r0, #8]
 80065d8:	8181      	strh	r1, [r0, #12]
 80065da:	6643      	str	r3, [r0, #100]	; 0x64
 80065dc:	81c2      	strh	r2, [r0, #14]
 80065de:	6183      	str	r3, [r0, #24]
 80065e0:	4619      	mov	r1, r3
 80065e2:	2208      	movs	r2, #8
 80065e4:	305c      	adds	r0, #92	; 0x5c
 80065e6:	f7ff fc61 	bl	8005eac <memset>
 80065ea:	4b05      	ldr	r3, [pc, #20]	; (8006600 <std+0x38>)
 80065ec:	6263      	str	r3, [r4, #36]	; 0x24
 80065ee:	4b05      	ldr	r3, [pc, #20]	; (8006604 <std+0x3c>)
 80065f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80065f2:	4b05      	ldr	r3, [pc, #20]	; (8006608 <std+0x40>)
 80065f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065f6:	4b05      	ldr	r3, [pc, #20]	; (800660c <std+0x44>)
 80065f8:	6224      	str	r4, [r4, #32]
 80065fa:	6323      	str	r3, [r4, #48]	; 0x30
 80065fc:	bd10      	pop	{r4, pc}
 80065fe:	bf00      	nop
 8006600:	08006e9d 	.word	0x08006e9d
 8006604:	08006ebf 	.word	0x08006ebf
 8006608:	08006ef7 	.word	0x08006ef7
 800660c:	08006f1b 	.word	0x08006f1b

08006610 <_cleanup_r>:
 8006610:	4901      	ldr	r1, [pc, #4]	; (8006618 <_cleanup_r+0x8>)
 8006612:	f000 b8c1 	b.w	8006798 <_fwalk_reent>
 8006616:	bf00      	nop
 8006618:	08006551 	.word	0x08006551

0800661c <__sfmoreglue>:
 800661c:	b570      	push	{r4, r5, r6, lr}
 800661e:	2268      	movs	r2, #104	; 0x68
 8006620:	1e4d      	subs	r5, r1, #1
 8006622:	4355      	muls	r5, r2
 8006624:	460e      	mov	r6, r1
 8006626:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800662a:	f7ff fcb3 	bl	8005f94 <_malloc_r>
 800662e:	4604      	mov	r4, r0
 8006630:	b140      	cbz	r0, 8006644 <__sfmoreglue+0x28>
 8006632:	2100      	movs	r1, #0
 8006634:	e9c0 1600 	strd	r1, r6, [r0]
 8006638:	300c      	adds	r0, #12
 800663a:	60a0      	str	r0, [r4, #8]
 800663c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006640:	f7ff fc34 	bl	8005eac <memset>
 8006644:	4620      	mov	r0, r4
 8006646:	bd70      	pop	{r4, r5, r6, pc}

08006648 <__sfp_lock_acquire>:
 8006648:	4801      	ldr	r0, [pc, #4]	; (8006650 <__sfp_lock_acquire+0x8>)
 800664a:	f000 b8c5 	b.w	80067d8 <__retarget_lock_acquire_recursive>
 800664e:	bf00      	nop
 8006650:	20000645 	.word	0x20000645

08006654 <__sfp_lock_release>:
 8006654:	4801      	ldr	r0, [pc, #4]	; (800665c <__sfp_lock_release+0x8>)
 8006656:	f000 b8c0 	b.w	80067da <__retarget_lock_release_recursive>
 800665a:	bf00      	nop
 800665c:	20000645 	.word	0x20000645

08006660 <__sinit_lock_acquire>:
 8006660:	4801      	ldr	r0, [pc, #4]	; (8006668 <__sinit_lock_acquire+0x8>)
 8006662:	f000 b8b9 	b.w	80067d8 <__retarget_lock_acquire_recursive>
 8006666:	bf00      	nop
 8006668:	20000646 	.word	0x20000646

0800666c <__sinit_lock_release>:
 800666c:	4801      	ldr	r0, [pc, #4]	; (8006674 <__sinit_lock_release+0x8>)
 800666e:	f000 b8b4 	b.w	80067da <__retarget_lock_release_recursive>
 8006672:	bf00      	nop
 8006674:	20000646 	.word	0x20000646

08006678 <__sinit>:
 8006678:	b510      	push	{r4, lr}
 800667a:	4604      	mov	r4, r0
 800667c:	f7ff fff0 	bl	8006660 <__sinit_lock_acquire>
 8006680:	69a3      	ldr	r3, [r4, #24]
 8006682:	b11b      	cbz	r3, 800668c <__sinit+0x14>
 8006684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006688:	f7ff bff0 	b.w	800666c <__sinit_lock_release>
 800668c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006690:	6523      	str	r3, [r4, #80]	; 0x50
 8006692:	4b13      	ldr	r3, [pc, #76]	; (80066e0 <__sinit+0x68>)
 8006694:	4a13      	ldr	r2, [pc, #76]	; (80066e4 <__sinit+0x6c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	62a2      	str	r2, [r4, #40]	; 0x28
 800669a:	42a3      	cmp	r3, r4
 800669c:	bf04      	itt	eq
 800669e:	2301      	moveq	r3, #1
 80066a0:	61a3      	streq	r3, [r4, #24]
 80066a2:	4620      	mov	r0, r4
 80066a4:	f000 f820 	bl	80066e8 <__sfp>
 80066a8:	6060      	str	r0, [r4, #4]
 80066aa:	4620      	mov	r0, r4
 80066ac:	f000 f81c 	bl	80066e8 <__sfp>
 80066b0:	60a0      	str	r0, [r4, #8]
 80066b2:	4620      	mov	r0, r4
 80066b4:	f000 f818 	bl	80066e8 <__sfp>
 80066b8:	2200      	movs	r2, #0
 80066ba:	60e0      	str	r0, [r4, #12]
 80066bc:	2104      	movs	r1, #4
 80066be:	6860      	ldr	r0, [r4, #4]
 80066c0:	f7ff ff82 	bl	80065c8 <std>
 80066c4:	68a0      	ldr	r0, [r4, #8]
 80066c6:	2201      	movs	r2, #1
 80066c8:	2109      	movs	r1, #9
 80066ca:	f7ff ff7d 	bl	80065c8 <std>
 80066ce:	68e0      	ldr	r0, [r4, #12]
 80066d0:	2202      	movs	r2, #2
 80066d2:	2112      	movs	r1, #18
 80066d4:	f7ff ff78 	bl	80065c8 <std>
 80066d8:	2301      	movs	r3, #1
 80066da:	61a3      	str	r3, [r4, #24]
 80066dc:	e7d2      	b.n	8006684 <__sinit+0xc>
 80066de:	bf00      	nop
 80066e0:	080072a4 	.word	0x080072a4
 80066e4:	08006611 	.word	0x08006611

080066e8 <__sfp>:
 80066e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ea:	4607      	mov	r7, r0
 80066ec:	f7ff ffac 	bl	8006648 <__sfp_lock_acquire>
 80066f0:	4b1e      	ldr	r3, [pc, #120]	; (800676c <__sfp+0x84>)
 80066f2:	681e      	ldr	r6, [r3, #0]
 80066f4:	69b3      	ldr	r3, [r6, #24]
 80066f6:	b913      	cbnz	r3, 80066fe <__sfp+0x16>
 80066f8:	4630      	mov	r0, r6
 80066fa:	f7ff ffbd 	bl	8006678 <__sinit>
 80066fe:	3648      	adds	r6, #72	; 0x48
 8006700:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006704:	3b01      	subs	r3, #1
 8006706:	d503      	bpl.n	8006710 <__sfp+0x28>
 8006708:	6833      	ldr	r3, [r6, #0]
 800670a:	b30b      	cbz	r3, 8006750 <__sfp+0x68>
 800670c:	6836      	ldr	r6, [r6, #0]
 800670e:	e7f7      	b.n	8006700 <__sfp+0x18>
 8006710:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006714:	b9d5      	cbnz	r5, 800674c <__sfp+0x64>
 8006716:	4b16      	ldr	r3, [pc, #88]	; (8006770 <__sfp+0x88>)
 8006718:	60e3      	str	r3, [r4, #12]
 800671a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800671e:	6665      	str	r5, [r4, #100]	; 0x64
 8006720:	f000 f859 	bl	80067d6 <__retarget_lock_init_recursive>
 8006724:	f7ff ff96 	bl	8006654 <__sfp_lock_release>
 8006728:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800672c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006730:	6025      	str	r5, [r4, #0]
 8006732:	61a5      	str	r5, [r4, #24]
 8006734:	2208      	movs	r2, #8
 8006736:	4629      	mov	r1, r5
 8006738:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800673c:	f7ff fbb6 	bl	8005eac <memset>
 8006740:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006744:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006748:	4620      	mov	r0, r4
 800674a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800674c:	3468      	adds	r4, #104	; 0x68
 800674e:	e7d9      	b.n	8006704 <__sfp+0x1c>
 8006750:	2104      	movs	r1, #4
 8006752:	4638      	mov	r0, r7
 8006754:	f7ff ff62 	bl	800661c <__sfmoreglue>
 8006758:	4604      	mov	r4, r0
 800675a:	6030      	str	r0, [r6, #0]
 800675c:	2800      	cmp	r0, #0
 800675e:	d1d5      	bne.n	800670c <__sfp+0x24>
 8006760:	f7ff ff78 	bl	8006654 <__sfp_lock_release>
 8006764:	230c      	movs	r3, #12
 8006766:	603b      	str	r3, [r7, #0]
 8006768:	e7ee      	b.n	8006748 <__sfp+0x60>
 800676a:	bf00      	nop
 800676c:	080072a4 	.word	0x080072a4
 8006770:	ffff0001 	.word	0xffff0001

08006774 <fiprintf>:
 8006774:	b40e      	push	{r1, r2, r3}
 8006776:	b503      	push	{r0, r1, lr}
 8006778:	4601      	mov	r1, r0
 800677a:	ab03      	add	r3, sp, #12
 800677c:	4805      	ldr	r0, [pc, #20]	; (8006794 <fiprintf+0x20>)
 800677e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006782:	6800      	ldr	r0, [r0, #0]
 8006784:	9301      	str	r3, [sp, #4]
 8006786:	f000 f8c5 	bl	8006914 <_vfiprintf_r>
 800678a:	b002      	add	sp, #8
 800678c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006790:	b003      	add	sp, #12
 8006792:	4770      	bx	lr
 8006794:	20000010 	.word	0x20000010

08006798 <_fwalk_reent>:
 8006798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800679c:	4606      	mov	r6, r0
 800679e:	4688      	mov	r8, r1
 80067a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80067a4:	2700      	movs	r7, #0
 80067a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067aa:	f1b9 0901 	subs.w	r9, r9, #1
 80067ae:	d505      	bpl.n	80067bc <_fwalk_reent+0x24>
 80067b0:	6824      	ldr	r4, [r4, #0]
 80067b2:	2c00      	cmp	r4, #0
 80067b4:	d1f7      	bne.n	80067a6 <_fwalk_reent+0xe>
 80067b6:	4638      	mov	r0, r7
 80067b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067bc:	89ab      	ldrh	r3, [r5, #12]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d907      	bls.n	80067d2 <_fwalk_reent+0x3a>
 80067c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067c6:	3301      	adds	r3, #1
 80067c8:	d003      	beq.n	80067d2 <_fwalk_reent+0x3a>
 80067ca:	4629      	mov	r1, r5
 80067cc:	4630      	mov	r0, r6
 80067ce:	47c0      	blx	r8
 80067d0:	4307      	orrs	r7, r0
 80067d2:	3568      	adds	r5, #104	; 0x68
 80067d4:	e7e9      	b.n	80067aa <_fwalk_reent+0x12>

080067d6 <__retarget_lock_init_recursive>:
 80067d6:	4770      	bx	lr

080067d8 <__retarget_lock_acquire_recursive>:
 80067d8:	4770      	bx	lr

080067da <__retarget_lock_release_recursive>:
 80067da:	4770      	bx	lr

080067dc <__swhatbuf_r>:
 80067dc:	b570      	push	{r4, r5, r6, lr}
 80067de:	460e      	mov	r6, r1
 80067e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e4:	2900      	cmp	r1, #0
 80067e6:	b096      	sub	sp, #88	; 0x58
 80067e8:	4614      	mov	r4, r2
 80067ea:	461d      	mov	r5, r3
 80067ec:	da08      	bge.n	8006800 <__swhatbuf_r+0x24>
 80067ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	602a      	str	r2, [r5, #0]
 80067f6:	061a      	lsls	r2, r3, #24
 80067f8:	d410      	bmi.n	800681c <__swhatbuf_r+0x40>
 80067fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067fe:	e00e      	b.n	800681e <__swhatbuf_r+0x42>
 8006800:	466a      	mov	r2, sp
 8006802:	f000 fc79 	bl	80070f8 <_fstat_r>
 8006806:	2800      	cmp	r0, #0
 8006808:	dbf1      	blt.n	80067ee <__swhatbuf_r+0x12>
 800680a:	9a01      	ldr	r2, [sp, #4]
 800680c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006810:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006814:	425a      	negs	r2, r3
 8006816:	415a      	adcs	r2, r3
 8006818:	602a      	str	r2, [r5, #0]
 800681a:	e7ee      	b.n	80067fa <__swhatbuf_r+0x1e>
 800681c:	2340      	movs	r3, #64	; 0x40
 800681e:	2000      	movs	r0, #0
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	b016      	add	sp, #88	; 0x58
 8006824:	bd70      	pop	{r4, r5, r6, pc}
	...

08006828 <__smakebuf_r>:
 8006828:	898b      	ldrh	r3, [r1, #12]
 800682a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800682c:	079d      	lsls	r5, r3, #30
 800682e:	4606      	mov	r6, r0
 8006830:	460c      	mov	r4, r1
 8006832:	d507      	bpl.n	8006844 <__smakebuf_r+0x1c>
 8006834:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	6123      	str	r3, [r4, #16]
 800683c:	2301      	movs	r3, #1
 800683e:	6163      	str	r3, [r4, #20]
 8006840:	b002      	add	sp, #8
 8006842:	bd70      	pop	{r4, r5, r6, pc}
 8006844:	ab01      	add	r3, sp, #4
 8006846:	466a      	mov	r2, sp
 8006848:	f7ff ffc8 	bl	80067dc <__swhatbuf_r>
 800684c:	9900      	ldr	r1, [sp, #0]
 800684e:	4605      	mov	r5, r0
 8006850:	4630      	mov	r0, r6
 8006852:	f7ff fb9f 	bl	8005f94 <_malloc_r>
 8006856:	b948      	cbnz	r0, 800686c <__smakebuf_r+0x44>
 8006858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800685c:	059a      	lsls	r2, r3, #22
 800685e:	d4ef      	bmi.n	8006840 <__smakebuf_r+0x18>
 8006860:	f023 0303 	bic.w	r3, r3, #3
 8006864:	f043 0302 	orr.w	r3, r3, #2
 8006868:	81a3      	strh	r3, [r4, #12]
 800686a:	e7e3      	b.n	8006834 <__smakebuf_r+0xc>
 800686c:	4b0d      	ldr	r3, [pc, #52]	; (80068a4 <__smakebuf_r+0x7c>)
 800686e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006870:	89a3      	ldrh	r3, [r4, #12]
 8006872:	6020      	str	r0, [r4, #0]
 8006874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006878:	81a3      	strh	r3, [r4, #12]
 800687a:	9b00      	ldr	r3, [sp, #0]
 800687c:	6163      	str	r3, [r4, #20]
 800687e:	9b01      	ldr	r3, [sp, #4]
 8006880:	6120      	str	r0, [r4, #16]
 8006882:	b15b      	cbz	r3, 800689c <__smakebuf_r+0x74>
 8006884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006888:	4630      	mov	r0, r6
 800688a:	f000 fc47 	bl	800711c <_isatty_r>
 800688e:	b128      	cbz	r0, 800689c <__smakebuf_r+0x74>
 8006890:	89a3      	ldrh	r3, [r4, #12]
 8006892:	f023 0303 	bic.w	r3, r3, #3
 8006896:	f043 0301 	orr.w	r3, r3, #1
 800689a:	81a3      	strh	r3, [r4, #12]
 800689c:	89a0      	ldrh	r0, [r4, #12]
 800689e:	4305      	orrs	r5, r0
 80068a0:	81a5      	strh	r5, [r4, #12]
 80068a2:	e7cd      	b.n	8006840 <__smakebuf_r+0x18>
 80068a4:	08006611 	.word	0x08006611

080068a8 <__malloc_lock>:
 80068a8:	4801      	ldr	r0, [pc, #4]	; (80068b0 <__malloc_lock+0x8>)
 80068aa:	f7ff bf95 	b.w	80067d8 <__retarget_lock_acquire_recursive>
 80068ae:	bf00      	nop
 80068b0:	20000644 	.word	0x20000644

080068b4 <__malloc_unlock>:
 80068b4:	4801      	ldr	r0, [pc, #4]	; (80068bc <__malloc_unlock+0x8>)
 80068b6:	f7ff bf90 	b.w	80067da <__retarget_lock_release_recursive>
 80068ba:	bf00      	nop
 80068bc:	20000644 	.word	0x20000644

080068c0 <__sfputc_r>:
 80068c0:	6893      	ldr	r3, [r2, #8]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	b410      	push	{r4}
 80068c8:	6093      	str	r3, [r2, #8]
 80068ca:	da08      	bge.n	80068de <__sfputc_r+0x1e>
 80068cc:	6994      	ldr	r4, [r2, #24]
 80068ce:	42a3      	cmp	r3, r4
 80068d0:	db01      	blt.n	80068d6 <__sfputc_r+0x16>
 80068d2:	290a      	cmp	r1, #10
 80068d4:	d103      	bne.n	80068de <__sfputc_r+0x1e>
 80068d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068da:	f000 bb23 	b.w	8006f24 <__swbuf_r>
 80068de:	6813      	ldr	r3, [r2, #0]
 80068e0:	1c58      	adds	r0, r3, #1
 80068e2:	6010      	str	r0, [r2, #0]
 80068e4:	7019      	strb	r1, [r3, #0]
 80068e6:	4608      	mov	r0, r1
 80068e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <__sfputs_r>:
 80068ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f0:	4606      	mov	r6, r0
 80068f2:	460f      	mov	r7, r1
 80068f4:	4614      	mov	r4, r2
 80068f6:	18d5      	adds	r5, r2, r3
 80068f8:	42ac      	cmp	r4, r5
 80068fa:	d101      	bne.n	8006900 <__sfputs_r+0x12>
 80068fc:	2000      	movs	r0, #0
 80068fe:	e007      	b.n	8006910 <__sfputs_r+0x22>
 8006900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006904:	463a      	mov	r2, r7
 8006906:	4630      	mov	r0, r6
 8006908:	f7ff ffda 	bl	80068c0 <__sfputc_r>
 800690c:	1c43      	adds	r3, r0, #1
 800690e:	d1f3      	bne.n	80068f8 <__sfputs_r+0xa>
 8006910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006914 <_vfiprintf_r>:
 8006914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006918:	460d      	mov	r5, r1
 800691a:	b09d      	sub	sp, #116	; 0x74
 800691c:	4614      	mov	r4, r2
 800691e:	4698      	mov	r8, r3
 8006920:	4606      	mov	r6, r0
 8006922:	b118      	cbz	r0, 800692c <_vfiprintf_r+0x18>
 8006924:	6983      	ldr	r3, [r0, #24]
 8006926:	b90b      	cbnz	r3, 800692c <_vfiprintf_r+0x18>
 8006928:	f7ff fea6 	bl	8006678 <__sinit>
 800692c:	4b89      	ldr	r3, [pc, #548]	; (8006b54 <_vfiprintf_r+0x240>)
 800692e:	429d      	cmp	r5, r3
 8006930:	d11b      	bne.n	800696a <_vfiprintf_r+0x56>
 8006932:	6875      	ldr	r5, [r6, #4]
 8006934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006936:	07d9      	lsls	r1, r3, #31
 8006938:	d405      	bmi.n	8006946 <_vfiprintf_r+0x32>
 800693a:	89ab      	ldrh	r3, [r5, #12]
 800693c:	059a      	lsls	r2, r3, #22
 800693e:	d402      	bmi.n	8006946 <_vfiprintf_r+0x32>
 8006940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006942:	f7ff ff49 	bl	80067d8 <__retarget_lock_acquire_recursive>
 8006946:	89ab      	ldrh	r3, [r5, #12]
 8006948:	071b      	lsls	r3, r3, #28
 800694a:	d501      	bpl.n	8006950 <_vfiprintf_r+0x3c>
 800694c:	692b      	ldr	r3, [r5, #16]
 800694e:	b9eb      	cbnz	r3, 800698c <_vfiprintf_r+0x78>
 8006950:	4629      	mov	r1, r5
 8006952:	4630      	mov	r0, r6
 8006954:	f000 fb4a 	bl	8006fec <__swsetup_r>
 8006958:	b1c0      	cbz	r0, 800698c <_vfiprintf_r+0x78>
 800695a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800695c:	07dc      	lsls	r4, r3, #31
 800695e:	d50e      	bpl.n	800697e <_vfiprintf_r+0x6a>
 8006960:	f04f 30ff 	mov.w	r0, #4294967295
 8006964:	b01d      	add	sp, #116	; 0x74
 8006966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696a:	4b7b      	ldr	r3, [pc, #492]	; (8006b58 <_vfiprintf_r+0x244>)
 800696c:	429d      	cmp	r5, r3
 800696e:	d101      	bne.n	8006974 <_vfiprintf_r+0x60>
 8006970:	68b5      	ldr	r5, [r6, #8]
 8006972:	e7df      	b.n	8006934 <_vfiprintf_r+0x20>
 8006974:	4b79      	ldr	r3, [pc, #484]	; (8006b5c <_vfiprintf_r+0x248>)
 8006976:	429d      	cmp	r5, r3
 8006978:	bf08      	it	eq
 800697a:	68f5      	ldreq	r5, [r6, #12]
 800697c:	e7da      	b.n	8006934 <_vfiprintf_r+0x20>
 800697e:	89ab      	ldrh	r3, [r5, #12]
 8006980:	0598      	lsls	r0, r3, #22
 8006982:	d4ed      	bmi.n	8006960 <_vfiprintf_r+0x4c>
 8006984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006986:	f7ff ff28 	bl	80067da <__retarget_lock_release_recursive>
 800698a:	e7e9      	b.n	8006960 <_vfiprintf_r+0x4c>
 800698c:	2300      	movs	r3, #0
 800698e:	9309      	str	r3, [sp, #36]	; 0x24
 8006990:	2320      	movs	r3, #32
 8006992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006996:	f8cd 800c 	str.w	r8, [sp, #12]
 800699a:	2330      	movs	r3, #48	; 0x30
 800699c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006b60 <_vfiprintf_r+0x24c>
 80069a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069a4:	f04f 0901 	mov.w	r9, #1
 80069a8:	4623      	mov	r3, r4
 80069aa:	469a      	mov	sl, r3
 80069ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069b0:	b10a      	cbz	r2, 80069b6 <_vfiprintf_r+0xa2>
 80069b2:	2a25      	cmp	r2, #37	; 0x25
 80069b4:	d1f9      	bne.n	80069aa <_vfiprintf_r+0x96>
 80069b6:	ebba 0b04 	subs.w	fp, sl, r4
 80069ba:	d00b      	beq.n	80069d4 <_vfiprintf_r+0xc0>
 80069bc:	465b      	mov	r3, fp
 80069be:	4622      	mov	r2, r4
 80069c0:	4629      	mov	r1, r5
 80069c2:	4630      	mov	r0, r6
 80069c4:	f7ff ff93 	bl	80068ee <__sfputs_r>
 80069c8:	3001      	adds	r0, #1
 80069ca:	f000 80aa 	beq.w	8006b22 <_vfiprintf_r+0x20e>
 80069ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069d0:	445a      	add	r2, fp
 80069d2:	9209      	str	r2, [sp, #36]	; 0x24
 80069d4:	f89a 3000 	ldrb.w	r3, [sl]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 80a2 	beq.w	8006b22 <_vfiprintf_r+0x20e>
 80069de:	2300      	movs	r3, #0
 80069e0:	f04f 32ff 	mov.w	r2, #4294967295
 80069e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069e8:	f10a 0a01 	add.w	sl, sl, #1
 80069ec:	9304      	str	r3, [sp, #16]
 80069ee:	9307      	str	r3, [sp, #28]
 80069f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069f4:	931a      	str	r3, [sp, #104]	; 0x68
 80069f6:	4654      	mov	r4, sl
 80069f8:	2205      	movs	r2, #5
 80069fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069fe:	4858      	ldr	r0, [pc, #352]	; (8006b60 <_vfiprintf_r+0x24c>)
 8006a00:	f7f9 fc36 	bl	8000270 <memchr>
 8006a04:	9a04      	ldr	r2, [sp, #16]
 8006a06:	b9d8      	cbnz	r0, 8006a40 <_vfiprintf_r+0x12c>
 8006a08:	06d1      	lsls	r1, r2, #27
 8006a0a:	bf44      	itt	mi
 8006a0c:	2320      	movmi	r3, #32
 8006a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a12:	0713      	lsls	r3, r2, #28
 8006a14:	bf44      	itt	mi
 8006a16:	232b      	movmi	r3, #43	; 0x2b
 8006a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a20:	2b2a      	cmp	r3, #42	; 0x2a
 8006a22:	d015      	beq.n	8006a50 <_vfiprintf_r+0x13c>
 8006a24:	9a07      	ldr	r2, [sp, #28]
 8006a26:	4654      	mov	r4, sl
 8006a28:	2000      	movs	r0, #0
 8006a2a:	f04f 0c0a 	mov.w	ip, #10
 8006a2e:	4621      	mov	r1, r4
 8006a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a34:	3b30      	subs	r3, #48	; 0x30
 8006a36:	2b09      	cmp	r3, #9
 8006a38:	d94e      	bls.n	8006ad8 <_vfiprintf_r+0x1c4>
 8006a3a:	b1b0      	cbz	r0, 8006a6a <_vfiprintf_r+0x156>
 8006a3c:	9207      	str	r2, [sp, #28]
 8006a3e:	e014      	b.n	8006a6a <_vfiprintf_r+0x156>
 8006a40:	eba0 0308 	sub.w	r3, r0, r8
 8006a44:	fa09 f303 	lsl.w	r3, r9, r3
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	9304      	str	r3, [sp, #16]
 8006a4c:	46a2      	mov	sl, r4
 8006a4e:	e7d2      	b.n	80069f6 <_vfiprintf_r+0xe2>
 8006a50:	9b03      	ldr	r3, [sp, #12]
 8006a52:	1d19      	adds	r1, r3, #4
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	9103      	str	r1, [sp, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	bfbb      	ittet	lt
 8006a5c:	425b      	neglt	r3, r3
 8006a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8006a62:	9307      	strge	r3, [sp, #28]
 8006a64:	9307      	strlt	r3, [sp, #28]
 8006a66:	bfb8      	it	lt
 8006a68:	9204      	strlt	r2, [sp, #16]
 8006a6a:	7823      	ldrb	r3, [r4, #0]
 8006a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8006a6e:	d10c      	bne.n	8006a8a <_vfiprintf_r+0x176>
 8006a70:	7863      	ldrb	r3, [r4, #1]
 8006a72:	2b2a      	cmp	r3, #42	; 0x2a
 8006a74:	d135      	bne.n	8006ae2 <_vfiprintf_r+0x1ce>
 8006a76:	9b03      	ldr	r3, [sp, #12]
 8006a78:	1d1a      	adds	r2, r3, #4
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	9203      	str	r2, [sp, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	bfb8      	it	lt
 8006a82:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a86:	3402      	adds	r4, #2
 8006a88:	9305      	str	r3, [sp, #20]
 8006a8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b70 <_vfiprintf_r+0x25c>
 8006a8e:	7821      	ldrb	r1, [r4, #0]
 8006a90:	2203      	movs	r2, #3
 8006a92:	4650      	mov	r0, sl
 8006a94:	f7f9 fbec 	bl	8000270 <memchr>
 8006a98:	b140      	cbz	r0, 8006aac <_vfiprintf_r+0x198>
 8006a9a:	2340      	movs	r3, #64	; 0x40
 8006a9c:	eba0 000a 	sub.w	r0, r0, sl
 8006aa0:	fa03 f000 	lsl.w	r0, r3, r0
 8006aa4:	9b04      	ldr	r3, [sp, #16]
 8006aa6:	4303      	orrs	r3, r0
 8006aa8:	3401      	adds	r4, #1
 8006aaa:	9304      	str	r3, [sp, #16]
 8006aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ab0:	482c      	ldr	r0, [pc, #176]	; (8006b64 <_vfiprintf_r+0x250>)
 8006ab2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ab6:	2206      	movs	r2, #6
 8006ab8:	f7f9 fbda 	bl	8000270 <memchr>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	d03f      	beq.n	8006b40 <_vfiprintf_r+0x22c>
 8006ac0:	4b29      	ldr	r3, [pc, #164]	; (8006b68 <_vfiprintf_r+0x254>)
 8006ac2:	bb1b      	cbnz	r3, 8006b0c <_vfiprintf_r+0x1f8>
 8006ac4:	9b03      	ldr	r3, [sp, #12]
 8006ac6:	3307      	adds	r3, #7
 8006ac8:	f023 0307 	bic.w	r3, r3, #7
 8006acc:	3308      	adds	r3, #8
 8006ace:	9303      	str	r3, [sp, #12]
 8006ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ad2:	443b      	add	r3, r7
 8006ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad6:	e767      	b.n	80069a8 <_vfiprintf_r+0x94>
 8006ad8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006adc:	460c      	mov	r4, r1
 8006ade:	2001      	movs	r0, #1
 8006ae0:	e7a5      	b.n	8006a2e <_vfiprintf_r+0x11a>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	3401      	adds	r4, #1
 8006ae6:	9305      	str	r3, [sp, #20]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	f04f 0c0a 	mov.w	ip, #10
 8006aee:	4620      	mov	r0, r4
 8006af0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006af4:	3a30      	subs	r2, #48	; 0x30
 8006af6:	2a09      	cmp	r2, #9
 8006af8:	d903      	bls.n	8006b02 <_vfiprintf_r+0x1ee>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0c5      	beq.n	8006a8a <_vfiprintf_r+0x176>
 8006afe:	9105      	str	r1, [sp, #20]
 8006b00:	e7c3      	b.n	8006a8a <_vfiprintf_r+0x176>
 8006b02:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b06:	4604      	mov	r4, r0
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e7f0      	b.n	8006aee <_vfiprintf_r+0x1da>
 8006b0c:	ab03      	add	r3, sp, #12
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	462a      	mov	r2, r5
 8006b12:	4b16      	ldr	r3, [pc, #88]	; (8006b6c <_vfiprintf_r+0x258>)
 8006b14:	a904      	add	r1, sp, #16
 8006b16:	4630      	mov	r0, r6
 8006b18:	f3af 8000 	nop.w
 8006b1c:	4607      	mov	r7, r0
 8006b1e:	1c78      	adds	r0, r7, #1
 8006b20:	d1d6      	bne.n	8006ad0 <_vfiprintf_r+0x1bc>
 8006b22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b24:	07d9      	lsls	r1, r3, #31
 8006b26:	d405      	bmi.n	8006b34 <_vfiprintf_r+0x220>
 8006b28:	89ab      	ldrh	r3, [r5, #12]
 8006b2a:	059a      	lsls	r2, r3, #22
 8006b2c:	d402      	bmi.n	8006b34 <_vfiprintf_r+0x220>
 8006b2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b30:	f7ff fe53 	bl	80067da <__retarget_lock_release_recursive>
 8006b34:	89ab      	ldrh	r3, [r5, #12]
 8006b36:	065b      	lsls	r3, r3, #25
 8006b38:	f53f af12 	bmi.w	8006960 <_vfiprintf_r+0x4c>
 8006b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b3e:	e711      	b.n	8006964 <_vfiprintf_r+0x50>
 8006b40:	ab03      	add	r3, sp, #12
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	462a      	mov	r2, r5
 8006b46:	4b09      	ldr	r3, [pc, #36]	; (8006b6c <_vfiprintf_r+0x258>)
 8006b48:	a904      	add	r1, sp, #16
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	f000 f880 	bl	8006c50 <_printf_i>
 8006b50:	e7e4      	b.n	8006b1c <_vfiprintf_r+0x208>
 8006b52:	bf00      	nop
 8006b54:	0800747c 	.word	0x0800747c
 8006b58:	0800749c 	.word	0x0800749c
 8006b5c:	0800745c 	.word	0x0800745c
 8006b60:	080074bc 	.word	0x080074bc
 8006b64:	080074c6 	.word	0x080074c6
 8006b68:	00000000 	.word	0x00000000
 8006b6c:	080068ef 	.word	0x080068ef
 8006b70:	080074c2 	.word	0x080074c2

08006b74 <_printf_common>:
 8006b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b78:	4616      	mov	r6, r2
 8006b7a:	4699      	mov	r9, r3
 8006b7c:	688a      	ldr	r2, [r1, #8]
 8006b7e:	690b      	ldr	r3, [r1, #16]
 8006b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b84:	4293      	cmp	r3, r2
 8006b86:	bfb8      	it	lt
 8006b88:	4613      	movlt	r3, r2
 8006b8a:	6033      	str	r3, [r6, #0]
 8006b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b90:	4607      	mov	r7, r0
 8006b92:	460c      	mov	r4, r1
 8006b94:	b10a      	cbz	r2, 8006b9a <_printf_common+0x26>
 8006b96:	3301      	adds	r3, #1
 8006b98:	6033      	str	r3, [r6, #0]
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	0699      	lsls	r1, r3, #26
 8006b9e:	bf42      	ittt	mi
 8006ba0:	6833      	ldrmi	r3, [r6, #0]
 8006ba2:	3302      	addmi	r3, #2
 8006ba4:	6033      	strmi	r3, [r6, #0]
 8006ba6:	6825      	ldr	r5, [r4, #0]
 8006ba8:	f015 0506 	ands.w	r5, r5, #6
 8006bac:	d106      	bne.n	8006bbc <_printf_common+0x48>
 8006bae:	f104 0a19 	add.w	sl, r4, #25
 8006bb2:	68e3      	ldr	r3, [r4, #12]
 8006bb4:	6832      	ldr	r2, [r6, #0]
 8006bb6:	1a9b      	subs	r3, r3, r2
 8006bb8:	42ab      	cmp	r3, r5
 8006bba:	dc26      	bgt.n	8006c0a <_printf_common+0x96>
 8006bbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bc0:	1e13      	subs	r3, r2, #0
 8006bc2:	6822      	ldr	r2, [r4, #0]
 8006bc4:	bf18      	it	ne
 8006bc6:	2301      	movne	r3, #1
 8006bc8:	0692      	lsls	r2, r2, #26
 8006bca:	d42b      	bmi.n	8006c24 <_printf_common+0xb0>
 8006bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bd0:	4649      	mov	r1, r9
 8006bd2:	4638      	mov	r0, r7
 8006bd4:	47c0      	blx	r8
 8006bd6:	3001      	adds	r0, #1
 8006bd8:	d01e      	beq.n	8006c18 <_printf_common+0xa4>
 8006bda:	6823      	ldr	r3, [r4, #0]
 8006bdc:	68e5      	ldr	r5, [r4, #12]
 8006bde:	6832      	ldr	r2, [r6, #0]
 8006be0:	f003 0306 	and.w	r3, r3, #6
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	bf08      	it	eq
 8006be8:	1aad      	subeq	r5, r5, r2
 8006bea:	68a3      	ldr	r3, [r4, #8]
 8006bec:	6922      	ldr	r2, [r4, #16]
 8006bee:	bf0c      	ite	eq
 8006bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bf4:	2500      	movne	r5, #0
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	bfc4      	itt	gt
 8006bfa:	1a9b      	subgt	r3, r3, r2
 8006bfc:	18ed      	addgt	r5, r5, r3
 8006bfe:	2600      	movs	r6, #0
 8006c00:	341a      	adds	r4, #26
 8006c02:	42b5      	cmp	r5, r6
 8006c04:	d11a      	bne.n	8006c3c <_printf_common+0xc8>
 8006c06:	2000      	movs	r0, #0
 8006c08:	e008      	b.n	8006c1c <_printf_common+0xa8>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	4652      	mov	r2, sl
 8006c0e:	4649      	mov	r1, r9
 8006c10:	4638      	mov	r0, r7
 8006c12:	47c0      	blx	r8
 8006c14:	3001      	adds	r0, #1
 8006c16:	d103      	bne.n	8006c20 <_printf_common+0xac>
 8006c18:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c20:	3501      	adds	r5, #1
 8006c22:	e7c6      	b.n	8006bb2 <_printf_common+0x3e>
 8006c24:	18e1      	adds	r1, r4, r3
 8006c26:	1c5a      	adds	r2, r3, #1
 8006c28:	2030      	movs	r0, #48	; 0x30
 8006c2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c2e:	4422      	add	r2, r4
 8006c30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c38:	3302      	adds	r3, #2
 8006c3a:	e7c7      	b.n	8006bcc <_printf_common+0x58>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	4622      	mov	r2, r4
 8006c40:	4649      	mov	r1, r9
 8006c42:	4638      	mov	r0, r7
 8006c44:	47c0      	blx	r8
 8006c46:	3001      	adds	r0, #1
 8006c48:	d0e6      	beq.n	8006c18 <_printf_common+0xa4>
 8006c4a:	3601      	adds	r6, #1
 8006c4c:	e7d9      	b.n	8006c02 <_printf_common+0x8e>
	...

08006c50 <_printf_i>:
 8006c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c54:	7e0f      	ldrb	r7, [r1, #24]
 8006c56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c58:	2f78      	cmp	r7, #120	; 0x78
 8006c5a:	4691      	mov	r9, r2
 8006c5c:	4680      	mov	r8, r0
 8006c5e:	460c      	mov	r4, r1
 8006c60:	469a      	mov	sl, r3
 8006c62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c66:	d807      	bhi.n	8006c78 <_printf_i+0x28>
 8006c68:	2f62      	cmp	r7, #98	; 0x62
 8006c6a:	d80a      	bhi.n	8006c82 <_printf_i+0x32>
 8006c6c:	2f00      	cmp	r7, #0
 8006c6e:	f000 80d8 	beq.w	8006e22 <_printf_i+0x1d2>
 8006c72:	2f58      	cmp	r7, #88	; 0x58
 8006c74:	f000 80a3 	beq.w	8006dbe <_printf_i+0x16e>
 8006c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c80:	e03a      	b.n	8006cf8 <_printf_i+0xa8>
 8006c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c86:	2b15      	cmp	r3, #21
 8006c88:	d8f6      	bhi.n	8006c78 <_printf_i+0x28>
 8006c8a:	a101      	add	r1, pc, #4	; (adr r1, 8006c90 <_printf_i+0x40>)
 8006c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c90:	08006ce9 	.word	0x08006ce9
 8006c94:	08006cfd 	.word	0x08006cfd
 8006c98:	08006c79 	.word	0x08006c79
 8006c9c:	08006c79 	.word	0x08006c79
 8006ca0:	08006c79 	.word	0x08006c79
 8006ca4:	08006c79 	.word	0x08006c79
 8006ca8:	08006cfd 	.word	0x08006cfd
 8006cac:	08006c79 	.word	0x08006c79
 8006cb0:	08006c79 	.word	0x08006c79
 8006cb4:	08006c79 	.word	0x08006c79
 8006cb8:	08006c79 	.word	0x08006c79
 8006cbc:	08006e09 	.word	0x08006e09
 8006cc0:	08006d2d 	.word	0x08006d2d
 8006cc4:	08006deb 	.word	0x08006deb
 8006cc8:	08006c79 	.word	0x08006c79
 8006ccc:	08006c79 	.word	0x08006c79
 8006cd0:	08006e2b 	.word	0x08006e2b
 8006cd4:	08006c79 	.word	0x08006c79
 8006cd8:	08006d2d 	.word	0x08006d2d
 8006cdc:	08006c79 	.word	0x08006c79
 8006ce0:	08006c79 	.word	0x08006c79
 8006ce4:	08006df3 	.word	0x08006df3
 8006ce8:	682b      	ldr	r3, [r5, #0]
 8006cea:	1d1a      	adds	r2, r3, #4
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	602a      	str	r2, [r5, #0]
 8006cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e0a3      	b.n	8006e44 <_printf_i+0x1f4>
 8006cfc:	6820      	ldr	r0, [r4, #0]
 8006cfe:	6829      	ldr	r1, [r5, #0]
 8006d00:	0606      	lsls	r6, r0, #24
 8006d02:	f101 0304 	add.w	r3, r1, #4
 8006d06:	d50a      	bpl.n	8006d1e <_printf_i+0xce>
 8006d08:	680e      	ldr	r6, [r1, #0]
 8006d0a:	602b      	str	r3, [r5, #0]
 8006d0c:	2e00      	cmp	r6, #0
 8006d0e:	da03      	bge.n	8006d18 <_printf_i+0xc8>
 8006d10:	232d      	movs	r3, #45	; 0x2d
 8006d12:	4276      	negs	r6, r6
 8006d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d18:	485e      	ldr	r0, [pc, #376]	; (8006e94 <_printf_i+0x244>)
 8006d1a:	230a      	movs	r3, #10
 8006d1c:	e019      	b.n	8006d52 <_printf_i+0x102>
 8006d1e:	680e      	ldr	r6, [r1, #0]
 8006d20:	602b      	str	r3, [r5, #0]
 8006d22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d26:	bf18      	it	ne
 8006d28:	b236      	sxthne	r6, r6
 8006d2a:	e7ef      	b.n	8006d0c <_printf_i+0xbc>
 8006d2c:	682b      	ldr	r3, [r5, #0]
 8006d2e:	6820      	ldr	r0, [r4, #0]
 8006d30:	1d19      	adds	r1, r3, #4
 8006d32:	6029      	str	r1, [r5, #0]
 8006d34:	0601      	lsls	r1, r0, #24
 8006d36:	d501      	bpl.n	8006d3c <_printf_i+0xec>
 8006d38:	681e      	ldr	r6, [r3, #0]
 8006d3a:	e002      	b.n	8006d42 <_printf_i+0xf2>
 8006d3c:	0646      	lsls	r6, r0, #25
 8006d3e:	d5fb      	bpl.n	8006d38 <_printf_i+0xe8>
 8006d40:	881e      	ldrh	r6, [r3, #0]
 8006d42:	4854      	ldr	r0, [pc, #336]	; (8006e94 <_printf_i+0x244>)
 8006d44:	2f6f      	cmp	r7, #111	; 0x6f
 8006d46:	bf0c      	ite	eq
 8006d48:	2308      	moveq	r3, #8
 8006d4a:	230a      	movne	r3, #10
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d52:	6865      	ldr	r5, [r4, #4]
 8006d54:	60a5      	str	r5, [r4, #8]
 8006d56:	2d00      	cmp	r5, #0
 8006d58:	bfa2      	ittt	ge
 8006d5a:	6821      	ldrge	r1, [r4, #0]
 8006d5c:	f021 0104 	bicge.w	r1, r1, #4
 8006d60:	6021      	strge	r1, [r4, #0]
 8006d62:	b90e      	cbnz	r6, 8006d68 <_printf_i+0x118>
 8006d64:	2d00      	cmp	r5, #0
 8006d66:	d04d      	beq.n	8006e04 <_printf_i+0x1b4>
 8006d68:	4615      	mov	r5, r2
 8006d6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d6e:	fb03 6711 	mls	r7, r3, r1, r6
 8006d72:	5dc7      	ldrb	r7, [r0, r7]
 8006d74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d78:	4637      	mov	r7, r6
 8006d7a:	42bb      	cmp	r3, r7
 8006d7c:	460e      	mov	r6, r1
 8006d7e:	d9f4      	bls.n	8006d6a <_printf_i+0x11a>
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d10b      	bne.n	8006d9c <_printf_i+0x14c>
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	07de      	lsls	r6, r3, #31
 8006d88:	d508      	bpl.n	8006d9c <_printf_i+0x14c>
 8006d8a:	6923      	ldr	r3, [r4, #16]
 8006d8c:	6861      	ldr	r1, [r4, #4]
 8006d8e:	4299      	cmp	r1, r3
 8006d90:	bfde      	ittt	le
 8006d92:	2330      	movle	r3, #48	; 0x30
 8006d94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d9c:	1b52      	subs	r2, r2, r5
 8006d9e:	6122      	str	r2, [r4, #16]
 8006da0:	f8cd a000 	str.w	sl, [sp]
 8006da4:	464b      	mov	r3, r9
 8006da6:	aa03      	add	r2, sp, #12
 8006da8:	4621      	mov	r1, r4
 8006daa:	4640      	mov	r0, r8
 8006dac:	f7ff fee2 	bl	8006b74 <_printf_common>
 8006db0:	3001      	adds	r0, #1
 8006db2:	d14c      	bne.n	8006e4e <_printf_i+0x1fe>
 8006db4:	f04f 30ff 	mov.w	r0, #4294967295
 8006db8:	b004      	add	sp, #16
 8006dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dbe:	4835      	ldr	r0, [pc, #212]	; (8006e94 <_printf_i+0x244>)
 8006dc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006dc4:	6829      	ldr	r1, [r5, #0]
 8006dc6:	6823      	ldr	r3, [r4, #0]
 8006dc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006dcc:	6029      	str	r1, [r5, #0]
 8006dce:	061d      	lsls	r5, r3, #24
 8006dd0:	d514      	bpl.n	8006dfc <_printf_i+0x1ac>
 8006dd2:	07df      	lsls	r7, r3, #31
 8006dd4:	bf44      	itt	mi
 8006dd6:	f043 0320 	orrmi.w	r3, r3, #32
 8006dda:	6023      	strmi	r3, [r4, #0]
 8006ddc:	b91e      	cbnz	r6, 8006de6 <_printf_i+0x196>
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	f023 0320 	bic.w	r3, r3, #32
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	2310      	movs	r3, #16
 8006de8:	e7b0      	b.n	8006d4c <_printf_i+0xfc>
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	f043 0320 	orr.w	r3, r3, #32
 8006df0:	6023      	str	r3, [r4, #0]
 8006df2:	2378      	movs	r3, #120	; 0x78
 8006df4:	4828      	ldr	r0, [pc, #160]	; (8006e98 <_printf_i+0x248>)
 8006df6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dfa:	e7e3      	b.n	8006dc4 <_printf_i+0x174>
 8006dfc:	0659      	lsls	r1, r3, #25
 8006dfe:	bf48      	it	mi
 8006e00:	b2b6      	uxthmi	r6, r6
 8006e02:	e7e6      	b.n	8006dd2 <_printf_i+0x182>
 8006e04:	4615      	mov	r5, r2
 8006e06:	e7bb      	b.n	8006d80 <_printf_i+0x130>
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	6826      	ldr	r6, [r4, #0]
 8006e0c:	6961      	ldr	r1, [r4, #20]
 8006e0e:	1d18      	adds	r0, r3, #4
 8006e10:	6028      	str	r0, [r5, #0]
 8006e12:	0635      	lsls	r5, r6, #24
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	d501      	bpl.n	8006e1c <_printf_i+0x1cc>
 8006e18:	6019      	str	r1, [r3, #0]
 8006e1a:	e002      	b.n	8006e22 <_printf_i+0x1d2>
 8006e1c:	0670      	lsls	r0, r6, #25
 8006e1e:	d5fb      	bpl.n	8006e18 <_printf_i+0x1c8>
 8006e20:	8019      	strh	r1, [r3, #0]
 8006e22:	2300      	movs	r3, #0
 8006e24:	6123      	str	r3, [r4, #16]
 8006e26:	4615      	mov	r5, r2
 8006e28:	e7ba      	b.n	8006da0 <_printf_i+0x150>
 8006e2a:	682b      	ldr	r3, [r5, #0]
 8006e2c:	1d1a      	adds	r2, r3, #4
 8006e2e:	602a      	str	r2, [r5, #0]
 8006e30:	681d      	ldr	r5, [r3, #0]
 8006e32:	6862      	ldr	r2, [r4, #4]
 8006e34:	2100      	movs	r1, #0
 8006e36:	4628      	mov	r0, r5
 8006e38:	f7f9 fa1a 	bl	8000270 <memchr>
 8006e3c:	b108      	cbz	r0, 8006e42 <_printf_i+0x1f2>
 8006e3e:	1b40      	subs	r0, r0, r5
 8006e40:	6060      	str	r0, [r4, #4]
 8006e42:	6863      	ldr	r3, [r4, #4]
 8006e44:	6123      	str	r3, [r4, #16]
 8006e46:	2300      	movs	r3, #0
 8006e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e4c:	e7a8      	b.n	8006da0 <_printf_i+0x150>
 8006e4e:	6923      	ldr	r3, [r4, #16]
 8006e50:	462a      	mov	r2, r5
 8006e52:	4649      	mov	r1, r9
 8006e54:	4640      	mov	r0, r8
 8006e56:	47d0      	blx	sl
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d0ab      	beq.n	8006db4 <_printf_i+0x164>
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	079b      	lsls	r3, r3, #30
 8006e60:	d413      	bmi.n	8006e8a <_printf_i+0x23a>
 8006e62:	68e0      	ldr	r0, [r4, #12]
 8006e64:	9b03      	ldr	r3, [sp, #12]
 8006e66:	4298      	cmp	r0, r3
 8006e68:	bfb8      	it	lt
 8006e6a:	4618      	movlt	r0, r3
 8006e6c:	e7a4      	b.n	8006db8 <_printf_i+0x168>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	4632      	mov	r2, r6
 8006e72:	4649      	mov	r1, r9
 8006e74:	4640      	mov	r0, r8
 8006e76:	47d0      	blx	sl
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d09b      	beq.n	8006db4 <_printf_i+0x164>
 8006e7c:	3501      	adds	r5, #1
 8006e7e:	68e3      	ldr	r3, [r4, #12]
 8006e80:	9903      	ldr	r1, [sp, #12]
 8006e82:	1a5b      	subs	r3, r3, r1
 8006e84:	42ab      	cmp	r3, r5
 8006e86:	dcf2      	bgt.n	8006e6e <_printf_i+0x21e>
 8006e88:	e7eb      	b.n	8006e62 <_printf_i+0x212>
 8006e8a:	2500      	movs	r5, #0
 8006e8c:	f104 0619 	add.w	r6, r4, #25
 8006e90:	e7f5      	b.n	8006e7e <_printf_i+0x22e>
 8006e92:	bf00      	nop
 8006e94:	080074cd 	.word	0x080074cd
 8006e98:	080074de 	.word	0x080074de

08006e9c <__sread>:
 8006e9c:	b510      	push	{r4, lr}
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea4:	f000 f95c 	bl	8007160 <_read_r>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	bfab      	itete	ge
 8006eac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006eae:	89a3      	ldrhlt	r3, [r4, #12]
 8006eb0:	181b      	addge	r3, r3, r0
 8006eb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006eb6:	bfac      	ite	ge
 8006eb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006eba:	81a3      	strhlt	r3, [r4, #12]
 8006ebc:	bd10      	pop	{r4, pc}

08006ebe <__swrite>:
 8006ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec2:	461f      	mov	r7, r3
 8006ec4:	898b      	ldrh	r3, [r1, #12]
 8006ec6:	05db      	lsls	r3, r3, #23
 8006ec8:	4605      	mov	r5, r0
 8006eca:	460c      	mov	r4, r1
 8006ecc:	4616      	mov	r6, r2
 8006ece:	d505      	bpl.n	8006edc <__swrite+0x1e>
 8006ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f000 f930 	bl	800713c <_lseek_r>
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ee6:	81a3      	strh	r3, [r4, #12]
 8006ee8:	4632      	mov	r2, r6
 8006eea:	463b      	mov	r3, r7
 8006eec:	4628      	mov	r0, r5
 8006eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef2:	f000 b869 	b.w	8006fc8 <_write_r>

08006ef6 <__sseek>:
 8006ef6:	b510      	push	{r4, lr}
 8006ef8:	460c      	mov	r4, r1
 8006efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006efe:	f000 f91d 	bl	800713c <_lseek_r>
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	89a3      	ldrh	r3, [r4, #12]
 8006f06:	bf15      	itete	ne
 8006f08:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f12:	81a3      	strheq	r3, [r4, #12]
 8006f14:	bf18      	it	ne
 8006f16:	81a3      	strhne	r3, [r4, #12]
 8006f18:	bd10      	pop	{r4, pc}

08006f1a <__sclose>:
 8006f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f1e:	f000 b8db 	b.w	80070d8 <_close_r>
	...

08006f24 <__swbuf_r>:
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	460e      	mov	r6, r1
 8006f28:	4614      	mov	r4, r2
 8006f2a:	4605      	mov	r5, r0
 8006f2c:	b118      	cbz	r0, 8006f36 <__swbuf_r+0x12>
 8006f2e:	6983      	ldr	r3, [r0, #24]
 8006f30:	b90b      	cbnz	r3, 8006f36 <__swbuf_r+0x12>
 8006f32:	f7ff fba1 	bl	8006678 <__sinit>
 8006f36:	4b21      	ldr	r3, [pc, #132]	; (8006fbc <__swbuf_r+0x98>)
 8006f38:	429c      	cmp	r4, r3
 8006f3a:	d12b      	bne.n	8006f94 <__swbuf_r+0x70>
 8006f3c:	686c      	ldr	r4, [r5, #4]
 8006f3e:	69a3      	ldr	r3, [r4, #24]
 8006f40:	60a3      	str	r3, [r4, #8]
 8006f42:	89a3      	ldrh	r3, [r4, #12]
 8006f44:	071a      	lsls	r2, r3, #28
 8006f46:	d52f      	bpl.n	8006fa8 <__swbuf_r+0x84>
 8006f48:	6923      	ldr	r3, [r4, #16]
 8006f4a:	b36b      	cbz	r3, 8006fa8 <__swbuf_r+0x84>
 8006f4c:	6923      	ldr	r3, [r4, #16]
 8006f4e:	6820      	ldr	r0, [r4, #0]
 8006f50:	1ac0      	subs	r0, r0, r3
 8006f52:	6963      	ldr	r3, [r4, #20]
 8006f54:	b2f6      	uxtb	r6, r6
 8006f56:	4283      	cmp	r3, r0
 8006f58:	4637      	mov	r7, r6
 8006f5a:	dc04      	bgt.n	8006f66 <__swbuf_r+0x42>
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f7ff faf6 	bl	8006550 <_fflush_r>
 8006f64:	bb30      	cbnz	r0, 8006fb4 <__swbuf_r+0x90>
 8006f66:	68a3      	ldr	r3, [r4, #8]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	60a3      	str	r3, [r4, #8]
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	6022      	str	r2, [r4, #0]
 8006f72:	701e      	strb	r6, [r3, #0]
 8006f74:	6963      	ldr	r3, [r4, #20]
 8006f76:	3001      	adds	r0, #1
 8006f78:	4283      	cmp	r3, r0
 8006f7a:	d004      	beq.n	8006f86 <__swbuf_r+0x62>
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	07db      	lsls	r3, r3, #31
 8006f80:	d506      	bpl.n	8006f90 <__swbuf_r+0x6c>
 8006f82:	2e0a      	cmp	r6, #10
 8006f84:	d104      	bne.n	8006f90 <__swbuf_r+0x6c>
 8006f86:	4621      	mov	r1, r4
 8006f88:	4628      	mov	r0, r5
 8006f8a:	f7ff fae1 	bl	8006550 <_fflush_r>
 8006f8e:	b988      	cbnz	r0, 8006fb4 <__swbuf_r+0x90>
 8006f90:	4638      	mov	r0, r7
 8006f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f94:	4b0a      	ldr	r3, [pc, #40]	; (8006fc0 <__swbuf_r+0x9c>)
 8006f96:	429c      	cmp	r4, r3
 8006f98:	d101      	bne.n	8006f9e <__swbuf_r+0x7a>
 8006f9a:	68ac      	ldr	r4, [r5, #8]
 8006f9c:	e7cf      	b.n	8006f3e <__swbuf_r+0x1a>
 8006f9e:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <__swbuf_r+0xa0>)
 8006fa0:	429c      	cmp	r4, r3
 8006fa2:	bf08      	it	eq
 8006fa4:	68ec      	ldreq	r4, [r5, #12]
 8006fa6:	e7ca      	b.n	8006f3e <__swbuf_r+0x1a>
 8006fa8:	4621      	mov	r1, r4
 8006faa:	4628      	mov	r0, r5
 8006fac:	f000 f81e 	bl	8006fec <__swsetup_r>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d0cb      	beq.n	8006f4c <__swbuf_r+0x28>
 8006fb4:	f04f 37ff 	mov.w	r7, #4294967295
 8006fb8:	e7ea      	b.n	8006f90 <__swbuf_r+0x6c>
 8006fba:	bf00      	nop
 8006fbc:	0800747c 	.word	0x0800747c
 8006fc0:	0800749c 	.word	0x0800749c
 8006fc4:	0800745c 	.word	0x0800745c

08006fc8 <_write_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	4d07      	ldr	r5, [pc, #28]	; (8006fe8 <_write_r+0x20>)
 8006fcc:	4604      	mov	r4, r0
 8006fce:	4608      	mov	r0, r1
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	602a      	str	r2, [r5, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f7fa f827 	bl	800102a <_write>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d102      	bne.n	8006fe6 <_write_r+0x1e>
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	b103      	cbz	r3, 8006fe6 <_write_r+0x1e>
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
 8006fe8:	20000648 	.word	0x20000648

08006fec <__swsetup_r>:
 8006fec:	4b32      	ldr	r3, [pc, #200]	; (80070b8 <__swsetup_r+0xcc>)
 8006fee:	b570      	push	{r4, r5, r6, lr}
 8006ff0:	681d      	ldr	r5, [r3, #0]
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	b125      	cbz	r5, 8007002 <__swsetup_r+0x16>
 8006ff8:	69ab      	ldr	r3, [r5, #24]
 8006ffa:	b913      	cbnz	r3, 8007002 <__swsetup_r+0x16>
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	f7ff fb3b 	bl	8006678 <__sinit>
 8007002:	4b2e      	ldr	r3, [pc, #184]	; (80070bc <__swsetup_r+0xd0>)
 8007004:	429c      	cmp	r4, r3
 8007006:	d10f      	bne.n	8007028 <__swsetup_r+0x3c>
 8007008:	686c      	ldr	r4, [r5, #4]
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007010:	0719      	lsls	r1, r3, #28
 8007012:	d42c      	bmi.n	800706e <__swsetup_r+0x82>
 8007014:	06dd      	lsls	r5, r3, #27
 8007016:	d411      	bmi.n	800703c <__swsetup_r+0x50>
 8007018:	2309      	movs	r3, #9
 800701a:	6033      	str	r3, [r6, #0]
 800701c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007020:	81a3      	strh	r3, [r4, #12]
 8007022:	f04f 30ff 	mov.w	r0, #4294967295
 8007026:	e03e      	b.n	80070a6 <__swsetup_r+0xba>
 8007028:	4b25      	ldr	r3, [pc, #148]	; (80070c0 <__swsetup_r+0xd4>)
 800702a:	429c      	cmp	r4, r3
 800702c:	d101      	bne.n	8007032 <__swsetup_r+0x46>
 800702e:	68ac      	ldr	r4, [r5, #8]
 8007030:	e7eb      	b.n	800700a <__swsetup_r+0x1e>
 8007032:	4b24      	ldr	r3, [pc, #144]	; (80070c4 <__swsetup_r+0xd8>)
 8007034:	429c      	cmp	r4, r3
 8007036:	bf08      	it	eq
 8007038:	68ec      	ldreq	r4, [r5, #12]
 800703a:	e7e6      	b.n	800700a <__swsetup_r+0x1e>
 800703c:	0758      	lsls	r0, r3, #29
 800703e:	d512      	bpl.n	8007066 <__swsetup_r+0x7a>
 8007040:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007042:	b141      	cbz	r1, 8007056 <__swsetup_r+0x6a>
 8007044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007048:	4299      	cmp	r1, r3
 800704a:	d002      	beq.n	8007052 <__swsetup_r+0x66>
 800704c:	4630      	mov	r0, r6
 800704e:	f7fe ff35 	bl	8005ebc <_free_r>
 8007052:	2300      	movs	r3, #0
 8007054:	6363      	str	r3, [r4, #52]	; 0x34
 8007056:	89a3      	ldrh	r3, [r4, #12]
 8007058:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800705c:	81a3      	strh	r3, [r4, #12]
 800705e:	2300      	movs	r3, #0
 8007060:	6063      	str	r3, [r4, #4]
 8007062:	6923      	ldr	r3, [r4, #16]
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	f043 0308 	orr.w	r3, r3, #8
 800706c:	81a3      	strh	r3, [r4, #12]
 800706e:	6923      	ldr	r3, [r4, #16]
 8007070:	b94b      	cbnz	r3, 8007086 <__swsetup_r+0x9a>
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800707c:	d003      	beq.n	8007086 <__swsetup_r+0x9a>
 800707e:	4621      	mov	r1, r4
 8007080:	4630      	mov	r0, r6
 8007082:	f7ff fbd1 	bl	8006828 <__smakebuf_r>
 8007086:	89a0      	ldrh	r0, [r4, #12]
 8007088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800708c:	f010 0301 	ands.w	r3, r0, #1
 8007090:	d00a      	beq.n	80070a8 <__swsetup_r+0xbc>
 8007092:	2300      	movs	r3, #0
 8007094:	60a3      	str	r3, [r4, #8]
 8007096:	6963      	ldr	r3, [r4, #20]
 8007098:	425b      	negs	r3, r3
 800709a:	61a3      	str	r3, [r4, #24]
 800709c:	6923      	ldr	r3, [r4, #16]
 800709e:	b943      	cbnz	r3, 80070b2 <__swsetup_r+0xc6>
 80070a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070a4:	d1ba      	bne.n	800701c <__swsetup_r+0x30>
 80070a6:	bd70      	pop	{r4, r5, r6, pc}
 80070a8:	0781      	lsls	r1, r0, #30
 80070aa:	bf58      	it	pl
 80070ac:	6963      	ldrpl	r3, [r4, #20]
 80070ae:	60a3      	str	r3, [r4, #8]
 80070b0:	e7f4      	b.n	800709c <__swsetup_r+0xb0>
 80070b2:	2000      	movs	r0, #0
 80070b4:	e7f7      	b.n	80070a6 <__swsetup_r+0xba>
 80070b6:	bf00      	nop
 80070b8:	20000010 	.word	0x20000010
 80070bc:	0800747c 	.word	0x0800747c
 80070c0:	0800749c 	.word	0x0800749c
 80070c4:	0800745c 	.word	0x0800745c

080070c8 <abort>:
 80070c8:	b508      	push	{r3, lr}
 80070ca:	2006      	movs	r0, #6
 80070cc:	f000 f882 	bl	80071d4 <raise>
 80070d0:	2001      	movs	r0, #1
 80070d2:	f7f9 ff83 	bl	8000fdc <_exit>
	...

080070d8 <_close_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4d06      	ldr	r5, [pc, #24]	; (80070f4 <_close_r+0x1c>)
 80070dc:	2300      	movs	r3, #0
 80070de:	4604      	mov	r4, r0
 80070e0:	4608      	mov	r0, r1
 80070e2:	602b      	str	r3, [r5, #0]
 80070e4:	f7f9 ffbd 	bl	8001062 <_close>
 80070e8:	1c43      	adds	r3, r0, #1
 80070ea:	d102      	bne.n	80070f2 <_close_r+0x1a>
 80070ec:	682b      	ldr	r3, [r5, #0]
 80070ee:	b103      	cbz	r3, 80070f2 <_close_r+0x1a>
 80070f0:	6023      	str	r3, [r4, #0]
 80070f2:	bd38      	pop	{r3, r4, r5, pc}
 80070f4:	20000648 	.word	0x20000648

080070f8 <_fstat_r>:
 80070f8:	b538      	push	{r3, r4, r5, lr}
 80070fa:	4d07      	ldr	r5, [pc, #28]	; (8007118 <_fstat_r+0x20>)
 80070fc:	2300      	movs	r3, #0
 80070fe:	4604      	mov	r4, r0
 8007100:	4608      	mov	r0, r1
 8007102:	4611      	mov	r1, r2
 8007104:	602b      	str	r3, [r5, #0]
 8007106:	f7f9 ffb8 	bl	800107a <_fstat>
 800710a:	1c43      	adds	r3, r0, #1
 800710c:	d102      	bne.n	8007114 <_fstat_r+0x1c>
 800710e:	682b      	ldr	r3, [r5, #0]
 8007110:	b103      	cbz	r3, 8007114 <_fstat_r+0x1c>
 8007112:	6023      	str	r3, [r4, #0]
 8007114:	bd38      	pop	{r3, r4, r5, pc}
 8007116:	bf00      	nop
 8007118:	20000648 	.word	0x20000648

0800711c <_isatty_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4d06      	ldr	r5, [pc, #24]	; (8007138 <_isatty_r+0x1c>)
 8007120:	2300      	movs	r3, #0
 8007122:	4604      	mov	r4, r0
 8007124:	4608      	mov	r0, r1
 8007126:	602b      	str	r3, [r5, #0]
 8007128:	f7f9 ffb7 	bl	800109a <_isatty>
 800712c:	1c43      	adds	r3, r0, #1
 800712e:	d102      	bne.n	8007136 <_isatty_r+0x1a>
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	b103      	cbz	r3, 8007136 <_isatty_r+0x1a>
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	bd38      	pop	{r3, r4, r5, pc}
 8007138:	20000648 	.word	0x20000648

0800713c <_lseek_r>:
 800713c:	b538      	push	{r3, r4, r5, lr}
 800713e:	4d07      	ldr	r5, [pc, #28]	; (800715c <_lseek_r+0x20>)
 8007140:	4604      	mov	r4, r0
 8007142:	4608      	mov	r0, r1
 8007144:	4611      	mov	r1, r2
 8007146:	2200      	movs	r2, #0
 8007148:	602a      	str	r2, [r5, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	f7f9 ffb0 	bl	80010b0 <_lseek>
 8007150:	1c43      	adds	r3, r0, #1
 8007152:	d102      	bne.n	800715a <_lseek_r+0x1e>
 8007154:	682b      	ldr	r3, [r5, #0]
 8007156:	b103      	cbz	r3, 800715a <_lseek_r+0x1e>
 8007158:	6023      	str	r3, [r4, #0]
 800715a:	bd38      	pop	{r3, r4, r5, pc}
 800715c:	20000648 	.word	0x20000648

08007160 <_read_r>:
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	4d07      	ldr	r5, [pc, #28]	; (8007180 <_read_r+0x20>)
 8007164:	4604      	mov	r4, r0
 8007166:	4608      	mov	r0, r1
 8007168:	4611      	mov	r1, r2
 800716a:	2200      	movs	r2, #0
 800716c:	602a      	str	r2, [r5, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	f7f9 ff3e 	bl	8000ff0 <_read>
 8007174:	1c43      	adds	r3, r0, #1
 8007176:	d102      	bne.n	800717e <_read_r+0x1e>
 8007178:	682b      	ldr	r3, [r5, #0]
 800717a:	b103      	cbz	r3, 800717e <_read_r+0x1e>
 800717c:	6023      	str	r3, [r4, #0]
 800717e:	bd38      	pop	{r3, r4, r5, pc}
 8007180:	20000648 	.word	0x20000648

08007184 <_raise_r>:
 8007184:	291f      	cmp	r1, #31
 8007186:	b538      	push	{r3, r4, r5, lr}
 8007188:	4604      	mov	r4, r0
 800718a:	460d      	mov	r5, r1
 800718c:	d904      	bls.n	8007198 <_raise_r+0x14>
 800718e:	2316      	movs	r3, #22
 8007190:	6003      	str	r3, [r0, #0]
 8007192:	f04f 30ff 	mov.w	r0, #4294967295
 8007196:	bd38      	pop	{r3, r4, r5, pc}
 8007198:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800719a:	b112      	cbz	r2, 80071a2 <_raise_r+0x1e>
 800719c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071a0:	b94b      	cbnz	r3, 80071b6 <_raise_r+0x32>
 80071a2:	4620      	mov	r0, r4
 80071a4:	f000 f830 	bl	8007208 <_getpid_r>
 80071a8:	462a      	mov	r2, r5
 80071aa:	4601      	mov	r1, r0
 80071ac:	4620      	mov	r0, r4
 80071ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071b2:	f000 b817 	b.w	80071e4 <_kill_r>
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d00a      	beq.n	80071d0 <_raise_r+0x4c>
 80071ba:	1c59      	adds	r1, r3, #1
 80071bc:	d103      	bne.n	80071c6 <_raise_r+0x42>
 80071be:	2316      	movs	r3, #22
 80071c0:	6003      	str	r3, [r0, #0]
 80071c2:	2001      	movs	r0, #1
 80071c4:	e7e7      	b.n	8007196 <_raise_r+0x12>
 80071c6:	2400      	movs	r4, #0
 80071c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80071cc:	4628      	mov	r0, r5
 80071ce:	4798      	blx	r3
 80071d0:	2000      	movs	r0, #0
 80071d2:	e7e0      	b.n	8007196 <_raise_r+0x12>

080071d4 <raise>:
 80071d4:	4b02      	ldr	r3, [pc, #8]	; (80071e0 <raise+0xc>)
 80071d6:	4601      	mov	r1, r0
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	f7ff bfd3 	b.w	8007184 <_raise_r>
 80071de:	bf00      	nop
 80071e0:	20000010 	.word	0x20000010

080071e4 <_kill_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4d07      	ldr	r5, [pc, #28]	; (8007204 <_kill_r+0x20>)
 80071e8:	2300      	movs	r3, #0
 80071ea:	4604      	mov	r4, r0
 80071ec:	4608      	mov	r0, r1
 80071ee:	4611      	mov	r1, r2
 80071f0:	602b      	str	r3, [r5, #0]
 80071f2:	f7f9 fee3 	bl	8000fbc <_kill>
 80071f6:	1c43      	adds	r3, r0, #1
 80071f8:	d102      	bne.n	8007200 <_kill_r+0x1c>
 80071fa:	682b      	ldr	r3, [r5, #0]
 80071fc:	b103      	cbz	r3, 8007200 <_kill_r+0x1c>
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	bd38      	pop	{r3, r4, r5, pc}
 8007202:	bf00      	nop
 8007204:	20000648 	.word	0x20000648

08007208 <_getpid_r>:
 8007208:	f7f9 bed0 	b.w	8000fac <_getpid>

0800720c <_init>:
 800720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720e:	bf00      	nop
 8007210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007212:	bc08      	pop	{r3}
 8007214:	469e      	mov	lr, r3
 8007216:	4770      	bx	lr

08007218 <_fini>:
 8007218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721a:	bf00      	nop
 800721c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800721e:	bc08      	pop	{r3}
 8007220:	469e      	mov	lr, r3
 8007222:	4770      	bx	lr
